/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIG_PYTHON_CLASSIC


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AbstractCellArray swig_types[0]
#define SWIGTYPE_p_AccumulateOp swig_types[1]
#define SWIGTYPE_p_AggregateOp swig_types[2]
#define SWIGTYPE_p_Aggregate__Any swig_types[3]
#define SWIGTYPE_p_Aggregate__Count swig_types[4]
#define SWIGTYPE_p_Aggregate___averageT_float_t swig_types[5]
#define SWIGTYPE_p_Aggregate___averageT_int_t swig_types[6]
#define SWIGTYPE_p_Aggregate___maxT_float_t swig_types[7]
#define SWIGTYPE_p_Aggregate___maxT_int_t swig_types[8]
#define SWIGTYPE_p_Aggregate___minT_float_t swig_types[9]
#define SWIGTYPE_p_Aggregate___minT_int_t swig_types[10]
#define SWIGTYPE_p_Aggregate___sumT_float_t swig_types[11]
#define SWIGTYPE_p_Aggregate___sumT_int_t swig_types[12]
#define SWIGTYPE_p_Aggregate__area swig_types[13]
#define SWIGTYPE_p_Aggregate__dotwo swig_types[14]
#define SWIGTYPE_p_Aggregate__first swig_types[15]
#define SWIGTYPE_p_Aggregate__gradient3DT_float_t swig_types[16]
#define SWIGTYPE_p_Aggregate__gradient3DT_int_t swig_types[17]
#define SWIGTYPE_p_Aggregate__gradientT_float_t swig_types[18]
#define SWIGTYPE_p_Aggregate__gradientT_int_t swig_types[19]
#define SWIGTYPE_p_Aggregate__interpolate1DT_float_t swig_types[20]
#define SWIGTYPE_p_Aggregate__interpolate1DT_int_t swig_types[21]
#define SWIGTYPE_p_Aggregate__interpolate2D swig_types[22]
#define SWIGTYPE_p_Aggregate__interpolate3D swig_types[23]
#define SWIGTYPE_p_Aggregate__mkvector swig_types[24]
#define SWIGTYPE_p_Aggregate__project swig_types[25]
#define SWIGTYPE_p_Aggregate__setunionT_float_t swig_types[26]
#define SWIGTYPE_p_Aggregate__setunionT_int_t swig_types[27]
#define SWIGTYPE_p_Aggregate__statistics swig_types[28]
#define SWIGTYPE_p_Aggregate__triGradientT_float_t swig_types[29]
#define SWIGTYPE_p_Aggregate__triGradientT_int_t swig_types[30]
#define SWIGTYPE_p_Aggregate__triweights swig_types[31]
#define SWIGTYPE_p_AggregationFunction swig_types[32]
#define SWIGTYPE_p_ApplyOp swig_types[33]
#define SWIGTYPE_p_Array swig_types[34]
#define SWIGTYPE_p_ArrayReader swig_types[35]
#define SWIGTYPE_p_ArrayWriter swig_types[36]
#define SWIGTYPE_p_Assign__Both swig_types[37]
#define SWIGTYPE_p_Assign__Either swig_types[38]
#define SWIGTYPE_p_Assign__IncidentTo swig_types[39]
#define SWIGTYPE_p_Assign__Nodes swig_types[40]
#define SWIGTYPE_p_Assign__adjacent swig_types[41]
#define SWIGTYPE_p_Assign__adjacentNodes swig_types[42]
#define SWIGTYPE_p_Assign__byPointerSet swig_types[43]
#define SWIGTYPE_p_Assign__bypointer swig_types[44]
#define SWIGTYPE_p_Assign__containedby swig_types[45]
#define SWIGTYPE_p_Assign__contains swig_types[46]
#define SWIGTYPE_p_Assign__fastcontainedby swig_types[47]
#define SWIGTYPE_p_Assign__ident swig_types[48]
#define SWIGTYPE_p_Assign__intervalContains swig_types[49]
#define SWIGTYPE_p_Assign__inverse_pointer swig_types[50]
#define SWIGTYPE_p_Assign__match swig_types[51]
#define SWIGTYPE_p_Assign__memberofT_float_t swig_types[52]
#define SWIGTYPE_p_Assign__memberofT_int_t swig_types[53]
#define SWIGTYPE_p_Assign__nearest swig_types[54]
#define SWIGTYPE_p_Assign__neighbors swig_types[55]
#define SWIGTYPE_p_Assign__pointpoly swig_types[56]
#define SWIGTYPE_p_Assign__pointpoly2 swig_types[57]
#define SWIGTYPE_p_Assign__sortedmatch swig_types[58]
#define SWIGTYPE_p_Assign__unify swig_types[59]
#define SWIGTYPE_p_AssignmentFunction swig_types[60]
#define SWIGTYPE_p_BinaryGridFieldOperator swig_types[61]
#define SWIGTYPE_p_BindConstantOp swig_types[62]
#define SWIGTYPE_p_BindOp swig_types[63]
#define SWIGTYPE_p_Cell swig_types[64]
#define SWIGTYPE_p_CellArray swig_types[65]
#define SWIGTYPE_p_CellHash swig_types[66]
#define SWIGTYPE_p_ConstArray swig_types[67]
#define SWIGTYPE_p_CrossNodeMap swig_types[68]
#define SWIGTYPE_p_CrossOp swig_types[69]
#define SWIGTYPE_p_DataDumpOp swig_types[70]
#define SWIGTYPE_p_Dataset swig_types[71]
#define SWIGTYPE_p_DatumIteratorT_float_t swig_types[72]
#define SWIGTYPE_p_DatumIteratorT_int_t swig_types[73]
#define SWIGTYPE_p_ElcircFile swig_types[74]
#define SWIGTYPE_p_ElcircHeader swig_types[75]
#define SWIGTYPE_p_ElcircTimeStep swig_types[76]
#define SWIGTYPE_p_ElcircTimeStepAtNode swig_types[77]
#define SWIGTYPE_p_ElioGrid swig_types[78]
#define SWIGTYPE_p_FILE swig_types[79]
#define SWIGTYPE_p_FieldIterator swig_types[80]
#define SWIGTYPE_p_FileArrayReader swig_types[81]
#define SWIGTYPE_p_Grid swig_types[82]
#define SWIGTYPE_p_GridField swig_types[83]
#define SWIGTYPE_p_GridFieldOperator swig_types[84]
#define SWIGTYPE_p_Implicit0Cells swig_types[85]
#define SWIGTYPE_p_IncidenceIndex swig_types[86]
#define SWIGTYPE_p_InvertedCellIndex swig_types[87]
#define SWIGTYPE_p_MergeOp swig_types[88]
#define SWIGTYPE_p_NcFile swig_types[89]
#define SWIGTYPE_p_NcType swig_types[90]
#define SWIGTYPE_p_NetCDFAdaptor swig_types[91]
#define SWIGTYPE_p_NormNodeMap swig_types[92]
#define SWIGTYPE_p_Object swig_types[93]
#define SWIGTYPE_p_OneGrid swig_types[94]
#define SWIGTYPE_p_OrdMap swig_types[95]
#define SWIGTYPE_p_OutputNetCDFDim swig_types[96]
#define SWIGTYPE_p_OutputNetCDFOp swig_types[97]
#define SWIGTYPE_p_OutputNetCDFVars swig_types[98]
#define SWIGTYPE_p_OutputOp swig_types[99]
#define SWIGTYPE_p_ProjectArrayReader swig_types[100]
#define SWIGTYPE_p_ProjectOp swig_types[101]
#define SWIGTYPE_p_PyStringObject swig_types[102]
#define SWIGTYPE_p_RankedDataset swig_types[103]
#define SWIGTYPE_p_RestrictOp swig_types[104]
#define SWIGTYPE_p_ScanInternal swig_types[105]
#define SWIGTYPE_p_ScanOp swig_types[106]
#define SWIGTYPE_p_Scheme swig_types[107]
#define SWIGTYPE_p_SiftOp swig_types[108]
#define SWIGTYPE_p_SimpleCellHash swig_types[109]
#define SWIGTYPE_p_SortedCellIndex swig_types[110]
#define SWIGTYPE_p_SpecializedTupleFunction swig_types[111]
#define SWIGTYPE_p_TextFileArrayReader swig_types[112]
#define SWIGTYPE_p_Tuple swig_types[113]
#define SWIGTYPE_p_TupleFunction swig_types[114]
#define SWIGTYPE_p_UnaryGridFieldOperator swig_types[115]
#define SWIGTYPE_p_UnaryNodeMap swig_types[116]
#define SWIGTYPE_p_UnitGrid swig_types[117]
#define SWIGTYPE_p_UnitGridField swig_types[118]
#define SWIGTYPE_p_ZeroGrid swig_types[119]
#define SWIGTYPE_p_ZeroaryGridFieldOperator swig_types[120]
#define SWIGTYPE_p_allocator_type swig_types[121]
#define SWIGTYPE_p_bool swig_types[122]
#define SWIGTYPE_p_char swig_types[123]
#define SWIGTYPE_p_difference_type swig_types[124]
#define SWIGTYPE_p_double swig_types[125]
#define SWIGTYPE_p_e_Tag swig_types[126]
#define SWIGTYPE_p_e_Type swig_types[127]
#define SWIGTYPE_p_eqCell swig_types[128]
#define SWIGTYPE_p_float swig_types[129]
#define SWIGTYPE_p_ifstream swig_types[130]
#define SWIGTYPE_p_int swig_types[131]
#define SWIGTYPE_p_istream swig_types[132]
#define SWIGTYPE_p_ltCell swig_types[133]
#define SWIGTYPE_p_nullstream swig_types[134]
#define SWIGTYPE_p_ofstream swig_types[135]
#define SWIGTYPE_p_ostream swig_types[136]
#define SWIGTYPE_p_p_PyObject swig_types[137]
#define SWIGTYPE_p_p_float swig_types[138]
#define SWIGTYPE_p_p_int swig_types[139]
#define SWIGTYPE_p_p_p_void swig_types[140]
#define SWIGTYPE_p_p_void swig_types[141]
#define SWIGTYPE_p_setT_unsigned_int_t swig_types[142]
#define SWIGTYPE_p_setT_unsigned_long_t swig_types[143]
#define SWIGTYPE_p_short swig_types[144]
#define SWIGTYPE_p_size_t swig_types[145]
#define SWIGTYPE_p_size_type swig_types[146]
#define SWIGTYPE_p_std__invalid_argument swig_types[147]
#define SWIGTYPE_p_std__string swig_types[148]
#define SWIGTYPE_p_std__vectorT_Cell_std__allocatorT_Cell_t_t swig_types[149]
#define SWIGTYPE_p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type swig_types[153]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[154]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type swig_types[155]
#define SWIGTYPE_p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator swig_types[156]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[157]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[158]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type swig_types[159]
#define SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[160]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[161]
#define SWIGTYPE_p_unsigned_int swig_types[162]
#define SWIGTYPE_p_unsigned_long swig_types[163]
#define SWIGTYPE_p_value_type swig_types[164]
#define SWIGTYPE_p_void swig_types[165]
static swig_type_info *swig_types[167];
static swig_module_info swig_module = {swig_types, 166, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _core.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__core

#else
#  define SWIG_init    init_core

#endif
#define SWIG_name    "_core"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "object.h"
#include "unarynodemap.h"
#include "crossnodemap.h"
#include "abstractcellarray.h"
#include "cellarray.h"
#include "implicit0cells.h"
#include "cell.h"
#include "cellarray.h"
#include "grid.h"
#include "array.h"
#include "constarray.h"
#include "dataset.h"
#include "rankeddataset.h"
#include "gridfield.h"
#include "arrayreader.h"
#include "arraywriter.h"
#include "gridfieldoperator.h"
#include "bind.h"
#include "bindconstant.h"
#include "cross.h"
#include "restrict.h"
#include "apply.h"
#include "accumulate.h"
//#include "subapply.h"
//#include "state.h"
#include "project.h"
#include "aggregate.h"
#include "aggregations.h"
#include "assignments.h"
#include "merge.h"
#include "output.h"
#include "tonetcdf.h"
#include "netcdfadaptor.h"
//#include "stuebe.h"
#include "scan.h"
#include "scaninternal.h"
//#include "tag.h"
//#include "iterate.h"
#include "tuple.h"
#include "sift.h"
#include "onegrid.h"
#include "datadump.h"
#include "expr.h"
#include "util.h"

#include "elcircfile.h"
extern "C" { 
#include "elio.h"
}


#include <string>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


CellArray * castToCellArray(AbstractCellArray * x) {
   return static_cast< CellArray * >(x);
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }


float derefFloat(UnTypedPtr ptr) {
  return *(float *) ptr;
}

int derefInt(UnTypedPtr ptr) {
  return *(int *) ptr;
}

PyObject *derefPyObject(UnTypedPtr ptr) {
  PyObject *p =  *(PyObject **) ptr;
  Py_XINCREF(p);
  return p;
}
  
PyStringObject *derefPyString(UnTypedPtr ptr) {
  return *(PyStringObject **) ptr;
}
  
string derefString(UnTypedPtr ptr) {
  return *(std::string *) ptr;
}

PyObject *asPyObject(UnTypedPtr ptr) {
  PyObject *p =  (PyObject *) ptr;
  Py_XINCREF(p);
  return p;
}

PyStringObject *asPyString(UnTypedPtr p) {
  return (PyStringObject *) p;
}

ArrayReader *makeArrayReader(int *array, int size) {
 stringstream *ss = new stringstream();
 stringbuf *pbuf;
 pbuf=ss->rdbuf();
 pbuf->sputn((char *) array, 4*size);
 return new ArrayReader(ss);
}

ArrayReader *makeArrayReader(float *array, int size) {
 stringstream *ss = new stringstream();
 stringbuf *pbuf;
 pbuf=ss->rdbuf();
 pbuf->sputn((char *) array, 4*size);
 return new ArrayReader(ss);
}

UnTypedPtr asUnTypedPtr(PyObject *p) {
  return (UnTypedPtr) p;
}



SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


void print_array(Node *array, int size) {
  for (int i=0; i<size; i++) {
    printf("%f\n", array[i]);
  }
}


void testsign(unsigned int size) {
  printf("unsigned: %u\n", size);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}





SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_castToCellArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AbstractCellArray *arg1 = (AbstractCellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:castToCellArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "castToCellArray" "', argument " "1"" of type '" "AbstractCellArray *""'"); 
  }
  arg1 = reinterpret_cast< AbstractCellArray * >(argp1);
  result = (CellArray *)castToCellArray(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectori___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectori___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectori___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< int > *,std::vector< int >::difference_type)\n"
    "    __delitem__(std::vector< int > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectori___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectori___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< int > *,PySliceObject *)\n"
    "    __getitem__(std::vector< int > const *,std::vector< int >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectori___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectori___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< int > *,PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    __setitem__(std::vector< int > *,std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectori")) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator< int > > *ptr = (std::vector<int,std::allocator< int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectori_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectori_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_begin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_end" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_rbegin" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_rend" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectori",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectori_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectori_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectori_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator)\n"
    "    erase(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectori",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectori" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectori" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectori(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectori__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectori__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectori__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vectori__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_vectori'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >()\n"
    "    std::vector< int >(std::vector< int > const &)\n"
    "    std::vector< int >(std::vector< int >::size_type)\n"
    "    std::vector< int >(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectori_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectori_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type)\n"
    "    resize(std::vector< int > *,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectori_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectori_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectori_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectori_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectori_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectori_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vectori_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectori_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    insert(std::vector< int > *,std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectori_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectori_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectori_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectori_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectori_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectori(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectori",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectori" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectori_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectord_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectord___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectord___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectord___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< double > *,std::vector< double >::difference_type)\n"
    "    __delitem__(std::vector< double > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectord___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectord___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< double > *,PySliceObject *)\n"
    "    __getitem__(std::vector< double > const *,std::vector< double >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectord___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectord___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< double > *,PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    __setitem__(std::vector< double > *,std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectord")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectord_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectord_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_begin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_end" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_rbegin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_rend" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectord",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectord_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectord_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectord_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator)\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectord",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectord" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectord" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectord__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectord__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectord__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vectord__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_vectord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >()\n"
    "    std::vector< double >(std::vector< double > const &)\n"
    "    std::vector< double >(std::vector< double >::size_type)\n"
    "    std::vector< double >(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectord_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectord_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type)\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectord_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectord_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectord_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectord_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectord_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< double >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vectord_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vectord_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectord_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectord_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectord_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectord_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectord_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectord_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectord",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectord" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectord_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_vectorS_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorS___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorS___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorS___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorS___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorS___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorS___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorS___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorS___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorS___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::string > *,std::vector< std::string >::difference_type)\n"
    "    __delitem__(std::vector< std::string > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vectorS___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorS___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorS___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::string > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::string > const *,std::vector< std::string >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorS___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorS___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorS___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorS___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::string > *,PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    __setitem__(std::vector< std::string > *,std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorS_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_vectorS")) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorS",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorS" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorS" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorS_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_begin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_end" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_rbegin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_rend" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorS__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_vectorS",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorS" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vectorS_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vectorS_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorS_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator)\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorS__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_vectorS",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorS" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorS" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorS" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vectorS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_vectorS__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vectorS__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vectorS__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vectorS__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_vectorS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >()\n"
    "    std::vector< std::string >(std::vector< std::string > const &)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorS_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorS_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorS_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vectorS_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorS_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorS_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type)\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:vectorS_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorS_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:vectorS_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorS_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorS_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorS_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorS_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::string >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vectorS_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vectorS_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'vectorS_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:vectorS_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorS_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vectorS_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vectorS_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorS_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vectorS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_vectorS",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorS" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vectorS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_derefFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:derefFloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derefFloat" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = (float)derefFloat(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_derefInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:derefInt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derefInt" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = (int)derefInt(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_derefPyObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:derefPyObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derefPyObject" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = (PyObject *)derefPyObject(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_derefPyString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyStringObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:derefPyString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derefPyString" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = (PyStringObject *)derefPyString(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PyStringObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_derefString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:derefString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "derefString" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = derefString(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new string(static_cast< const string& >(result))), SWIGTYPE_p_std__string, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_asPyObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:asPyObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asPyObject" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = (PyObject *)asPyObject(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_asPyString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  int res1 ;
  PyObject * obj0 = 0 ;
  PyStringObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:asPyString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0,SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "asPyString" "', argument " "1"" of type '" "UnTypedPtr""'"); 
  }
  {
    try {
      result = (PyStringObject *)asPyString(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PyStringObject, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_makeArrayReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:makeArrayReader",&obj0,&obj1)) SWIG_fail;
  {
    int i,sz;
    
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj0);
    arg1 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg1[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "makeArrayReader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (ArrayReader *)makeArrayReader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, 0 |  0 );
  {
    if (arg1) free(arg1);
  }
  return resultobj;
fail:
  {
    if (arg1) free(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_makeArrayReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:makeArrayReader",&obj0,&obj1)) SWIG_fail;
  {
    int i,sz;
    
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj0);
    arg1 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg1[i] = (float) PyFloat_AsDouble(o);
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "makeArrayReader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (ArrayReader *)makeArrayReader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, 0 |  0 );
  {
    if (arg1) free(arg1);
  }
  return resultobj;
fail:
  {
    if (arg1) free(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_makeArrayReader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_makeArrayReader__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = PySequence_Check(argv[0]) ? 1 : 0;
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_makeArrayReader__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'makeArrayReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    makeArrayReader(int *,int)\n"
    "    makeArrayReader(float *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_asUnTypedPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:asUnTypedPtr",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      result = (UnTypedPtr)asUnTypedPtr(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_print_array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:print_array",&obj0,&obj1)) SWIG_fail;
  {
    int i,sz;
    
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj0);
    arg1 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg1[i] = (Node) PyInt_AsLong(o);
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "print_array" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      print_array(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_testsign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:testsign",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "testsign" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      testsign(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Object")) SWIG_fail;
  {
    try {
      result = (Object *)new Object();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Object, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *arg1 = (Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_ref" "', argument " "1"" of type '" "Object *""'"); 
  }
  arg1 = reinterpret_cast< Object * >(argp1);
  {
    try {
      (arg1)->ref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_norefs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *arg1 = (Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_norefs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_norefs" "', argument " "1"" of type '" "Object *""'"); 
  }
  arg1 = reinterpret_cast< Object * >(argp1);
  {
    try {
      result = (bool)(arg1)->norefs();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *arg1 = (Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_unref" "', argument " "1"" of type '" "Object *""'"); 
  }
  arg1 = reinterpret_cast< Object * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_refcount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *arg1 = (Object *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Object_refcount_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_refcount_set" "', argument " "1"" of type '" "Object *""'"); 
  }
  arg1 = reinterpret_cast< Object * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Object_refcount_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->refcount = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Object_refcount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *arg1 = (Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Object_refcount_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Object, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Object_refcount_get" "', argument " "1"" of type '" "Object *""'"); 
  }
  arg1 = reinterpret_cast< Object * >(argp1);
  result = (int) ((arg1)->refcount);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Object(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Object *arg1 = (Object *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Object",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Object, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Object" "', argument " "1"" of type '" "Object *""'"); 
  }
  arg1 = reinterpret_cast< Object * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Object_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Object, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_GridFieldOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GridFieldOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GridFieldOperator" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFieldOperator_getResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridFieldOperator_getResult",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFieldOperator_getResult" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  {
    try {
      result = (GridField *)(arg1)->getResult();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFieldOperator_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridFieldOperator_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFieldOperator_Execute" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFieldOperator_Update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridFieldOperator_Update",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFieldOperator_Update" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  {
    try {
      (arg1)->Update();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFieldOperator_clearResult(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridFieldOperator_clearResult",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFieldOperator_clearResult" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  {
    try {
      (arg1)->clearResult();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFieldOperator_Updated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridFieldOperator_Updated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFieldOperator_Updated" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridFieldOperator_Updated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (bool)(arg1)->Updated(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridFieldOperator_getModTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridFieldOperator_getModTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridFieldOperator_getModTime" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  {
    try {
      result = (float)(arg1)->getModTime();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GridFieldOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GridFieldOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ZeroaryGridFieldOperator_Updated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroaryGridFieldOperator *arg1 = (ZeroaryGridFieldOperator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ZeroaryGridFieldOperator_Updated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZeroaryGridFieldOperator_Updated" "', argument " "1"" of type '" "ZeroaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< ZeroaryGridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZeroaryGridFieldOperator_Updated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (bool)(arg1)->Updated(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ZeroaryGridFieldOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroaryGridFieldOperator *arg1 = (ZeroaryGridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZeroaryGridFieldOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroaryGridFieldOperator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZeroaryGridFieldOperator" "', argument " "1"" of type '" "ZeroaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< ZeroaryGridFieldOperator * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZeroaryGridFieldOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ZeroaryGridFieldOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_UnaryGridFieldOperator_Updated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnaryGridFieldOperator *arg1 = (UnaryGridFieldOperator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnaryGridFieldOperator_Updated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnaryGridFieldOperator_Updated" "', argument " "1"" of type '" "UnaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< UnaryGridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UnaryGridFieldOperator_Updated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (bool)(arg1)->Updated(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnaryGridFieldOperator_GetPrevious(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnaryGridFieldOperator *arg1 = (UnaryGridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridFieldOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:UnaryGridFieldOperator_GetPrevious",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnaryGridFieldOperator_GetPrevious" "', argument " "1"" of type '" "UnaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< UnaryGridFieldOperator * >(argp1);
  {
    try {
      result = (GridFieldOperator *)(arg1)->GetPrevious();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnaryGridFieldOperator_SetPrevious(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnaryGridFieldOperator *arg1 = (UnaryGridFieldOperator *) 0 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:UnaryGridFieldOperator_SetPrevious",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnaryGridFieldOperator_SetPrevious" "', argument " "1"" of type '" "UnaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< UnaryGridFieldOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnaryGridFieldOperator_SetPrevious" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      (arg1)->SetPrevious(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnaryGridFieldOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnaryGridFieldOperator *arg1 = (UnaryGridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnaryGridFieldOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnaryGridFieldOperator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnaryGridFieldOperator" "', argument " "1"" of type '" "UnaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< UnaryGridFieldOperator * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnaryGridFieldOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_UnaryGridFieldOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BinaryGridFieldOperator_Updated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BinaryGridFieldOperator *arg1 = (BinaryGridFieldOperator *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryGridFieldOperator_Updated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BinaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryGridFieldOperator_Updated" "', argument " "1"" of type '" "BinaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< BinaryGridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryGridFieldOperator_Updated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (bool)(arg1)->Updated(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryGridFieldOperator_GetLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BinaryGridFieldOperator *arg1 = (BinaryGridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridFieldOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryGridFieldOperator_GetLeft",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BinaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryGridFieldOperator_GetLeft" "', argument " "1"" of type '" "BinaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< BinaryGridFieldOperator * >(argp1);
  {
    try {
      result = (GridFieldOperator *)(arg1)->GetLeft();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryGridFieldOperator_SetLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BinaryGridFieldOperator *arg1 = (BinaryGridFieldOperator *) 0 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryGridFieldOperator_SetLeft",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BinaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryGridFieldOperator_SetLeft" "', argument " "1"" of type '" "BinaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< BinaryGridFieldOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryGridFieldOperator_SetLeft" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      (arg1)->SetLeft(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryGridFieldOperator_GetRight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BinaryGridFieldOperator *arg1 = (BinaryGridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridFieldOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BinaryGridFieldOperator_GetRight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BinaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryGridFieldOperator_GetRight" "', argument " "1"" of type '" "BinaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< BinaryGridFieldOperator * >(argp1);
  {
    try {
      result = (GridFieldOperator *)(arg1)->GetRight();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryGridFieldOperator_SetRight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BinaryGridFieldOperator *arg1 = (BinaryGridFieldOperator *) 0 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BinaryGridFieldOperator_SetRight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BinaryGridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryGridFieldOperator_SetRight" "', argument " "1"" of type '" "BinaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< BinaryGridFieldOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryGridFieldOperator_SetRight" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      (arg1)->SetRight(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BinaryGridFieldOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BinaryGridFieldOperator *arg1 = (BinaryGridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BinaryGridFieldOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BinaryGridFieldOperator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BinaryGridFieldOperator" "', argument " "1"" of type '" "BinaryGridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< BinaryGridFieldOperator * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BinaryGridFieldOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BinaryGridFieldOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RankedDataset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Shape *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RankedDataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RankedDataset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RankedDataset" "', argument " "1"" of type '" "Shape const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RankedDataset" "', argument " "1"" of type '" "Shape const &""'"); 
  }
  arg1 = reinterpret_cast< Shape * >(argp1);
  {
    try {
      result = (RankedDataset *)new RankedDataset((Shape const &)*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RankedDataset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_SetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Shape *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RankedDataset_SetShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_SetShape" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RankedDataset_SetShape" "', argument " "2"" of type '" "Shape const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_SetShape" "', argument " "2"" of type '" "Shape const &""'"); 
  }
  arg2 = reinterpret_cast< Shape * >(argp2);
  {
    try {
      (arg1)->SetShape((Shape const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RankedDataset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RankedDataset")) SWIG_fail;
  {
    try {
      result = (RankedDataset *)new RankedDataset();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RankedDataset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RankedDataset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RankedDataset__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RankedDataset__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RankedDataset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RankedDataset(Shape const &)\n"
    "    RankedDataset()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dim_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RankedDataset_Dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Dim" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    try {
      result = (Dim_t)(arg1)->Dim();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetVoidPointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  std::string *arg2 = 0 ;
  Dim_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_GetVoidPointer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetVoidPointer" "', argument " "1"" of type '" "RankedDataset const *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RankedDataset_GetVoidPointer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetVoidPointer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RankedDataset_GetVoidPointer" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  {
    try {
      result = (UnTypedPtr)((RankedDataset const *)arg1)->GetVoidPointer((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_BeginInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Dataset::IntIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_BeginInt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_BeginInt" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_BeginInt" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_BeginInt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_BeginInt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Dataset::IntIterator)(arg1)->BeginInt(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_EndInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Dataset::IntIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_EndInt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_EndInt" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_EndInt" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_EndInt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_EndInt" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Dataset::IntIterator)(arg1)->EndInt(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_BeginFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Dataset::FloatIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_BeginFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_BeginFloat" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_BeginFloat" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_BeginFloat" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_BeginFloat" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Dataset::FloatIterator)(arg1)->BeginFloat(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_EndFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Dataset::FloatIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_EndFloat",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_EndFloat" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_EndFloat" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_EndFloat" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_EndFloat" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Dataset::FloatIterator)(arg1)->EndFloat(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RankedDataset_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Clear" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    try {
      (arg1)->Clear();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_CoerceScheme__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  Scheme *arg3 = (Scheme *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RankedDataset_CoerceScheme",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_CoerceScheme" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_CoerceScheme" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_CoerceScheme" "', argument " "3"" of type '" "Scheme *""'"); 
  }
  arg3 = reinterpret_cast< Scheme * >(argp3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RankedDataset_CoerceScheme" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    try {
      (arg1)->CoerceScheme(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_CoerceScheme__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  Scheme *arg3 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_CoerceScheme",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_CoerceScheme" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_CoerceScheme" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_CoerceScheme" "', argument " "3"" of type '" "Scheme *""'"); 
  }
  arg3 = reinterpret_cast< Scheme * >(argp3);
  {
    try {
      (arg1)->CoerceScheme(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_CoerceScheme(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RankedDataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Scheme, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RankedDataset_CoerceScheme__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RankedDataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Scheme, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RankedDataset_CoerceScheme__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RankedDataset_CoerceScheme'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CoerceScheme(RankedDataset *,Dim_t,Scheme *,size_t)\n"
    "    CoerceScheme(RankedDataset *,Dim_t,Scheme *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_AddAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  Array *arg3 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_AddAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_AddAttribute" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_AddAttribute" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_AddAttribute" "', argument " "3"" of type '" "Array *""'"); 
  }
  arg3 = reinterpret_cast< Array * >(argp3);
  {
    try {
      (arg1)->AddAttribute(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Bind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  Array *arg3 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_Bind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Bind" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_Bind" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_Bind" "', argument " "3"" of type '" "Array *""'"); 
  }
  arg3 = reinterpret_cast< Array * >(argp3);
  {
    try {
      (arg1)->Bind(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_unBind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_unBind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_unBind" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_unBind" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_unBind" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_unBind" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->unBind(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RankedDataset_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_unref" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RankedDataset_GetScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetScheme" "', argument " "1"" of type '" "RankedDataset const *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetScheme" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = ((RankedDataset const *)arg1)->GetScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Scheme(static_cast< const Scheme& >(result))), SWIGTYPE_p_Scheme, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_IsAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_IsAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_IsAttribute" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_IsAttribute" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_IsAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_IsAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->IsAttribute(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_GetAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetAttribute" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetAttribute" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_GetAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (Array *)(arg1)->GetAttribute(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_RemoveAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_RemoveAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_RemoveAttribute" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_RemoveAttribute" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_RemoveAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_RemoveAttribute" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      (arg1)->RemoveAttribute(arg2,(std::string const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetAttributeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  idx arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RankedDataset_GetAttributeValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetAttributeValue" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetAttributeValue" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_GetAttributeValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetAttributeValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RankedDataset_GetAttributeValue" "', argument " "4"" of type '" "idx""'");
  } 
  arg4 = static_cast< idx >(val4);
  {
    try {
      result = (UnTypedPtr)(arg1)->GetAttributeValue(arg2,(std::string const &)*arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetFloatAttributeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  idx arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RankedDataset_GetFloatAttributeValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetFloatAttributeValue" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetFloatAttributeValue" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_GetFloatAttributeValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetFloatAttributeValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RankedDataset_GetFloatAttributeValue" "', argument " "4"" of type '" "idx""'");
  } 
  arg4 = static_cast< idx >(val4);
  {
    try {
      result = (float)(arg1)->GetFloatAttributeValue(arg2,(std::string const &)*arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetIntAttributeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  idx arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RankedDataset_GetIntAttributeValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetIntAttributeValue" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetIntAttributeValue" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_GetIntAttributeValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetIntAttributeValue" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RankedDataset_GetIntAttributeValue" "', argument " "4"" of type '" "idx""'");
  } 
  arg4 = static_cast< idx >(val4);
  {
    try {
      result = (float)(arg1)->GetIntAttributeValue(arg2,(std::string const &)*arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Arity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RankedDataset_Arity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Arity" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_Arity" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (arg1)->Arity(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RankedDataset_Size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Size" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_Size" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (arg1)->Size(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_MaxRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dim_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RankedDataset_MaxRank",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_MaxRank" "', argument " "1"" of type '" "RankedDataset const *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    try {
      result = (Dim_t)((RankedDataset const *)arg1)->MaxRank();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  std::string *arg2 = 0 ;
  Dim_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_Apply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Apply" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RankedDataset_Apply" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_Apply" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RankedDataset_Apply" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  {
    try {
      (arg1)->Apply((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetDataset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  std::string *arg3 = 0 ;
  Dataset *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RankedDataset_GetDataset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetDataset" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetDataset" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_GetDataset" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetDataset" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Dataset,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RankedDataset_GetDataset" "', argument " "4"" of type '" "Dataset &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_GetDataset" "', argument " "4"" of type '" "Dataset &""'"); 
  }
  arg4 = reinterpret_cast< Dataset * >(argp4);
  {
    try {
      (arg1)->GetDataset(arg2,(std::string const &)*arg3,*arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetDataset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Dataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RankedDataset_GetDataset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_GetDataset" "', argument " "1"" of type '" "RankedDataset const *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_GetDataset" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (Dataset *) &((RankedDataset const *)arg1)->GetDataset(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dataset, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_GetDataset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RankedDataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RankedDataset_GetDataset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RankedDataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Dataset, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RankedDataset_GetDataset__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RankedDataset_GetDataset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GetDataset(RankedDataset *,Dim_t,std::string const &,Dataset &)\n"
    "    GetDataset(RankedDataset const *,Dim_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_Zip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  Dim_t arg2 ;
  Dataset *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_Zip",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_Zip" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RankedDataset_Zip" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Dataset,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RankedDataset_Zip" "', argument " "3"" of type '" "Dataset const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_Zip" "', argument " "3"" of type '" "Dataset const &""'"); 
  }
  arg3 = reinterpret_cast< Dataset * >(argp3);
  {
    try {
      (arg1)->Zip(arg2,(Dataset const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RankedDataset_PrintTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RankedDataset_PrintTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RankedDataset_PrintTo" "', argument " "1"" of type '" "RankedDataset const *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RankedDataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RankedDataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RankedDataset_PrintTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      ((RankedDataset const *)arg1)->PrintTo(*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RankedDataset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RankedDataset *arg1 = (RankedDataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RankedDataset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RankedDataset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RankedDataset" "', argument " "1"" of type '" "RankedDataset *""'"); 
  }
  arg1 = reinterpret_cast< RankedDataset * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RankedDataset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RankedDataset, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Dataset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Dataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Dataset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Scheme,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dataset" "', argument " "1"" of type '" "Scheme const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Dataset" "', argument " "1"" of type '" "Scheme const &""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Dataset" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      result = (Dataset *)new Dataset((Scheme const &)*arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dataset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dataset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Dataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dataset",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Dataset" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (Dataset *)new Dataset(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dataset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dataset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dataset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Dataset,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Dataset" "', argument " "1"" of type '" "Dataset const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Dataset" "', argument " "1"" of type '" "Dataset const &""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      result = (Dataset *)new Dataset((Dataset const &)*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dataset, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dataset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Dataset__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dataset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Dataset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Dataset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Dataset(Scheme const &,size_t)\n"
    "    Dataset(unsigned int)\n"
    "    Dataset(Dataset const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dataset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Dataset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dataset" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_AddAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  Array *arg2 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_AddAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_AddAttribute" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_AddAttribute" "', argument " "2"" of type '" "Array *""'"); 
  }
  arg2 = reinterpret_cast< Array * >(argp2);
  {
    try {
      (arg1)->AddAttribute(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_RemoveAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  Array *arg2 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_RemoveAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_RemoveAttribute" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_RemoveAttribute" "', argument " "2"" of type '" "Array *""'"); 
  }
  arg2 = reinterpret_cast< Array * >(argp2);
  {
    try {
      (arg1)->RemoveAttribute(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_Zip(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  Dataset *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_Zip",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_Zip" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Dataset,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_Zip" "', argument " "2"" of type '" "Dataset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_Zip" "', argument " "2"" of type '" "Dataset const &""'"); 
  }
  arg2 = reinterpret_cast< Dataset * >(argp2);
  {
    try {
      (arg1)->Zip((Dataset const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dataset_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_Clear" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      (arg1)->Clear();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_CoerceScheme__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  Scheme arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dataset_CoerceScheme",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_CoerceScheme" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_CoerceScheme" "', argument " "2"" of type '" "Scheme""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_CoerceScheme" "', argument " "2"" of type '" "Scheme""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_CoerceScheme" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      (arg1)->CoerceScheme(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_CoerceScheme__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  Scheme arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_CoerceScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_CoerceScheme" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_CoerceScheme" "', argument " "2"" of type '" "Scheme""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_CoerceScheme" "', argument " "2"" of type '" "Scheme""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->CoerceScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_CoerceScheme(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dataset_CoerceScheme__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Dataset_CoerceScheme__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Dataset_CoerceScheme'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CoerceScheme(Dataset *,Scheme,unsigned int)\n"
    "    CoerceScheme(Dataset *,Scheme)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_Apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_Apply",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_Apply" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_Apply" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_Apply" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->Apply((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_recordOrdinals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_recordOrdinals",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_recordOrdinals" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Dataset_recordOrdinals" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->recordOrdinals(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_FilterBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  Dataset *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dataset_FilterBy",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_FilterBy" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_FilterBy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_FilterBy" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Dataset,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dataset_FilterBy" "', argument " "3"" of type '" "Dataset &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_FilterBy" "', argument " "3"" of type '" "Dataset &""'"); 
  }
  arg3 = reinterpret_cast< Dataset * >(argp3);
  {
    try {
      (arg1)->FilterBy((std::string const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_BeginInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Dataset::IntIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_BeginInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_BeginInt" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_BeginInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_BeginInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Dataset::IntIterator)(arg1)->BeginInt((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_EndInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Dataset::IntIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_EndInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_EndInt" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_EndInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_EndInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Dataset::IntIterator)(arg1)->EndInt((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_BeginFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Dataset::FloatIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_BeginFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_BeginFloat" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_BeginFloat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_BeginFloat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Dataset::FloatIterator)(arg1)->BeginFloat((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_EndFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Dataset::FloatIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_EndFloat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_EndFloat" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_EndFloat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_EndFloat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Dataset::FloatIterator)(arg1)->EndFloat((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dataset_IsEmpty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_IsEmpty" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      result = (bool)((Dataset const *)arg1)->IsEmpty();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_IsAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_IsAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_IsAttribute" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_IsAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_IsAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)((Dataset const *)arg1)->IsAttribute((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_GetAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_GetAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetAttribute" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_GetAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_GetAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Array *)((Dataset const *)arg1)->GetAttribute((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_GetVoidPointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_GetVoidPointer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetVoidPointer" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_GetVoidPointer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_GetVoidPointer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (UnTypedPtr)((Dataset const *)arg1)->GetVoidPointer((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_GetAttributeVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  idx arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dataset_GetAttributeVal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetAttributeVal" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_GetAttributeVal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_GetAttributeVal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_GetAttributeVal" "', argument " "3"" of type '" "idx""'");
  } 
  arg3 = static_cast< idx >(val3);
  {
    try {
      result = (UnTypedPtr)((Dataset const *)arg1)->GetAttributeVal((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_FastBindTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  unsigned int arg2 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dataset_FastBindTuple",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_FastBindTuple" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_FastBindTuple" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dataset_FastBindTuple" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_FastBindTuple" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      ((Dataset const *)arg1)->FastBindTuple(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_BindTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  unsigned int arg2 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dataset_BindTuple",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_BindTuple" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_BindTuple" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Dataset_BindTuple" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_BindTuple" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      ((Dataset const *)arg1)->BindTuple(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dataset_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_Size" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      result = ((Dataset const *)arg1)->Size();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_Arity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dataset_Arity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_Arity" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      result = (int)((Dataset const *)arg1)->Arity();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_GetScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dataset_GetScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_GetScheme" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      result = ((Dataset const *)arg1)->GetScheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Scheme(static_cast< const Scheme& >(result))), SWIGTYPE_p_Scheme, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_PrintTo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Dataset_PrintTo",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_PrintTo" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_PrintTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Dataset_PrintTo" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      ((Dataset const *)arg1)->PrintTo(*arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_PrintTo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Dataset_PrintTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_PrintTo" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_PrintTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      ((Dataset const *)arg1)->PrintTo(*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_PrintTo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_PrintTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_PrintTo" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try {
      ((Dataset const *)arg1)->PrintTo(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_PrintTo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Dataset_PrintTo__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Dataset_PrintTo__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Dataset_PrintTo__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Dataset_PrintTo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PrintTo(Dataset const *,ostream &,int,int)\n"
    "    PrintTo(Dataset const *,ostream &,int)\n"
    "    PrintTo(Dataset const *,ostream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Dataset_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_show" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Dataset_show" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((Dataset const *)arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dataset_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_show" "', argument " "1"" of type '" "Dataset const *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    try {
      ((Dataset const *)arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Dataset_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Dataset, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Dataset_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Dataset_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(Dataset const *,int)\n"
    "    print(Dataset const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_nearest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  std::vector< idx > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Dataset_nearest",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_nearest" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_nearest" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_nearest" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    arg3 = (UnTypedPtr) obj2;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_nearest" "', argument " "4"" of type '" "std::vector< idx > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_nearest" "', argument " "4"" of type '" "std::vector< idx > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< idx > * >(argp4);
  {
    try {
      (arg1)->nearest((std::string const &)*arg2,arg3,*arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_lookupFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  std::vector< idx > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Dataset_lookupFloat",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_lookupFloat" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_lookupFloat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_lookupFloat" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_lookupFloat" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_lookupFloat" "', argument " "4"" of type '" "std::vector< idx > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_lookupFloat" "', argument " "4"" of type '" "std::vector< idx > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< idx > * >(argp4);
  {
    try {
      (arg1)->lookupFloat((std::string const &)*arg2,arg3,*arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Dataset_lookupInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dataset *arg1 = (Dataset *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::vector< idx > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Dataset_lookupInt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Dataset, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dataset_lookupInt" "', argument " "1"" of type '" "Dataset *""'"); 
  }
  arg1 = reinterpret_cast< Dataset * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Dataset_lookupInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_lookupInt" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Dataset_lookupInt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Dataset_lookupInt" "', argument " "4"" of type '" "std::vector< idx > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Dataset_lookupInt" "', argument " "4"" of type '" "std::vector< idx > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< idx > * >(argp4);
  {
    try {
      (arg1)->lookupInt((std::string const &)*arg2,arg3,*arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *Dataset_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Dataset, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GridField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GridField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GridField" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (GridField *)new GridField(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Dim_t arg2 ;
  Array *arg3 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_GridField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GridField" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GridField" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GridField" "', argument " "3"" of type '" "Array *""'"); 
  }
  arg3 = reinterpret_cast< Array * >(argp3);
  {
    try {
      result = (GridField *)new GridField(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GridField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GridField" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      result = (GridField *)new GridField(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GridField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GridField__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_GridField__SWIG_2(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Array, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_GridField__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GridField'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GridField(Grid *)\n"
    "    GridField(Grid *,Dim_t,Array *)\n"
    "    GridField(GridField *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GridField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GridField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GridField" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_setGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridField_setGrid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_setGrid" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridField_setGrid" "', argument " "2"" of type '" "Grid *""'"); 
  }
  arg2 = reinterpret_cast< Grid * >(argp2);
  {
    try {
      (arg1)->setGrid(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_nearest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  std::string *arg2 = 0 ;
  Dim_t arg3 ;
  UnTypedPtr arg4 = (UnTypedPtr) 0 ;
  std::vector< CellId > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridField_nearest",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_nearest" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridField_nearest" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_nearest" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridField_nearest" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  {
    arg4 = (UnTypedPtr) obj3;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GridField_nearest" "', argument " "5"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_nearest" "', argument " "5"" of type '" "std::vector< CellId > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< CellId > * >(argp5);
  {
    try {
      (arg1)->nearest((std::string const &)*arg2,arg3,arg4,*arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_lookupInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  std::string arg2 ;
  Dim_t arg3 ;
  int arg4 ;
  std::vector< CellId > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridField_lookupInt",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_lookupInt" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridField_lookupInt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridField_lookupInt" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GridField_lookupInt" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GridField_lookupInt" "', argument " "5"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_lookupInt" "', argument " "5"" of type '" "std::vector< CellId > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< CellId > * >(argp5);
  {
    try {
      (arg1)->lookupInt(arg2,arg3,arg4,*arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_lookupFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  std::string arg2 ;
  Dim_t arg3 ;
  float arg4 ;
  std::vector< CellId > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GridField_lookupFloat",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_lookupFloat" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GridField_lookupFloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridField_lookupFloat" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GridField_lookupFloat" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GridField_lookupFloat" "', argument " "5"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_lookupFloat" "', argument " "5"" of type '" "std::vector< CellId > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< CellId > * >(argp5);
  {
    try {
      (arg1)->lookupFloat(arg2,arg3,arg4,*arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_Clear" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      (arg1)->Clear();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_getKCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  CellId arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GridField_getKCell",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_getKCell" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridField_getKCell" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridField_getKCell" "', argument " "3"" of type '" "CellId""'");
  } 
  arg3 = static_cast< CellId >(val3);
  {
    try {
      result = (Cell *)(arg1)->getKCell(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_unref" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_notValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_notValid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_notValid" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      result = (int)(arg1)->notValid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_RestrictAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  GridField *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridField_RestrictAll",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_RestrictAll" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GridField,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridField_RestrictAll" "', argument " "2"" of type '" "GridField const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_RestrictAll" "', argument " "2"" of type '" "GridField const &""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  {
    try {
      (arg1)->RestrictAll((GridField const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_RangeRestrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  GridField *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GridField_RangeRestrict",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_RangeRestrict" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridField_RangeRestrict" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GridField,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "GridField_RangeRestrict" "', argument " "3"" of type '" "GridField const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_RangeRestrict" "', argument " "3"" of type '" "GridField const &""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  {
    try {
      (arg1)->RangeRestrict(arg2,(GridField const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_show" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridField_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_show" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridField_show" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_GridField_show__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_GridField_show__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'GridField_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(GridField *)\n"
    "    print(GridField *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_PrintTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GridField_PrintTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_PrintTo" "', argument " "1"" of type '" "GridField const *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GridField_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GridField_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GridField_PrintTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      ((GridField const *)arg1)->PrintTo(*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_PrepareForExecution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_PrepareForExecution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_PrepareForExecution" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      (arg1)->PrepareForExecution();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_Updated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridField_Updated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_Updated" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridField_Updated" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (bool)(arg1)->Updated(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_Execute" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_Dim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dim_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_Dim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_Dim" "', argument " "1"" of type '" "GridField const *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      result = (Dim_t)((GridField const *)arg1)->Dim();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_Card(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GridField_Card",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_Card" "', argument " "1"" of type '" "GridField const *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GridField_Card" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = ((GridField const *)arg1)->Card(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_GetGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_GetGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_GetGrid" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      result = (Grid *)(arg1)->GetGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GridField_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GridField_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GridField_ref" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  {
    try {
      (arg1)->ref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GridField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GridField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitGridField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnitGridField")) SWIG_fail;
  {
    try {
      result = (UnitGridField *)new UnitGridField();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitGridField, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitGridField_Bind__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGridField *arg1 = (UnitGridField *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UnitGridField_Bind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnitGridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitGridField_Bind" "', argument " "1"" of type '" "UnitGridField *""'"); 
  }
  arg1 = reinterpret_cast< UnitGridField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitGridField_Bind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitGridField_Bind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitGridField_Bind" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->Bind((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitGridField_Bind__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGridField *arg1 = (UnitGridField *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UnitGridField_Bind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnitGridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitGridField_Bind" "', argument " "1"" of type '" "UnitGridField *""'"); 
  }
  arg1 = reinterpret_cast< UnitGridField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitGridField_Bind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitGridField_Bind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UnitGridField_Bind" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->Bind((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitGridField_Bind__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGridField *arg1 = (UnitGridField *) 0 ;
  std::string *arg2 = 0 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:UnitGridField_Bind",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnitGridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UnitGridField_Bind" "', argument " "1"" of type '" "UnitGridField *""'"); 
  }
  arg1 = reinterpret_cast< UnitGridField * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UnitGridField_Bind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "UnitGridField_Bind" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    arg3 = (UnTypedPtr) obj2;
  }
  {
    try {
      (arg1)->Bind((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UnitGridField_Bind(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_UnitGridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UnitGridField_Bind__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_UnitGridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_UnitGridField_Bind__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_UnitGridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = true;
        }
        if (_v) {
          return _wrap_UnitGridField_Bind__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'UnitGridField_Bind'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Bind(UnitGridField *,std::string const &,int)\n"
    "    Bind(UnitGridField *,std::string const &,float)\n"
    "    Bind(UnitGridField *,std::string const &,UnTypedPtr)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitGridField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGridField *arg1 = (UnitGridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitGridField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnitGridField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitGridField" "', argument " "1"" of type '" "UnitGridField *""'"); 
  }
  arg1 = reinterpret_cast< UnitGridField * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitGridField_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_UnitGridField, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Array__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Type arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Array",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Array" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Array" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    try {
      result = (Array *)new Array(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Type arg2 ;
  int arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Array",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Array" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Array" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Array" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Array *)new Array(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Array",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Array" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Array" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Array *)new Array(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Type arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Array",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Array" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Array" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    try {
      result = (Array *)new Array((char const *)arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Array",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Array" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Array" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Array *)new Array(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Array",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Array" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Array" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Array *)new Array((char const *)arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Array(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Array__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Array__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Array__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Array__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Array__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Array__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Array'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Array(std::string,Type)\n"
    "    Array(std::string,Type,int)\n"
    "    Array(Array *,std::string)\n"
    "    Array(char const *,Type)\n"
    "    Array(std::string,Scheme *)\n"
    "    Array(char const *,Scheme *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_makeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_makeArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_makeArray" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (arg1)->makeArray();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  {
    int i;
    using namespace std;
    int length = (&result)->size();
    resultobj = PyList_New( length );
    for (i = 0; i < length; i++) {
      PyObject *o = PyInt_FromLong( result[i] );
      PyList_SetItem(resultobj,i,o);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_unref" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_ref" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      (arg1)->ref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Array(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Array",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Array" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  DatumIterator< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_fill" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatumIteratorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_fill" "', argument " "2"" of type '" "DatumIterator< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_fill" "', argument " "2"" of type '" "DatumIterator< int > &""'"); 
  }
  arg2 = reinterpret_cast< DatumIterator< int > * >(argp2);
  {
    try {
      (arg1)->fill(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  DatumIterator< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_fill",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_fill" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DatumIteratorT_float_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_fill" "', argument " "2"" of type '" "DatumIterator< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_fill" "', argument " "2"" of type '" "DatumIterator< float > &""'"); 
  }
  arg2 = reinterpret_cast< DatumIterator< float > * >(argp2);
  {
    try {
      (arg1)->fill(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DatumIteratorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Array_fill__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_DatumIteratorT_float_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Array_fill__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Array_fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    fill(Array *,DatumIterator< int > &)\n"
    "    fill(Array *,DatumIterator< float > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_copyAndFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_copyAndFilter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_copyAndFilter" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_copyAndFilter" "', argument " "2"" of type '" "bool *""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    try {
      result = (Array *)(arg1)->copyAndFilter(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_copy" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (Array *)(arg1)->copy();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_copyIntData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_copyIntData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_copyIntData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_copyIntData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->copyIntData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_shareIntData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_shareIntData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_shareIntData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_shareIntData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->shareIntData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_copyFloatData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_copyFloatData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_copyFloatData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_copyFloatData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->copyFloatData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_shareFloatData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_shareFloatData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_shareFloatData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_shareFloatData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->shareFloatData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_copyObjData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void **arg2 = (void **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_copyObjData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_copyObjData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_copyObjData" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_copyObjData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->copyObjData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_shareObjData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void **arg2 = (void **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_shareObjData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_shareObjData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_shareObjData" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_shareObjData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->shareObjData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_getData" "', argument " "2"" of type '" "int *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_getData" "', argument " "2"" of type '" "int *&""'"); 
  }
  arg2 = reinterpret_cast< int ** >(argp2);
  {
    try {
      (arg1)->getData(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  float **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_getData" "', argument " "2"" of type '" "float *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_getData" "', argument " "2"" of type '" "float *&""'"); 
  }
  arg2 = reinterpret_cast< float ** >(argp2);
  {
    try {
      (arg1)->getData(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void ***arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getData" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_getData" "', argument " "2"" of type '" "void **&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Array_getData" "', argument " "2"" of type '" "void **&""'"); 
  }
  arg2 = reinterpret_cast< void *** >(argp2);
  {
    try {
      (arg1)->getData(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Array_getData__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Array_getData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Array_getData__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Array_getData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getData(Array *,int *&)\n"
    "    getData(Array *,float *&)\n"
    "    getData(Array *,void **&)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_set" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  unsigned int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_set" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_set" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  unsigned int arg2 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_set" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    arg3 = (UnTypedPtr) obj2;
  }
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Array_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Array_set__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = true;
        }
        if (_v) {
          return _wrap_Array_set__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Array_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(Array *,unsigned int,int)\n"
    "    set(Array *,unsigned int,float)\n"
    "    set(Array *,unsigned int,UnTypedPtr)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_size" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (int)(arg1)->size();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_gettype(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_gettype",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_gettype" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (Type)(arg1)->gettype();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_sname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_sname",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_sname" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (arg1)->sname();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_setVals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  UnTypedPtr arg2 = (UnTypedPtr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Array_setVals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_setVals" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    arg2 = (UnTypedPtr) obj1;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Array_setVals" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setVals(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getVals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_getVals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getVals" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (UnTypedPtr)(arg1)->getVals();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getValPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_getValPtr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getValPtr" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_getValPtr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (UnTypedPtr)(arg1)->getValPtr(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getValInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_getValInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getValInt" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_getValInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getValInt(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  UnTypedPtr *arg2 = (UnTypedPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_next",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_next" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Array_next" "', argument " "2"" of type '" "UnTypedPtr *""'"); 
  }
  arg2 = reinterpret_cast< UnTypedPtr * >(argp2);
  {
    try {
      (arg1)->next(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_expand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_expand" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_expand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Array *)(arg1)->expand(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_repeat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Array *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_repeat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_repeat" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_repeat" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Array *)(arg1)->repeat(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Array, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_cast",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_cast" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_cast" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    try {
      (arg1)->cast(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_UnSafeCast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_UnSafeCast",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_UnSafeCast" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_UnSafeCast" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    try {
      (arg1)->UnSafeCast(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_show" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getName" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (arg1)->getName();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_deleteName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_deleteName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_deleteName" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      (arg1)->deleteName();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_clear" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Array_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_type_set" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Array_type_set" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_type_get" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  result = (Type) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Array_getScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Array_getScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Array_getScheme" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  {
    try {
      result = (Scheme *)(arg1)->getScheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Array_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Array, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ConstArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  Type arg3 ;
  UnTypedPtr arg4 = (UnTypedPtr) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ConstArray",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ConstArray" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConstArray" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConstArray" "', argument " "3"" of type '" "Type""'");
  } 
  arg3 = static_cast< Type >(val3);
  {
    arg4 = (UnTypedPtr) obj3;
  }
  {
    try {
      result = (ConstArray *)new ConstArray(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  float arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ConstArray",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ConstArray" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConstArray" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConstArray" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      result = (ConstArray *)new ConstArray(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstArray__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ConstArray",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ConstArray" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConstArray" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ConstArray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (ConstArray *)new ConstArray(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstArray__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ConstArray",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ConstArray" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ConstArray" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = (UnTypedPtr) obj2;
  }
  {
    try {
      result = (ConstArray *)new ConstArray(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConstArray(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ConstArray__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ConstArray__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = true;
        }
        if (_v) {
          return _wrap_new_ConstArray__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = true;
          }
          if (_v) {
            return _wrap_new_ConstArray__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ConstArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ConstArray(std::string,int,Type,UnTypedPtr)\n"
    "    ConstArray(std::string,int,float)\n"
    "    ConstArray(std::string,int,int)\n"
    "    ConstArray(std::string,int,UnTypedPtr)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_copyAndFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_copyAndFilter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_copyAndFilter" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_copyAndFilter" "', argument " "2"" of type '" "bool *""'"); 
  }
  arg2 = reinterpret_cast< bool * >(argp2);
  {
    try {
      result = (ConstArray *)(arg1)->copyAndFilter(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConstArray_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_copy" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    try {
      result = (ConstArray *)(arg1)->copy();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_copyData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_copyData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_copyData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_copyData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->copyData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_shareData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_shareData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_shareData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_shareData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->shareData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_copyData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_copyData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_copyData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_copyData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->copyData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_shareData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_shareData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_shareData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_shareData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->shareData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_copyData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void **arg2 = (void **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_copyData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_copyData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_copyData" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_copyData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->copyData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_copyData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ConstArray_copyData__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySequence_Check(argv[1]) ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ConstArray_copyData__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ConstArray_copyData__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ConstArray_copyData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    copyData(ConstArray *,int *,int)\n"
    "    copyData(ConstArray *,float *,int)\n"
    "    copyData(ConstArray *,void **,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_shareData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void **arg2 = (void **) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_shareData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_shareData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_shareData" "', argument " "2"" of type '" "void **""'"); 
  }
  arg2 = reinterpret_cast< void ** >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_shareData" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->shareData(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_shareData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ConstArray_shareData__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySequence_Check(argv[1]) ? 1 : 0;
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ConstArray_shareData__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ConstArray_shareData__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ConstArray_shareData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    shareData(ConstArray *,int *,int)\n"
    "    shareData(ConstArray *,float *,int)\n"
    "    shareData(ConstArray *,void **,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_getData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_int,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_getData" "', argument " "2"" of type '" "int *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstArray_getData" "', argument " "2"" of type '" "int *&""'"); 
  }
  arg2 = reinterpret_cast< int ** >(argp2);
  {
    try {
      (arg1)->getData(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  float **arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_getData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_float,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_getData" "', argument " "2"" of type '" "float *&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstArray_getData" "', argument " "2"" of type '" "float *&""'"); 
  }
  arg2 = reinterpret_cast< float ** >(argp2);
  {
    try {
      (arg1)->getData(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void ***arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_getData" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_p_p_void,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_getData" "', argument " "2"" of type '" "void **&""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstArray_getData" "', argument " "2"" of type '" "void **&""'"); 
  }
  arg2 = reinterpret_cast< void *** >(argp2);
  {
    try {
      (arg1)->getData(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstArray_getData__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_float, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstArray_getData__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_p_p_void, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConstArray_getData__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ConstArray_getData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getData(ConstArray *,int *&)\n"
    "    getData(ConstArray *,float *&)\n"
    "    getData(ConstArray *,void **&)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_setVals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  UnTypedPtr arg2 = (UnTypedPtr) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConstArray_setVals",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_setVals" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    arg2 = (UnTypedPtr) obj1;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConstArray_setVals" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->setVals(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getVals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConstArray_getVals",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_getVals" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    try {
      result = (UnTypedPtr)(arg1)->getVals();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getValPtr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_getValPtr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_getValPtr" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_getValPtr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (UnTypedPtr)(arg1)->getValPtr(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  UnTypedPtr *arg2 = (UnTypedPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_next",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_next" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstArray_next" "', argument " "2"" of type '" "UnTypedPtr *""'"); 
  }
  arg2 = reinterpret_cast< UnTypedPtr * >(argp2);
  {
    try {
      (arg1)->next(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_getConst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConstArray_getConst",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_getConst" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    try {
      result = (long)(arg1)->getConst();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_setConst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  UnTypedPtr arg2 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_setConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_setConst" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    arg2 = (UnTypedPtr) obj1;
  }
  {
    try {
      (arg1)->setConst(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_expand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_expand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_expand" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_expand" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (ConstArray *)(arg1)->expand(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_repeat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_repeat",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_repeat" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_repeat" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (ConstArray *)(arg1)->repeat(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ConstArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_resize" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_resize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (ConstArray *)(arg1)->resize(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ConstArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_cast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_cast",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_cast" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_cast" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    try {
      (arg1)->cast(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_show(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConstArray_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_show" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ConstArray_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_clear" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_SetConst__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_SetConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_SetConst" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_SetConst" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      (arg1)->SetConst(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_SetConst__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ConstArray_SetConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstArray_SetConst" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstArray_SetConst" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetConst(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConstArray_SetConst(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstArray_SetConst__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ConstArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConstArray_SetConst__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ConstArray_SetConst'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetConst(ConstArray *,float)\n"
    "    SetConst(ConstArray *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConstArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ConstArray *arg1 = (ConstArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ConstArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ConstArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstArray" "', argument " "1"" of type '" "ConstArray *""'"); 
  }
  arg1 = reinterpret_cast< ConstArray * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConstArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ConstArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Cell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Cell")) SWIG_fail;
  {
    try {
      result = (Cell *)new Cell();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cell",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cell" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Cell *)new Cell(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  Node *arg2 = (Node *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cell",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Cell" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (Node) PyInt_AsLong(o);
    }
  }
  {
    try {
      result = (Cell *)new Cell(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Cell",&obj0,&obj1)) SWIG_fail;
  {
    int i,sz;
    
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj0);
    arg1 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg1[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Cell" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Cell *)new Cell(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, SWIG_POINTER_NEW |  0 );
  {
    if (arg1) free(arg1);
  }
  return resultobj;
fail:
  {
    if (arg1) free(arg1);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "Cell const &""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Cell *)new Cell((Cell const &)*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Cell__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Cell__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Cell__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Cell__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_unsigned_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Cell__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Cell'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Cell()\n"
    "    Cell(int)\n"
    "    Cell(int,Node *)\n"
    "    Cell(int *,int)\n"
    "    Cell(Cell const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cell" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = 0 ;
  CrossNodeMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cell_Cross",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Cross" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_Cross" "', argument " "2"" of type '" "Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_Cross" "', argument " "2"" of type '" "Cell &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CrossNodeMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cell_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  arg3 = reinterpret_cast< CrossNodeMap * >(argp3);
  {
    try {
      result = (Cell *)((Cell const *)arg1)->Cross(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_Cross2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = 0 ;
  CrossNodeMap *arg3 = 0 ;
  int *arg4 = 0 ;
  Node *arg5 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Cell_Cross2",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_Cross2" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_Cross2" "', argument " "2"" of type '" "Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_Cross2" "', argument " "2"" of type '" "Cell &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CrossNodeMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Cell_Cross2" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_Cross2" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  arg3 = reinterpret_cast< CrossNodeMap * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Cell_Cross2" "', argument " "4"" of type '" "int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_Cross2" "', argument " "4"" of type '" "int &""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (Node) PyInt_AsLong(o);
    }
  }
  {
    try {
      ((Cell const *)arg1)->Cross2(*arg2,*arg3,*arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_mapNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  UnaryNodeMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_mapNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_mapNodes" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnaryNodeMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  arg2 = reinterpret_cast< UnaryNodeMap * >(argp2);
  {
    try {
      (arg1)->mapNodes(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  unsigned int arg2 ;
  Node arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Cell_setNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setNode" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_setNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Cell_setNode" "', argument " "3"" of type '" "Node""'");
  } 
  arg3 = static_cast< Node >(val3);
  {
    try {
      (arg1)->setNode(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_eq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_eq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_eq" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_eq" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (bool)(arg1)->eq(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___eq__" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell___eq__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell___eq__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (bool)((Cell const *)arg1)->operator ==((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___lt__" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell___lt__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell___lt__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (bool)((Cell const *)arg1)->operator <((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_show" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_show" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      ((Cell const *)arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_show" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      ((Cell const *)arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Cell_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Cell_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Cell_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(Cell const *,int)\n"
    "    print(Cell const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_hasNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Node arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_hasNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_hasNode" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_hasNode" "', argument " "2"" of type '" "Node""'");
  } 
  arg2 = static_cast< Node >(val2);
  {
    try {
      result = (bool)((Cell const *)arg1)->hasNode(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_IncidentTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_IncidentTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_IncidentTo" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_IncidentTo" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_IncidentTo" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (bool)((Cell const *)arg1)->IncidentTo((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_setsize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setsize" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_setsize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setsize(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_setnodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  Node *arg2 = (Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_setnodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_setnodes" "', argument " "1"" of type '" "Cell *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (Node) PyInt_AsLong(o);
    }
  }
  {
    try {
      (arg1)->setnodes(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getsize" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (unsigned int)((Cell const *)arg1)->getsize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getnodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cell_getnodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getnodes" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  {
    try {
      result = (Node *)((Cell const *)arg1)->getnodes();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getnode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cell *arg1 = (Cell *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Node result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cell_getnode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getnode" "', argument " "1"" of type '" "Cell const *""'"); 
  }
  arg1 = reinterpret_cast< Cell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cell_getnode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (Node)((Cell const *)arg1)->getnode(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Cell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_eqCell___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eqCell *arg1 = (eqCell *) 0 ;
  Cell *arg2 = 0 ;
  Cell *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:eqCell___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_eqCell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "eqCell___call__" "', argument " "1"" of type '" "eqCell const *""'"); 
  }
  arg1 = reinterpret_cast< eqCell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "eqCell___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eqCell___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "eqCell___call__" "', argument " "3"" of type '" "Cell const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "eqCell___call__" "', argument " "3"" of type '" "Cell const &""'"); 
  }
  arg3 = reinterpret_cast< Cell * >(argp3);
  {
    try {
      result = (bool)((eqCell const *)arg1)->operator ()((Cell const &)*arg2,(Cell const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_eqCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eqCell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_eqCell")) SWIG_fail;
  {
    try {
      result = (eqCell *)new eqCell();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_eqCell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_eqCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  eqCell *arg1 = (eqCell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_eqCell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_eqCell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_eqCell" "', argument " "1"" of type '" "eqCell *""'"); 
  }
  arg1 = reinterpret_cast< eqCell * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *eqCell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_eqCell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ltCell___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ltCell *arg1 = (ltCell *) 0 ;
  Cell *arg2 = 0 ;
  Cell *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ltCell___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ltCell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ltCell___call__" "', argument " "1"" of type '" "ltCell const *""'"); 
  }
  arg1 = reinterpret_cast< ltCell * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ltCell___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ltCell___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ltCell___call__" "', argument " "3"" of type '" "Cell const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ltCell___call__" "', argument " "3"" of type '" "Cell const &""'"); 
  }
  arg3 = reinterpret_cast< Cell * >(argp3);
  {
    try {
      result = (bool)((ltCell const *)arg1)->operator ()((Cell const &)*arg2,(Cell const &)*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ltCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ltCell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ltCell")) SWIG_fail;
  {
    try {
      result = (ltCell *)new ltCell();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ltCell, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ltCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ltCell *arg1 = (ltCell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ltCell",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ltCell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ltCell" "', argument " "1"" of type '" "ltCell *""'"); 
  }
  arg1 = reinterpret_cast< ltCell * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ltCell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ltCell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SimpleCellHash___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleCellHash *arg1 = (SimpleCellHash *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimpleCellHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleCellHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleCellHash___call__" "', argument " "1"" of type '" "SimpleCellHash const *""'"); 
  }
  arg1 = reinterpret_cast< SimpleCellHash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimpleCellHash___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimpleCellHash___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (int)((SimpleCellHash const *)arg1)->operator ()((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimpleCellHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleCellHash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SimpleCellHash")) SWIG_fail;
  {
    try {
      result = (SimpleCellHash *)new SimpleCellHash();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SimpleCellHash, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimpleCellHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SimpleCellHash *arg1 = (SimpleCellHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SimpleCellHash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SimpleCellHash, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleCellHash" "', argument " "1"" of type '" "SimpleCellHash *""'"); 
  }
  arg1 = reinterpret_cast< SimpleCellHash * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimpleCellHash_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SimpleCellHash, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CellHash___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellHash *arg1 = (CellHash *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellHash___call__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellHash, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellHash___call__" "', argument " "1"" of type '" "CellHash const *""'"); 
  }
  arg1 = reinterpret_cast< CellHash * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellHash___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellHash___call__" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (int)((CellHash const *)arg1)->operator ()((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellHash *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CellHash")) SWIG_fail;
  {
    try {
      result = (CellHash *)new CellHash();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellHash, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CellHash(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellHash *arg1 = (CellHash *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CellHash",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellHash, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CellHash" "', argument " "1"" of type '" "CellHash *""'"); 
  }
  arg1 = reinterpret_cast< CellHash * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CellHash_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CellHash, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CellArray__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CellArray")) SWIG_fail;
  {
    try {
      result = (CellArray *)new CellArray();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellArray__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< Cell,std::allocator< Cell > > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CellArray",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Cell_std__allocatorT_Cell_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CellArray" "', argument " "1"" of type '" "std::vector< Cell,std::allocator< Cell > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CellArray" "', argument " "1"" of type '" "std::vector< Cell,std::allocator< Cell > >""'");
    } else {
      std::vector< Cell,std::allocator< Cell > > * temp = reinterpret_cast< std::vector< Cell,std::allocator< Cell > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (CellArray *)new CellArray(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_whoami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_whoami",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_whoami" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      result = (int)(arg1)->whoami();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellArray__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  int arg3 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CellArray",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int i,sz;
    
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj0);
    arg1 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg1[i] = (Node) PyInt_AsLong(o);
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CellArray" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CellArray" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (CellArray *)new CellArray(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellArray__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CellArray",&obj0,&obj1)) SWIG_fail;
  {
    int i,sz;
    
    if (!PySequence_Check(obj0)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj0);
    arg1 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj0, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg1[i] = (Node) PyInt_AsLong(o);
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CellArray" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (CellArray *)new CellArray(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CellArray(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CellArray__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_Cell_std__allocatorT_Cell_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CellArray__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_unsigned_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CellArray__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_unsigned_int, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_CellArray__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CellArray'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CellArray()\n"
    "    CellArray(std::vector< Cell,std::allocator< Cell > >)\n"
    "    CellArray(Node *,int,int)\n"
    "    CellArray(Node *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CellArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CellArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CellArray" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_getsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getsize" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      result = (arg1)->getsize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_addCell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_addCell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_addCell" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_addCell" "', argument " "2"" of type '" "Cell &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_addCell" "', argument " "2"" of type '" "Cell &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->addCell(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_addCell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Cell *arg2 = (Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_addCell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_addCell" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Cell, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_addCell" "', argument " "2"" of type '" "Cell *""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      (arg1)->addCell(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_addCell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellArray_addCell__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellArray_addCell__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CellArray_addCell'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    addCell(CellArray *,Cell &)\n"
    "    addCell(CellArray *,Cell *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_addCellNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Node *arg2 = (Node *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CellArray_addCellNodes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_addCellNodes" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (Node) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CellArray_addCellNodes" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Cell *)(arg1)->addCellNodes(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_getCell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getCell" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_getCell" "', argument " "2"" of type '" "idx""'");
  } 
  arg2 = static_cast< idx >(val2);
  {
    try {
      result = (Cell *)(arg1)->getCell(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getCellCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cell result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_getCellCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getCellCopy" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_getCellCopy" "', argument " "2"" of type '" "idx""'");
  } 
  arg2 = static_cast< idx >(val2);
  {
    try {
      result = (arg1)->getCellCopy(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Cell(static_cast< const Cell& >(result))), SWIGTYPE_p_Cell, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getCellNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_getCellNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getCellNodes" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_getCellNodes" "', argument " "2"" of type '" "idx""'");
  } 
  arg2 = static_cast< idx >(val2);
  {
    try {
      result = (Node *)(arg1)->getCellNodes(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_contains" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_contains" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_contains" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (bool)(arg1)->contains((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getOrd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_getOrd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getOrd" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_getOrd" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_getOrd" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (arg1)->getOrd((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getOrd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Node arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_getOrd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getOrd" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_getOrd" "', argument " "2"" of type '" "Node""'");
  } 
  arg2 = static_cast< Node >(val2);
  {
    try {
      result = (arg1)->getOrd(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getOrd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CellArray_getOrd__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CellArray_getOrd__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CellArray_getOrd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getOrd(CellArray *,Cell const &)\n"
    "    getOrd(CellArray *,Node)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_bytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_bytes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_bytes" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      result = (int)(arg1)->bytes();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_ref" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      (arg1)->ref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_unref" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_setNodeArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Node *arg2 = (Node *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CellArray_setNodeArray",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_setNodeArray" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (Node *) malloc(sz*sizeof(Node));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (Node) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CellArray_setNodeArray" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      (arg1)->setNodeArray(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getIncidentCells__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Node arg2 ;
  set< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CellArray_getIncidentCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getIncidentCells" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_getIncidentCells" "', argument " "2"" of type '" "Node""'");
  } 
  arg2 = static_cast< Node >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_setT_unsigned_long_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CellArray_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< set< CellId > * >(argp3);
  {
    try {
      (arg1)->getIncidentCells(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getIncidentCells__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  Cell *arg2 = 0 ;
  set< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CellArray_getIncidentCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getIncidentCells" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_getIncidentCells" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_getIncidentCells" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_setT_unsigned_long_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CellArray_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< set< CellId > * >(argp3);
  {
    try {
      (arg1)->getIncidentCells((Cell const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getIncidentCells(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_setT_unsigned_long_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CellArray_getIncidentCells__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_setT_unsigned_long_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CellArray_getIncidentCells__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CellArray_getIncidentCells'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getIncidentCells(CellArray *,Node,set< CellId > &)\n"
    "    getIncidentCells(CellArray *,Cell const &,set< CellId > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getAdjacentCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  CellId arg2 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CellArray_getAdjacentCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getAdjacentCells" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_getAdjacentCells" "', argument " "2"" of type '" "CellId""'");
  } 
  arg2 = static_cast< CellId >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CellArray_getAdjacentCells" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_getAdjacentCells" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->getAdjacentCells(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_getNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getNodeCount" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      result = (unsigned int)(arg1)->getNodeCount();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_show" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_show" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_show" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CellArray_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CellArray, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CellArray_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CellArray_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(CellArray *,size_t)\n"
    "    print(CellArray *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_toNodeSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  set< Node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_toNodeSet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_toNodeSet" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_setT_unsigned_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_toNodeSet" "', argument " "2"" of type '" "set< Node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_toNodeSet" "', argument " "2"" of type '" "set< Node > &""'"); 
  }
  arg2 = reinterpret_cast< set< Node > * >(argp2);
  {
    try {
      (arg1)->toNodeSet(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_Intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_Intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_Intersection" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_Intersection" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  {
    try {
      result = (CellArray *)(arg1)->Intersection(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_Cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  CrossNodeMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CellArray_Cross",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_Cross" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_Cross" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CrossNodeMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CellArray_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  arg3 = reinterpret_cast< CrossNodeMap * >(argp3);
  {
    try {
      result = (CellArray *)(arg1)->Cross(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_Append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_Append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_Append" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_Append" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  {
    try {
      (arg1)->Append(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_mapNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  UnaryNodeMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_mapNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_mapNodes" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnaryNodeMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CellArray_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  arg2 = reinterpret_cast< UnaryNodeMap * >(argp2);
  {
    try {
      (arg1)->mapNodes(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_makeCrossNodeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CrossNodeMap result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_makeCrossNodeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_makeCrossNodeMap" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CellArray_makeCrossNodeMap" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  {
    try {
      result = (arg1)->makeCrossNodeMap(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new CrossNodeMap(static_cast< const CrossNodeMap& >(result))), SWIGTYPE_p_CrossNodeMap, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_buildInvertedIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_buildInvertedIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_buildInvertedIndex" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      (arg1)->buildInvertedIndex();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_buildIncidenceIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_buildIncidenceIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_buildIncidenceIndex" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      (arg1)->buildIncidenceIndex();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_buildAdjacencyIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_buildAdjacencyIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_buildAdjacencyIndex" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      (arg1)->buildAdjacencyIndex();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_getCellVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Cell > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_getCellVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_getCellVector" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  {
    try {
      result = (std::vector< Cell > *)(arg1)->getCellVector();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Cell_std__allocatorT_Cell_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_cleanup_node_array_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CellArray_cleanup_node_array_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_cleanup_node_array_set" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CellArray_cleanup_node_array_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->cleanup_node_array = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CellArray_cleanup_node_array_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CellArray *arg1 = (CellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CellArray_cleanup_node_array_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CellArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CellArray_cleanup_node_array_get" "', argument " "1"" of type '" "CellArray *""'"); 
  }
  arg1 = reinterpret_cast< CellArray * >(argp1);
  result = (bool) ((arg1)->cleanup_node_array);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CellArray_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CellArray, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_testString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:testString",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "testString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "testString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = testString((std::string const &)*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_name_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_name_set" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Grid_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_name_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_name_get" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  result = (std::string *) & ((arg1)->name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Dim_t arg2 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Grid",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Grid" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Grid" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (Grid *)new Grid(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Grid",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Grid" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Grid *)new Grid(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Dim_t arg2 ;
  OrdMap *arg3 = (OrdMap *) 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Grid",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Grid" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Grid" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_OrdMap, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Grid" "', argument " "3"" of type '" "OrdMap *""'"); 
  }
  arg3 = reinterpret_cast< OrdMap * >(argp3);
  {
    try {
      result = (Grid *)new Grid(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Grid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Grid__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Grid__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_OrdMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_Grid__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Grid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Grid(std::string,Dim_t)\n"
    "    Grid(std::string)\n"
    "    Grid(std::string,Dim_t,OrdMap *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_ref" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      (arg1)->ref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_unref" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Grid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Grid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Grid" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_getName" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (arg1)->getName();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  std::string arg2 ;
  Dim_t arg3 ;
  OrdMap *arg4 = (OrdMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Grid_init",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_init" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Grid_init" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Grid_init" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_OrdMap, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Grid_init" "', argument " "4"" of type '" "OrdMap *""'"); 
  }
  arg4 = reinterpret_cast< OrdMap * >(argp4);
  {
    try {
      (arg1)->init(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_getdim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dim_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_getdim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_getdim" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (Dim_t)(arg1)->getdim();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_Size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_Size" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_Size" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (unsigned int)(arg1)->Size(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_setKCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  Dim_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Grid_setKCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_setKCells" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_setKCells" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Grid_setKCells" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  {
    try {
      (arg1)->setKCells(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_getKCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  AbstractCellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_getKCells",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_getKCells" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_getKCells" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (AbstractCellArray *)(arg1)->getKCells(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_setImplicit0Cells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_setImplicit0Cells",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_setImplicit0Cells" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_setImplicit0Cells" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setImplicit0Cells(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_countKCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_countKCells",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_countKCells" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_countKCells" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      result = (unsigned int)(arg1)->countKCells(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_empty" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (bool)(arg1)->empty();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_shareCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  Dim_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Grid_shareCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_shareCells" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_shareCells" "', argument " "2"" of type '" "Grid *""'"); 
  }
  arg2 = reinterpret_cast< Grid * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Grid_shareCells" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  {
    try {
      (arg1)->shareCells(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_copyCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  bool *arg3 = (bool *) 0 ;
  Dim_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Grid_copyCells",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_copyCells" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_copyCells" "', argument " "2"" of type '" "Grid *""'"); 
  }
  arg2 = reinterpret_cast< Grid * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Grid_copyCells" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Grid_copyCells" "', argument " "4"" of type '" "Dim_t""'");
  } 
  arg4 = static_cast< Dim_t >(val4);
  {
    try {
      (arg1)->copyCells(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_nodeFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  bool *arg3 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Grid_nodeFilter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_nodeFilter" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_nodeFilter" "', argument " "2"" of type '" "Grid *""'"); 
  }
  arg2 = reinterpret_cast< Grid * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Grid_nodeFilter" "', argument " "3"" of type '" "bool *""'"); 
  }
  arg3 = reinterpret_cast< bool * >(argp3);
  {
    try {
      (arg1)->nodeFilter(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_checkWellFormed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_checkWellFormed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_checkWellFormed" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      result = (bool)(arg1)->checkWellFormed();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_cellCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_cellCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_cellCount" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_cellCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->cellCount(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_IncidentTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  CellId arg2 ;
  Dim_t arg3 ;
  std::vector< CellId > *arg4 = 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Grid_IncidentTo",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_IncidentTo" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_IncidentTo" "', argument " "2"" of type '" "CellId""'");
  } 
  arg2 = static_cast< CellId >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Grid_IncidentTo" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Grid_IncidentTo" "', argument " "4"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Grid_IncidentTo" "', argument " "4"" of type '" "std::vector< CellId > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< CellId > * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Grid_IncidentTo" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->IncidentTo(arg2,arg3,*arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_normalize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_normalize" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      (arg1)->normalize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_mapNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  UnaryNodeMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_mapNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_mapNodes" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnaryNodeMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Grid_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  arg2 = reinterpret_cast< UnaryNodeMap * >(argp2);
  {
    try {
      (arg1)->mapNodes(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_setReferent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  OrdMap *arg2 = (OrdMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_setReferent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_setReferent" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OrdMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_setReferent" "', argument " "2"" of type '" "OrdMap *""'"); 
  }
  arg2 = reinterpret_cast< OrdMap * >(argp2);
  {
    try {
      (arg1)->setReferent(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_Intersection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_Intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_Intersection" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_Intersection" "', argument " "2"" of type '" "Grid *""'"); 
  }
  arg2 = reinterpret_cast< Grid * >(argp2);
  {
    try {
      result = (Grid *)(arg1)->Intersection(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_Cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  Grid *arg2 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Grid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_Cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_Cross" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_Cross" "', argument " "2"" of type '" "Grid *""'"); 
  }
  arg2 = reinterpret_cast< Grid * >(argp2);
  {
    try {
      result = (Grid *)(arg1)->Cross(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Grid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_show" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Grid_show" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_show" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Grid_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Grid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Grid_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Grid_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(Grid *,int)\n"
    "    print(Grid *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_ordmap_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  OrdMap *arg2 = (OrdMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Grid_ordmap_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_ordmap_set" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_OrdMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Grid_ordmap_set" "', argument " "2"" of type '" "OrdMap *""'"); 
  }
  arg2 = reinterpret_cast< OrdMap * >(argp2);
  if (arg1) (arg1)->ordmap = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Grid_ordmap_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Grid *arg1 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  OrdMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Grid_ordmap_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Grid_ordmap_get" "', argument " "1"" of type '" "Grid *""'"); 
  }
  arg1 = reinterpret_cast< Grid * >(argp1);
  result = (OrdMap *) ((arg1)->ordmap);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OrdMap, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Grid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Grid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_UnitGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_UnitGrid")) SWIG_fail;
  {
    try {
      result = (UnitGrid *)new UnitGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_UnitGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UnitGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnitGrid *arg1 = (UnitGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_UnitGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_UnitGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UnitGrid" "', argument " "1"" of type '" "UnitGrid *""'"); 
  }
  arg1 = reinterpret_cast< UnitGrid * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *UnitGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_UnitGrid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Implicit0Cells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Implicit0Cells *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Implicit0Cells",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Implicit0Cells" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (Implicit0Cells *)new Implicit0Cells(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Implicit0Cells, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Implicit0Cells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Implicit0Cells",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Implicit0Cells" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getsize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_getsize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getsize" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (arg1)->getsize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cell *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_getCell",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getCell" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_getCell" "', argument " "2"" of type '" "idx""'");
  } 
  arg2 = static_cast< idx >(val2);
  {
    try {
      result = (Cell *)(arg1)->getCell(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cell, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getCellCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Cell result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_getCellCopy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getCellCopy" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_getCellCopy" "', argument " "2"" of type '" "idx""'");
  } 
  arg2 = static_cast< idx >(val2);
  {
    try {
      result = (arg1)->getCellCopy(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Cell(static_cast< const Cell& >(result))), SWIGTYPE_p_Cell, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getCellNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  idx arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_getCellNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getCellNodes" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_getCellNodes" "', argument " "2"" of type '" "idx""'");
  } 
  arg2 = static_cast< idx >(val2);
  {
    try {
      result = (Node *)(arg1)->getCellNodes(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_whoami(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_whoami",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_whoami" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (int)(arg1)->whoami();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_contains" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_contains" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_contains" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (bool)(arg1)->contains((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getOrd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Cell *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_getOrd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getOrd" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_getOrd" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_getOrd" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  {
    try {
      result = (arg1)->getOrd((Cell const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getOrd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Node arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  idx result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_getOrd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getOrd" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_getOrd" "', argument " "2"" of type '" "Node""'");
  } 
  arg2 = static_cast< Node >(val2);
  {
    try {
      result = (arg1)->getOrd(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getOrd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_getOrd__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Implicit0Cells_getOrd__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_getOrd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getOrd(Implicit0Cells *,Cell const &)\n"
    "    getOrd(Implicit0Cells *,Node)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getIncidentCells__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Cell *arg2 = 0 ;
  set< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Implicit0Cells_getIncidentCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getIncidentCells" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Cell,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_getIncidentCells" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_getIncidentCells" "', argument " "2"" of type '" "Cell const &""'"); 
  }
  arg2 = reinterpret_cast< Cell * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_setT_unsigned_long_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Implicit0Cells_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< set< CellId > * >(argp3);
  {
    try {
      (arg1)->getIncidentCells((Cell const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getIncidentCells__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Node arg2 ;
  set< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Implicit0Cells_getIncidentCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getIncidentCells" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_getIncidentCells" "', argument " "2"" of type '" "Node""'");
  } 
  arg2 = static_cast< Node >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_setT_unsigned_long_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Implicit0Cells_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_getIncidentCells" "', argument " "3"" of type '" "set< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< set< CellId > * >(argp3);
  {
    try {
      (arg1)->getIncidentCells(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getIncidentCells(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Cell, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_setT_unsigned_long_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Implicit0Cells_getIncidentCells__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_setT_unsigned_long_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Implicit0Cells_getIncidentCells__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_getIncidentCells'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getIncidentCells(Implicit0Cells *,Cell const &,set< CellId > &)\n"
    "    getIncidentCells(Implicit0Cells *,Node,set< CellId > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getAdjacentCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  CellId arg2 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Implicit0Cells_getAdjacentCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getAdjacentCells" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_getAdjacentCells" "', argument " "2"" of type '" "CellId""'");
  } 
  arg2 = static_cast< CellId >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Implicit0Cells_getAdjacentCells" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_getAdjacentCells" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->getAdjacentCells(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_getNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getNodeCount" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (unsigned int)(arg1)->getNodeCount();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_mapNodes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  NormNodeMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_mapNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_mapNodes" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NormNodeMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_mapNodes" "', argument " "2"" of type '" "NormNodeMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_mapNodes" "', argument " "2"" of type '" "NormNodeMap &""'"); 
  }
  arg2 = reinterpret_cast< NormNodeMap * >(argp2);
  {
    try {
      (arg1)->mapNodes(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_mapNodes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  UnaryNodeMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_mapNodes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_mapNodes" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_UnaryNodeMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_mapNodes" "', argument " "2"" of type '" "UnaryNodeMap &""'"); 
  }
  arg2 = reinterpret_cast< UnaryNodeMap * >(argp2);
  {
    try {
      (arg1)->mapNodes(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_mapNodes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_NormNodeMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_mapNodes__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_UnaryNodeMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_mapNodes__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_mapNodes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mapNodes(Implicit0Cells *,NormNodeMap &)\n"
    "    mapNodes(Implicit0Cells *,UnaryNodeMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_buildInvertedIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_buildInvertedIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_buildInvertedIndex" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      (arg1)->buildInvertedIndex();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_buildAdjacentIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_buildAdjacentIndex",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_buildAdjacentIndex" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      (arg1)->buildAdjacentIndex();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_show" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Implicit0Cells_show" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    try {
      (arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_show" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Implicit0Cells_show__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Implicit0Cells_show__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(Implicit0Cells *,size_t)\n"
    "    print(Implicit0Cells *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_implicit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_implicit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_implicit" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (bool)(arg1)->implicit();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_bytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_bytes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_bytes" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (int)(arg1)->bytes();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_unref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_unref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_unref" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      (arg1)->unref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_ref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_ref",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_ref" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      (arg1)->ref();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_asCellArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_asCellArray",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_asCellArray" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (CellArray *)(arg1)->asCellArray();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_getCellVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Cell > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Implicit0Cells_getCellVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_getCellVector" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  {
    try {
      result = (std::vector< Cell > *)(arg1)->getCellVector();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Cell_std__allocatorT_Cell_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_toNodeSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  set< Node > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_toNodeSet",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_toNodeSet" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_setT_unsigned_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_toNodeSet" "', argument " "2"" of type '" "set< Node > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_toNodeSet" "', argument " "2"" of type '" "set< Node > &""'"); 
  }
  arg2 = reinterpret_cast< set< Node > * >(argp2);
  {
    try {
      (arg1)->toNodeSet(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_Intersection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_Intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_Intersection" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_Intersection" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  {
    try {
      result = (CellArray *)(arg1)->Intersection(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_Intersection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Implicit0Cells *arg2 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Implicit0Cells *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_Intersection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_Intersection" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_Intersection" "', argument " "2"" of type '" "Implicit0Cells *""'"); 
  }
  arg2 = reinterpret_cast< Implicit0Cells * >(argp2);
  {
    try {
      result = (Implicit0Cells *)(arg1)->Intersection(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_Intersection(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_Intersection__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AbstractCellArray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_Intersection__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_Intersection'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Intersection(Implicit0Cells *,AbstractCellArray *)\n"
    "    Intersection(Implicit0Cells *,Implicit0Cells *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_Cross__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  CrossNodeMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  AbstractCellArray *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Implicit0Cells_Cross",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_Cross" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_Cross" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CrossNodeMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Implicit0Cells_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  arg3 = reinterpret_cast< CrossNodeMap * >(argp3);
  {
    try {
      result = (AbstractCellArray *)(arg1)->Cross(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_Cross__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Implicit0Cells *arg2 = (Implicit0Cells *) 0 ;
  CrossNodeMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Implicit0Cells *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Implicit0Cells_Cross",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_Cross" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_Cross" "', argument " "2"" of type '" "Implicit0Cells *""'"); 
  }
  arg2 = reinterpret_cast< Implicit0Cells * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CrossNodeMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Implicit0Cells_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Implicit0Cells_Cross" "', argument " "3"" of type '" "CrossNodeMap &""'"); 
  }
  arg3 = reinterpret_cast< CrossNodeMap * >(argp3);
  {
    try {
      result = (Implicit0Cells *)(arg1)->Cross(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_Cross(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CrossNodeMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Implicit0Cells_Cross__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AbstractCellArray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_CrossNodeMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Implicit0Cells_Cross__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_Cross'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Cross(Implicit0Cells *,AbstractCellArray *,CrossNodeMap &)\n"
    "    Cross(Implicit0Cells *,Implicit0Cells *,CrossNodeMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_makeCrossNodeMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CrossNodeMap result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_makeCrossNodeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_makeCrossNodeMap" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_makeCrossNodeMap" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  {
    try {
      result = (arg1)->makeCrossNodeMap(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new CrossNodeMap(static_cast< const CrossNodeMap& >(result))), SWIGTYPE_p_CrossNodeMap, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_makeCrossNodeMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Implicit0Cells *arg1 = (Implicit0Cells *) 0 ;
  Implicit0Cells *arg2 = (Implicit0Cells *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CrossNodeMap result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Implicit0Cells_makeCrossNodeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Implicit0Cells_makeCrossNodeMap" "', argument " "1"" of type '" "Implicit0Cells *""'"); 
  }
  arg1 = reinterpret_cast< Implicit0Cells * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Implicit0Cells, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Implicit0Cells_makeCrossNodeMap" "', argument " "2"" of type '" "Implicit0Cells *""'"); 
  }
  arg2 = reinterpret_cast< Implicit0Cells * >(argp2);
  {
    try {
      result = (arg1)->makeCrossNodeMap(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new CrossNodeMap(static_cast< const CrossNodeMap& >(result))), SWIGTYPE_p_CrossNodeMap, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Implicit0Cells_makeCrossNodeMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_makeCrossNodeMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Implicit0Cells, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AbstractCellArray, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Implicit0Cells_makeCrossNodeMap__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Implicit0Cells_makeCrossNodeMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    makeCrossNodeMap(Implicit0Cells *,AbstractCellArray *)\n"
    "    makeCrossNodeMap(Implicit0Cells *,Implicit0Cells *)\n");
  return NULL;
}


SWIGINTERN PyObject *Implicit0Cells_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Implicit0Cells, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ArrayReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ArrayReader")) SWIG_fail;
  {
    try {
      result = (ArrayReader *)new ArrayReader();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArrayReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ArrayReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArrayReader" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  istream *arg1 = (istream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_istream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayReader" "', argument " "1"" of type '" "istream *""'"); 
  }
  arg1 = reinterpret_cast< istream * >(argp1);
  {
    try {
      result = (ArrayReader *)new ArrayReader(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayReader__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  istream *arg1 = (istream *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ArrayReader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_istream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayReader" "', argument " "1"" of type '" "istream *""'"); 
  }
  arg1 = reinterpret_cast< istream * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (ArrayReader *)new ArrayReader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayReader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ArrayReader__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArrayReader__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_istream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ArrayReader__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ArrayReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ArrayReader()\n"
    "    ArrayReader(istream *)\n"
    "    ArrayReader(istream *,long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_makeArrayReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ArrayReader_makeArrayReader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_makeArrayReader" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArrayReader_makeArrayReader" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (ArrayReader *)(arg1)->makeArrayReader(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, 0 |  0 );
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_makeArrayReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ArrayReader_makeArrayReader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_makeArrayReader" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayReader_makeArrayReader" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArrayReader_makeArrayReader" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (ArrayReader *)(arg1)->makeArrayReader(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, 0 |  0 );
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_makeArrayReader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ArrayReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_int, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ArrayReader_makeArrayReader__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ArrayReader, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_double, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ArrayReader_makeArrayReader__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ArrayReader_makeArrayReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    makeArrayReader(ArrayReader *,int *,int)\n"
    "    makeArrayReader(ArrayReader *,double *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_ReadTuples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  istream *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  Scheme *arg5 = (Scheme *) 0 ;
  UnTypedPtr *arg6 = (UnTypedPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ArrayReader_ReadTuples",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_ReadTuples" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayReader_ReadTuples" "', argument " "2"" of type '" "istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayReader_ReadTuples" "', argument " "2"" of type '" "istream &""'"); 
  }
  arg2 = reinterpret_cast< istream * >(argp2);
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ArrayReader_ReadTuples" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ArrayReader_ReadTuples" "', argument " "5"" of type '" "Scheme *""'"); 
  }
  arg5 = reinterpret_cast< Scheme * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ArrayReader_ReadTuples" "', argument " "6"" of type '" "UnTypedPtr *""'"); 
  }
  arg6 = reinterpret_cast< UnTypedPtr * >(argp6);
  {
    try {
      (arg1)->ReadTuples(*arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_ReadPrimitives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  istream *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  Type arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ArrayReader_ReadPrimitives",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_ReadPrimitives" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayReader_ReadPrimitives" "', argument " "2"" of type '" "istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayReader_ReadPrimitives" "', argument " "2"" of type '" "istream &""'"); 
  }
  arg2 = reinterpret_cast< istream * >(argp2);
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ArrayReader_ReadPrimitives" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ArrayReader_ReadPrimitives" "', argument " "5"" of type '" "Type""'");
  } 
  arg5 = static_cast< Type >(val5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ArrayReader_ReadPrimitives" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    try {
      (arg1)->ReadPrimitives(*arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg3) free(arg3);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  int arg3 ;
  Array *arg4 = (Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ArrayReader_Read",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_Read" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayReader_Read" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArrayReader_Read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ArrayReader_Read" "', argument " "4"" of type '" "Array *""'"); 
  }
  arg4 = reinterpret_cast< Array * >(argp4);
  {
    try {
      (arg1)->Read(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_getOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ArrayReader_getOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_getOffset" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  {
    try {
      result = (long)(arg1)->getOffset();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_setOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayReader_setOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_setOffset" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayReader_setOffset" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      (arg1)->setOffset(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_setPatternAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayReader_setPatternAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_setPatternAttribute" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ArrayReader_setPatternAttribute" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setPatternAttribute(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayReader_setStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayReader *arg1 = (ArrayReader *) 0 ;
  istream *arg2 = (istream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ArrayReader_setStream",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayReader_setStream" "', argument " "1"" of type '" "ArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_istream, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayReader_setStream" "', argument " "2"" of type '" "istream *""'"); 
  }
  arg2 = reinterpret_cast< istream * >(argp2);
  {
    try {
      (arg1)->setStream(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArrayReader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ArrayReader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FileArrayReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  std::string arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FileArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_FileArrayReader",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FileArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FileArrayReader" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (FileArrayReader *)new FileArrayReader(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileArrayReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FileArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_FileArrayReader",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FileArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FileArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (FileArrayReader *)new FileArrayReader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileArrayReader__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  FileArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileArrayReader",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FileArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (FileArrayReader *)new FileArrayReader(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileArrayReader__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ifstream *arg1 = (ifstream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FileArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FileArrayReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ifstream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FileArrayReader" "', argument " "1"" of type '" "ifstream *""'"); 
  }
  arg1 = reinterpret_cast< ifstream * >(argp1);
  {
    try {
      result = (FileArrayReader *)new FileArrayReader(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FileArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FileArrayReader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ifstream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileArrayReader__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FileArrayReader__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FileArrayReader__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_FileArrayReader__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_FileArrayReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FileArrayReader(std::string,long,std::string)\n"
    "    FileArrayReader(std::string,long)\n"
    "    FileArrayReader(std::string)\n"
    "    FileArrayReader(ifstream *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FileArrayReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FileArrayReader *arg1 = (FileArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FileArrayReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FileArrayReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FileArrayReader" "', argument " "1"" of type '" "FileArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< FileArrayReader * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FileArrayReader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FileArrayReader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ProjectArrayReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  ProjectArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ProjectArrayReader",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ProjectArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ProjectArrayReader *)new ProjectArrayReader(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProjectArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProjectArrayReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ProjectArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ProjectArrayReader",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ProjectArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ProjectArrayReader *)new ProjectArrayReader(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProjectArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProjectArrayReader__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ifstream *arg1 = (ifstream *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ProjectArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ProjectArrayReader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ifstream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ProjectArrayReader" "', argument " "1"" of type '" "ifstream *""'"); 
  }
  arg1 = reinterpret_cast< ifstream * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectArrayReader" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ProjectArrayReader *)new ProjectArrayReader(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProjectArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProjectArrayReader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ifstream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ProjectArrayReader__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_ProjectArrayReader__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_ProjectArrayReader__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ProjectArrayReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProjectArrayReader(std::string,long,std::string,std::string,std::string)\n"
    "    ProjectArrayReader(std::string,long,std::string,std::string)\n"
    "    ProjectArrayReader(ifstream *,std::string,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProjectArrayReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectArrayReader *arg1 = (ProjectArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ProjectArrayReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectArrayReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProjectArrayReader" "', argument " "1"" of type '" "ProjectArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ProjectArrayReader * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectArrayReader_GetScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectArrayReader *arg1 = (ProjectArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ProjectArrayReader_GetScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectArrayReader_GetScheme" "', argument " "1"" of type '" "ProjectArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ProjectArrayReader * >(argp1);
  {
    try {
      result = (arg1)->GetScheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Scheme(static_cast< const Scheme& >(result))), SWIGTYPE_p_Scheme, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectArrayReader_SetScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectArrayReader *arg1 = (ProjectArrayReader *) 0 ;
  Scheme arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ProjectArrayReader_SetScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectArrayReader_SetScheme" "', argument " "1"" of type '" "ProjectArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ProjectArrayReader * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectArrayReader_SetScheme" "', argument " "2"" of type '" "Scheme""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectArrayReader_SetScheme" "', argument " "2"" of type '" "Scheme""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->SetScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectArrayReader_ReadPrimitives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectArrayReader *arg1 = (ProjectArrayReader *) 0 ;
  istream *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  Type arg5 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ProjectArrayReader_ReadPrimitives",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectArrayReader_ReadPrimitives" "', argument " "1"" of type '" "ProjectArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ProjectArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectArrayReader_ReadPrimitives" "', argument " "2"" of type '" "istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectArrayReader_ReadPrimitives" "', argument " "2"" of type '" "istream &""'"); 
  }
  arg2 = reinterpret_cast< istream * >(argp2);
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ProjectArrayReader_ReadPrimitives" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ProjectArrayReader_ReadPrimitives" "', argument " "5"" of type '" "Type""'");
  } 
  arg5 = static_cast< Type >(val5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ProjectArrayReader_ReadPrimitives" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  {
    try {
      (arg1)->ReadPrimitives(*arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg3) free(arg3);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectArrayReader_ReadTuples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectArrayReader *arg1 = (ProjectArrayReader *) 0 ;
  istream *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  Scheme *arg5 = (Scheme *) 0 ;
  UnTypedPtr *arg6 = (UnTypedPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ProjectArrayReader_ReadTuples",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectArrayReader_ReadTuples" "', argument " "1"" of type '" "ProjectArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< ProjectArrayReader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProjectArrayReader_ReadTuples" "', argument " "2"" of type '" "istream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProjectArrayReader_ReadTuples" "', argument " "2"" of type '" "istream &""'"); 
  }
  arg2 = reinterpret_cast< istream * >(argp2);
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (int) PyInt_AsLong(o);
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ProjectArrayReader_ReadTuples" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ProjectArrayReader_ReadTuples" "', argument " "5"" of type '" "Scheme *""'"); 
  }
  arg5 = reinterpret_cast< Scheme * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ProjectArrayReader_ReadTuples" "', argument " "6"" of type '" "UnTypedPtr *""'"); 
  }
  arg6 = reinterpret_cast< UnTypedPtr * >(argp6);
  {
    try {
      (arg1)->ReadTuples(*arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *ProjectArrayReader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ProjectArrayReader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TextFileArrayReader__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  std::string arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  TextFileArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TextFileArrayReader",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TextFileArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TextFileArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TextFileArrayReader" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (TextFileArrayReader *)new TextFileArrayReader(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TextFileArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TextFileArrayReader__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TextFileArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TextFileArrayReader",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TextFileArrayReader" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TextFileArrayReader" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (TextFileArrayReader *)new TextFileArrayReader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TextFileArrayReader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TextFileArrayReader(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TextFileArrayReader__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_TextFileArrayReader__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TextFileArrayReader'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TextFileArrayReader(std::string,long,std::string)\n"
    "    TextFileArrayReader(std::string,long)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TextFileArrayReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TextFileArrayReader *arg1 = (TextFileArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TextFileArrayReader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TextFileArrayReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TextFileArrayReader" "', argument " "1"" of type '" "TextFileArrayReader *""'"); 
  }
  arg1 = reinterpret_cast< TextFileArrayReader * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TextFileArrayReader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TextFileArrayReader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ArrayWriter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  std::string arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ArrayWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ArrayWriter",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ArrayWriter" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArrayWriter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ArrayWriter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ArrayWriter *)new ArrayWriter(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayWriter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ArrayWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ArrayWriter",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ArrayWriter" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArrayWriter" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (ArrayWriter *)new ArrayWriter(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayWriter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  ArrayWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayWriter",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ArrayWriter" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ArrayWriter *)new ArrayWriter(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayWriter__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ofstream *arg1 = (ofstream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ArrayWriter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ArrayWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ofstream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayWriter" "', argument " "1"" of type '" "ofstream *""'"); 
  }
  arg1 = reinterpret_cast< ofstream * >(argp1);
  {
    try {
      result = (ArrayWriter *)new ArrayWriter(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayWriter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayWriter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ofstream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArrayWriter__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArrayWriter__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ArrayWriter__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ArrayWriter__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ArrayWriter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ArrayWriter(std::string,long,std::string)\n"
    "    ArrayWriter(std::string,long)\n"
    "    ArrayWriter(std::string)\n"
    "    ArrayWriter(ofstream *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayWriter_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayWriter *arg1 = (ArrayWriter *) 0 ;
  Dataset *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ArrayWriter_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayWriter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayWriter_Write" "', argument " "1"" of type '" "ArrayWriter *""'"); 
  }
  arg1 = reinterpret_cast< ArrayWriter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Dataset,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayWriter_Write" "', argument " "2"" of type '" "Dataset const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayWriter_Write" "', argument " "2"" of type '" "Dataset const &""'"); 
  }
  arg2 = reinterpret_cast< Dataset * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ArrayWriter_Write" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->Write((Dataset const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArrayWriter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArrayWriter *arg1 = (ArrayWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ArrayWriter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArrayWriter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArrayWriter" "', argument " "1"" of type '" "ArrayWriter *""'"); 
  }
  arg1 = reinterpret_cast< ArrayWriter * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArrayWriter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ArrayWriter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ElcircFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  ElcircFile *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ElcircFile",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ElcircFile" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ElcircFile *)new ElcircFile(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElcircFile, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElcircFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ElcircFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElcircFile" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getVarScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_getVarScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getVarScheme" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (arg1)->getVarScheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getSurfReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElcircFile_getSurfReader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getSurfReader" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircFile_getSurfReader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ElcircFile_getSurfReader" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ArrayReader *)(arg1)->getSurfReader(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getVariableReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  ArrayReader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElcircFile_getVariableReader",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getVariableReader" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircFile_getVariableReader" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElcircFile_getVariableReader" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElcircFile_getVariableReader" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElcircFile_getVariableReader" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElcircFile_getVariableReader" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (ArrayReader *)(arg1)->getVariableReader((std::string const &)*arg2,arg3,(std::string const &)*arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getSurfOffset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElcircFile_getSurfOffset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getSurfOffset" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircFile_getSurfOffset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElcircFile_getSurfOffset" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->getSurfOffset(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getSurfOffset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircFile_getSurfOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getSurfOffset" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircFile_getSurfOffset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getSurfOffset(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getSurfOffset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ElcircFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ElcircFile_getSurfOffset__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ElcircFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElcircFile_getSurfOffset__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ElcircFile_getSurfOffset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSurfOffset(ElcircFile *,int,int)\n"
    "    getSurfOffset(ElcircFile *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getVariableOffset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElcircFile_getVariableOffset",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getVariableOffset" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircFile_getVariableOffset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElcircFile_getVariableOffset" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElcircFile_getVariableOffset" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (int)(arg1)->getVariableOffset(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getVariableOffset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElcircFile_getVariableOffset",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getVariableOffset" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircFile_getVariableOffset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElcircFile_getVariableOffset" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int)(arg1)->getVariableOffset(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getVariableOffset__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircFile_getVariableOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getVariableOffset" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircFile_getVariableOffset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)(arg1)->getVariableOffset(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getVariableOffset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ElcircFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ElcircFile_getVariableOffset__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ElcircFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ElcircFile_getVariableOffset__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ElcircFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ElcircFile_getVariableOffset__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ElcircFile_getVariableOffset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getVariableOffset(ElcircFile *,int,int,int)\n"
    "    getVariableOffset(ElcircFile *,int,int)\n"
    "    getVariableOffset(ElcircFile *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getTimestepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_getTimestepSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getTimestepSize" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (int)(arg1)->getTimestepSize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_getHeaderSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_getHeaderSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_getHeaderSize" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (int)(arg1)->getHeaderSize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_readHGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_readHGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_readHGrid" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (GridField *)(arg1)->readHGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_readDGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_readDGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_readDGrid" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (GridField *)(arg1)->readDGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_readVGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_readVGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_readVGrid" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (GridField *)(arg1)->readVGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_readTGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_readTGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_readTGrid" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (GridField *)(arg1)->readTGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_Valid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_Valid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_Valid" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (bool)(arg1)->Valid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_makeHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  ElcircHeader *arg3 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ElcircHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElcircFile_makeHeader",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_makeHeader" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircFile_makeHeader" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElcircFile_makeHeader" "', argument " "3"" of type '" "ElcircHeader *""'"); 
  }
  arg3 = reinterpret_cast< ElcircHeader * >(argp3);
  {
    try {
      result = (ElcircHeader *)(arg1)->makeHeader(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElcircHeader, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_h_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircFile_h_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_h_set" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircFile_h_set" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  if (arg1) (arg1)->h = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_h_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ElcircHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_h_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_h_get" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  result = (ElcircHeader *)& ((arg1)->h);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElcircHeader, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircFile_i23d(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircFile *arg1 = (ElcircFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircFile_i23d",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircFile_i23d" "', argument " "1"" of type '" "ElcircFile *""'"); 
  }
  arg1 = reinterpret_cast< ElcircFile * >(argp1);
  {
    try {
      result = (int)(arg1)->i23d();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElcircFile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ElcircFile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CrossOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CrossOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CrossOp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CrossOp" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CrossOp" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      result = (CrossOp *)new CrossOp(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CrossOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CrossOp *arg1 = (CrossOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CrossOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CrossOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossOp_Execute" "', argument " "1"" of type '" "CrossOp *""'"); 
  }
  arg1 = reinterpret_cast< CrossOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CrossOp_Cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CrossOp_Cross",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CrossOp_Cross" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CrossOp_Cross" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  {
    try {
      result = (GridField *)CrossOp::Cross(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CrossOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CrossOp *arg1 = (CrossOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CrossOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CrossOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CrossOp" "', argument " "1"" of type '" "CrossOp *""'"); 
  }
  arg1 = reinterpret_cast< CrossOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CrossOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CrossOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RestrictOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Dim_t arg2 ;
  GridFieldOperator *arg3 = (GridFieldOperator *) 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RestrictOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RestrictOp",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RestrictOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RestrictOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RestrictOp" "', argument " "3"" of type '" "GridFieldOperator *""'"); 
  }
  arg3 = reinterpret_cast< GridFieldOperator * >(argp3);
  {
    try {
      result = (RestrictOp *)new RestrictOp(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RestrictOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestrictOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RestrictOp *arg1 = (RestrictOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RestrictOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RestrictOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RestrictOp_Execute" "', argument " "1"" of type '" "RestrictOp *""'"); 
  }
  arg1 = reinterpret_cast< RestrictOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RestrictOp_Restrict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Dim_t arg2 ;
  GridField *arg3 = (GridField *) 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RestrictOp_Restrict",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RestrictOp_Restrict" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RestrictOp_Restrict" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RestrictOp_Restrict" "', argument " "3"" of type '" "GridField *""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  {
    try {
      result = (GridField *)RestrictOp::Restrict(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RestrictOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RestrictOp *arg1 = (RestrictOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RestrictOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RestrictOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RestrictOp" "', argument " "1"" of type '" "RestrictOp *""'"); 
  }
  arg1 = reinterpret_cast< RestrictOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RestrictOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RestrictOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ApplyOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Dim_t arg2 ;
  GridFieldOperator *arg3 = (GridFieldOperator *) 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ApplyOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ApplyOp",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ApplyOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ApplyOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ApplyOp" "', argument " "3"" of type '" "GridFieldOperator *""'"); 
  }
  arg3 = reinterpret_cast< GridFieldOperator * >(argp3);
  {
    try {
      result = (ApplyOp *)new ApplyOp(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ApplyOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplyOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ApplyOp *arg1 = (ApplyOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ApplyOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ApplyOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplyOp_Execute" "', argument " "1"" of type '" "ApplyOp *""'"); 
  }
  arg1 = reinterpret_cast< ApplyOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplyOp_Apply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Dim_t arg2 ;
  GridField *arg3 = (GridField *) 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ApplyOp_Apply",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ApplyOp_Apply" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApplyOp_Apply" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ApplyOp_Apply" "', argument " "3"" of type '" "GridField *""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  {
    try {
      result = (GridField *)ApplyOp::Apply(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplyOp_SetExpression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ApplyOp *arg1 = (ApplyOp *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ApplyOp_SetExpression",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ApplyOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplyOp_SetExpression" "', argument " "1"" of type '" "ApplyOp *""'"); 
  }
  arg1 = reinterpret_cast< ApplyOp * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ApplyOp_SetExpression" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ApplyOp_SetExpression" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetExpression((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ApplyOp_SetRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ApplyOp *arg1 = (ApplyOp *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ApplyOp_SetRank",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ApplyOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ApplyOp_SetRank" "', argument " "1"" of type '" "ApplyOp *""'"); 
  }
  arg1 = reinterpret_cast< ApplyOp * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ApplyOp_SetRank" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    try {
      (arg1)->SetRank(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ApplyOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ApplyOp *arg1 = (ApplyOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ApplyOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ApplyOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ApplyOp" "', argument " "1"" of type '" "ApplyOp *""'"); 
  }
  arg1 = reinterpret_cast< ApplyOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ApplyOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ApplyOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BindOp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  Dim_t arg2 ;
  GridFieldOperator *arg3 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  BindOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BindOp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BindOp" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BindOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BindOp" "', argument " "3"" of type '" "GridFieldOperator *""'"); 
  }
  arg3 = reinterpret_cast< GridFieldOperator * >(argp3);
  {
    try {
      result = (BindOp *)new BindOp(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BindOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BindOp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Array *arg1 = (Array *) 0 ;
  ArrayReader *arg2 = (ArrayReader *) 0 ;
  Dim_t arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BindOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_BindOp",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BindOp" "', argument " "1"" of type '" "Array *""'"); 
  }
  arg1 = reinterpret_cast< Array * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BindOp" "', argument " "2"" of type '" "ArrayReader *""'"); 
  }
  arg2 = reinterpret_cast< ArrayReader * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BindOp" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_BindOp" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  {
    try {
      result = (BindOp *)new BindOp(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BindOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BindOp__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Type arg2 ;
  ArrayReader *arg3 = (ArrayReader *) 0 ;
  Dim_t arg4 ;
  GridFieldOperator *arg5 = (GridFieldOperator *) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  BindOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_BindOp",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BindOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BindOp" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BindOp" "', argument " "3"" of type '" "ArrayReader *""'"); 
  }
  arg3 = reinterpret_cast< ArrayReader * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BindOp" "', argument " "4"" of type '" "Dim_t""'");
  } 
  arg4 = static_cast< Dim_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_BindOp" "', argument " "5"" of type '" "GridFieldOperator *""'"); 
  }
  arg5 = reinterpret_cast< GridFieldOperator * >(argp5);
  {
    try {
      result = (BindOp *)new BindOp(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BindOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BindOp__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Type arg2 ;
  std::string arg3 ;
  int arg4 ;
  Dim_t arg5 ;
  GridFieldOperator *arg6 = (GridFieldOperator *) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  BindOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_BindOp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BindOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BindOp" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BindOp" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BindOp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_BindOp" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_BindOp" "', argument " "6"" of type '" "GridFieldOperator *""'"); 
  }
  arg6 = reinterpret_cast< GridFieldOperator * >(argp6);
  {
    try {
      result = (BindOp *)new BindOp(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BindOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BindOp__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Type arg2 ;
  std::string arg3 ;
  int arg4 ;
  std::string arg5 ;
  Dim_t arg6 ;
  GridFieldOperator *arg7 = (GridFieldOperator *) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  BindOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_BindOp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BindOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BindOp" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BindOp" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_BindOp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BindOp" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_BindOp" "', argument " "6"" of type '" "Dim_t""'");
  } 
  arg6 = static_cast< Dim_t >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "new_BindOp" "', argument " "7"" of type '" "GridFieldOperator *""'"); 
  }
  arg7 = reinterpret_cast< GridFieldOperator * >(argp7);
  {
    try {
      result = (BindOp *)new BindOp(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BindOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BindOp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_BindOp__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Array, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ArrayReader, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_BindOp__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_ArrayReader, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_BindOp__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_BindOp__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                void *vptr = 0;
                int res = SWIG_ConvertPtr(argv[6], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_new_BindOp__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_BindOp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BindOp(Array *,Dim_t,GridFieldOperator *)\n"
    "    BindOp(Array *,ArrayReader *,Dim_t,GridFieldOperator *)\n"
    "    BindOp(std::string,Type,ArrayReader *,Dim_t,GridFieldOperator *)\n"
    "    BindOp(std::string,Type,std::string,int,Dim_t,GridFieldOperator *)\n"
    "    BindOp(std::string,Type,std::string,int,std::string,Dim_t,GridFieldOperator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_setArrayReader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindOp *arg1 = (BindOp *) 0 ;
  ArrayReader *arg2 = (ArrayReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BindOp_setArrayReader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindOp_setArrayReader" "', argument " "1"" of type '" "BindOp *""'"); 
  }
  arg1 = reinterpret_cast< BindOp * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BindOp_setArrayReader" "', argument " "2"" of type '" "ArrayReader *""'"); 
  }
  arg2 = reinterpret_cast< ArrayReader * >(argp2);
  {
    try {
      (arg1)->setArrayReader(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_setOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindOp *arg1 = (BindOp *) 0 ;
  UnTypedPtr arg2 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BindOp_setOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindOp_setOffset" "', argument " "1"" of type '" "BindOp *""'"); 
  }
  arg1 = reinterpret_cast< BindOp * >(argp1);
  {
    arg2 = (UnTypedPtr) obj1;
  }
  {
    try {
      (arg1)->setOffset(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_setOffsetInt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindOp *arg1 = (BindOp *) 0 ;
  UnTypedPtr arg2 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BindOp_setOffsetInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindOp_setOffsetInt" "', argument " "1"" of type '" "BindOp *""'"); 
  }
  arg1 = reinterpret_cast< BindOp * >(argp1);
  {
    arg2 = (UnTypedPtr) obj1;
  }
  {
    try {
      (arg1)->setOffsetInt(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_setOffsetInt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindOp *arg1 = (BindOp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BindOp_setOffsetInt",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindOp_setOffsetInt" "', argument " "1"" of type '" "BindOp *""'"); 
  }
  arg1 = reinterpret_cast< BindOp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BindOp_setOffsetInt" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->setOffsetInt(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_setOffsetInt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BindOp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BindOp_setOffsetInt__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_BindOp, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = true;
      }
      if (_v) {
        return _wrap_BindOp_setOffsetInt__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BindOp_setOffsetInt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setOffsetInt(BindOp *,UnTypedPtr)\n"
    "    setOffsetInt(BindOp *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindOp *arg1 = (BindOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BindOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindOp_Execute" "', argument " "1"" of type '" "BindOp *""'"); 
  }
  arg1 = reinterpret_cast< BindOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindOp_Bind(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Type arg2 ;
  ArrayReader *arg3 = (ArrayReader *) 0 ;
  Dim_t arg4 ;
  GridField *arg5 = (GridField *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:BindOp_Bind",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindOp_Bind" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BindOp_Bind" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BindOp_Bind" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ArrayReader, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BindOp_Bind" "', argument " "3"" of type '" "ArrayReader *""'"); 
  }
  arg3 = reinterpret_cast< ArrayReader * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BindOp_Bind" "', argument " "4"" of type '" "Dim_t""'");
  } 
  arg4 = static_cast< Dim_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "BindOp_Bind" "', argument " "5"" of type '" "GridField *""'"); 
  }
  arg5 = reinterpret_cast< GridField * >(argp5);
  {
    try {
      result = (GridField *)BindOp::Bind((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BindOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindOp *arg1 = (BindOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BindOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BindOp" "', argument " "1"" of type '" "BindOp *""'"); 
  }
  arg1 = reinterpret_cast< BindOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BindOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BindOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BindConstantOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dim_t arg1 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  short val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  BindConstantOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_BindConstantOp",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BindConstantOp" "', argument " "1"" of type '" "Dim_t""'");
  } 
  arg1 = static_cast< Dim_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BindConstantOp" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BindConstantOp" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_BindConstantOp" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_BindConstantOp" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  {
    try {
      result = (BindConstantOp *)new BindConstantOp(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BindConstantOp, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindConstantOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindConstantOp *arg1 = (BindConstantOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BindConstantOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindConstantOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindConstantOp_Execute" "', argument " "1"" of type '" "BindConstantOp *""'"); 
  }
  arg1 = reinterpret_cast< BindConstantOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindConstantOp_setAttributeVal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindConstantOp *arg1 = (BindConstantOp *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BindConstantOp_setAttributeVal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindConstantOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BindConstantOp_setAttributeVal" "', argument " "1"" of type '" "BindConstantOp *""'"); 
  }
  arg1 = reinterpret_cast< BindConstantOp * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BindConstantOp_setAttributeVal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BindConstantOp_setAttributeVal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BindConstantOp_setAttributeVal" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    try {
      (arg1)->setAttributeVal((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BindConstantOp_BindConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dim_t arg1 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  short val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BindConstantOp_BindConstant",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BindConstantOp_BindConstant" "', argument " "1"" of type '" "Dim_t""'");
  } 
  arg1 = static_cast< Dim_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BindConstantOp_BindConstant" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BindConstantOp_BindConstant" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BindConstantOp_BindConstant" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BindConstantOp_BindConstant" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  {
    try {
      result = (GridField *)BindConstantOp::BindConstant(arg1,(std::string const &)*arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BindConstantOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BindConstantOp *arg1 = (BindConstantOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BindConstantOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BindConstantOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BindConstantOp" "', argument " "1"" of type '" "BindConstantOp *""'"); 
  }
  arg1 = reinterpret_cast< BindConstantOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BindConstantOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BindConstantOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DataDumpOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dim_t arg1 ;
  std::string arg2 ;
  long arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  short val1 ;
  int ecode1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  DataDumpOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DataDumpOp",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataDumpOp" "', argument " "1"" of type '" "Dim_t""'");
  } 
  arg1 = static_cast< Dim_t >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DataDumpOp" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataDumpOp" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_DataDumpOp" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  {
    try {
      result = (DataDumpOp *)new DataDumpOp(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DataDumpOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDumpOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DataDumpOp *arg1 = (DataDumpOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataDumpOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DataDumpOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDumpOp_Execute" "', argument " "1"" of type '" "DataDumpOp *""'"); 
  }
  arg1 = reinterpret_cast< DataDumpOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataDumpOp_DataDump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DataDumpOp_DataDump",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataDumpOp_DataDump" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataDumpOp_DataDump" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DataDumpOp_DataDump" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataDumpOp_DataDump" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      DataDumpOp::DataDump(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataDumpOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DataDumpOp *arg1 = (DataDumpOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DataDumpOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DataDumpOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataDumpOp" "', argument " "1"" of type '" "DataDumpOp *""'"); 
  }
  arg1 = reinterpret_cast< DataDumpOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataDumpOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DataDumpOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutputOp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  GridFieldOperator *arg3 = (GridFieldOperator *) 0 ;
  long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  OutputOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_OutputOp",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutputOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OutputOp" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_OutputOp" "', argument " "3"" of type '" "GridFieldOperator *""'"); 
  }
  arg3 = reinterpret_cast< GridFieldOperator * >(argp3);
  {
    try {
      result = (OutputOp *)new OutputOp(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutputOp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OutputOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OutputOp",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutputOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OutputOp" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      result = (OutputOp *)new OutputOp(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutputOp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_OutputOp__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_OutputOp__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_OutputOp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OutputOp(std::string,long,GridFieldOperator *)\n"
    "    OutputOp(std::string,GridFieldOperator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputOp_offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_offset_set" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OutputOp_offset_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputOp_offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_offset_get" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  result = (int) ((arg1)->offset);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_filename_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputOp_filename_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_filename_set" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputOp_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OutputOp_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->filename = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_filename_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputOp_filename_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_filename_get" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  result = (std::string *) & ((arg1)->filename);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_Execute" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_setFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputOp_setFileName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_setFileName" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputOp_setFileName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setFileName(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputOp_Output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  std::string arg3 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OutputOp_Output",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputOp_Output" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputOp_Output" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "OutputOp_Output" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OutputOp_Output" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  {
    try {
      (arg1)->Output(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OutputOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputOp *arg1 = (OutputOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutputOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutputOp" "', argument " "1"" of type '" "OutputOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutputOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OutputOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutputNetCDFOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  Scheme arg3 ;
  Scheme arg4 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OutputNetCDFOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_OutputNetCDFOp",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutputNetCDFOp" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OutputNetCDFOp" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_OutputNetCDFOp" "', argument " "3"" of type '" "Scheme const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OutputNetCDFOp" "', argument " "3"" of type '" "Scheme const""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_OutputNetCDFOp" "', argument " "4"" of type '" "Scheme const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OutputNetCDFOp" "', argument " "4"" of type '" "Scheme const""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      result = (OutputNetCDFOp *)new OutputNetCDFOp(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputNetCDFOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_filename_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputNetCDFOp_filename_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_filename_set" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputNetCDFOp_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OutputNetCDFOp_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->filename = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_filename_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputNetCDFOp_filename_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_filename_get" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  result = (std::string *) & ((arg1)->filename);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputNetCDFOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_Execute" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_setFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputNetCDFOp_setFileName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_setFileName" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputNetCDFOp_setFileName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setFileName(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_WriteNetCDF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  std::vector< GridField * > *arg2 = 0 ;
  GridField *arg3 = (GridField *) 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OutputNetCDFOp_WriteNetCDF",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_WriteNetCDF" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputNetCDFOp_WriteNetCDF" "', argument " "2"" of type '" "std::vector< GridField * > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OutputNetCDFOp_WriteNetCDF" "', argument " "2"" of type '" "std::vector< GridField * > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GridField * > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OutputNetCDFOp_WriteNetCDF" "', argument " "3"" of type '" "GridField *""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "OutputNetCDFOp_WriteNetCDF" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OutputNetCDFOp_WriteNetCDF" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      (arg1)->WriteNetCDF(*arg2,arg3,(std::string const &)*arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_WriteTimeVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  int arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:OutputNetCDFOp_WriteTimeVars",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_WriteTimeVars" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputNetCDFOp_WriteTimeVars" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OutputNetCDFOp_WriteTimeVars" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OutputNetCDFOp_WriteTimeVars" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      (arg1)->WriteTimeVars(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFOp_SetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputNetCDFOp_SetDate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFOp_SetDate" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "OutputNetCDFOp_SetDate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->SetDate(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OutputNetCDFOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFOp *arg1 = (OutputNetCDFOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutputNetCDFOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutputNetCDFOp" "', argument " "1"" of type '" "OutputNetCDFOp *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutputNetCDFOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OutputNetCDFOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutputNetCDFDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OutputNetCDFDim *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_OutputNetCDFDim",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OutputNetCDFDim" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OutputNetCDFDim" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OutputNetCDFDim" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_OutputNetCDFDim" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  {
    try {
      result = (OutputNetCDFDim *)new OutputNetCDFDim(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputNetCDFDim, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFDim_WriteCells(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFDim *arg1 = (OutputNetCDFDim *) 0 ;
  AbstractCellArray *arg2 = (AbstractCellArray *) 0 ;
  Dim_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:OutputNetCDFDim_WriteCells",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFDim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFDim_WriteCells" "', argument " "1"" of type '" "OutputNetCDFDim *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFDim * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_AbstractCellArray, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OutputNetCDFDim_WriteCells" "', argument " "2"" of type '" "AbstractCellArray *""'"); 
  }
  arg2 = reinterpret_cast< AbstractCellArray * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OutputNetCDFDim_WriteCells" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  {
    try {
      (arg1)->WriteCells(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFDim_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFDim *arg1 = (OutputNetCDFDim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputNetCDFDim_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFDim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFDim_Execute" "', argument " "1"" of type '" "OutputNetCDFDim *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFDim * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFDim_SetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFDim *arg1 = (OutputNetCDFDim *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputNetCDFDim_SetDate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFDim, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFDim_SetDate" "', argument " "1"" of type '" "OutputNetCDFDim *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFDim * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "OutputNetCDFDim_SetDate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->SetDate(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OutputNetCDFDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFDim *arg1 = (OutputNetCDFDim *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutputNetCDFDim",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFDim, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutputNetCDFDim" "', argument " "1"" of type '" "OutputNetCDFDim *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFDim * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutputNetCDFDim_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OutputNetCDFDim, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OutputNetCDFVars__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  Scheme arg2 ;
  Dim_t arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  unsigned int arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  OutputNetCDFVars *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_OutputNetCDFVars",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OutputNetCDFVars" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OutputNetCDFVars" "', argument " "2"" of type '" "Scheme const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OutputNetCDFVars" "', argument " "2"" of type '" "Scheme const""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OutputNetCDFVars" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_OutputNetCDFVars" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_OutputNetCDFVars" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_OutputNetCDFVars" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  {
    try {
      result = (OutputNetCDFVars *)new OutputNetCDFVars(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputNetCDFVars, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutputNetCDFVars__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  Scheme arg2 ;
  Dim_t arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  OutputNetCDFVars *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_OutputNetCDFVars",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OutputNetCDFVars" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OutputNetCDFVars" "', argument " "2"" of type '" "Scheme const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OutputNetCDFVars" "', argument " "2"" of type '" "Scheme const""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OutputNetCDFVars" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_OutputNetCDFVars" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_OutputNetCDFVars" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    try {
      result = (OutputNetCDFVars *)new OutputNetCDFVars(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputNetCDFVars, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutputNetCDFVars__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  Scheme arg2 ;
  Dim_t arg3 ;
  GridFieldOperator *arg4 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  OutputNetCDFVars *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_OutputNetCDFVars",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_OutputNetCDFVars" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_OutputNetCDFVars" "', argument " "2"" of type '" "Scheme const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OutputNetCDFVars" "', argument " "2"" of type '" "Scheme const""'");
    } else {
      Scheme * temp = reinterpret_cast< Scheme * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_OutputNetCDFVars" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_OutputNetCDFVars" "', argument " "4"" of type '" "GridFieldOperator *""'"); 
  }
  arg4 = reinterpret_cast< GridFieldOperator * >(argp4);
  {
    try {
      result = (OutputNetCDFVars *)new OutputNetCDFVars(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OutputNetCDFVars, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_OutputNetCDFVars(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NcFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_OutputNetCDFVars__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NcFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_OutputNetCDFVars__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NcFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_OutputNetCDFVars__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_OutputNetCDFVars'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    OutputNetCDFVars(NcFile *,Scheme const,Dim_t,GridFieldOperator *,unsigned int,float)\n"
    "    OutputNetCDFVars(NcFile *,Scheme const,Dim_t,GridFieldOperator *,unsigned int)\n"
    "    OutputNetCDFVars(NcFile *,Scheme const,Dim_t,GridFieldOperator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFVars_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFVars *arg1 = (OutputNetCDFVars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OutputNetCDFVars_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFVars, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFVars_Execute" "', argument " "1"" of type '" "OutputNetCDFVars *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFVars * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OutputNetCDFVars_SetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFVars *arg1 = (OutputNetCDFVars *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OutputNetCDFVars_SetDate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFVars, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OutputNetCDFVars_SetDate" "', argument " "1"" of type '" "OutputNetCDFVars *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFVars * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "OutputNetCDFVars_SetDate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->SetDate(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OutputNetCDFVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OutputNetCDFVars *arg1 = (OutputNetCDFVars *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OutputNetCDFVars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OutputNetCDFVars, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OutputNetCDFVars" "', argument " "1"" of type '" "OutputNetCDFVars *""'"); 
  }
  arg1 = reinterpret_cast< OutputNetCDFVars * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OutputNetCDFVars_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OutputNetCDFVars, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_mapType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  NcType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mapType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mapType" "', argument " "1"" of type '" "Type""'");
  } 
  arg1 = static_cast< Type >(val1);
  {
    try {
      result = mapType(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new NcType(static_cast< const NcType& >(result))), SWIGTYPE_p_NcType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HasDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HasDim",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HasDim" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HasDim" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)HasDim(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HasVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HasVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HasVar" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HasVar" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)HasVar(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HasAttr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HasAttr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HasAttr" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HasAttr" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)HasAttr(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NetCDFAdaptor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  NetCDFAdaptor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NetCDFAdaptor",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NetCDFAdaptor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (NetCDFAdaptor *)new NetCDFAdaptor(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NetCDFAdaptor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NetCDFAdaptor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  NetCDFAdaptor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NetCDFAdaptor",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NetCDFAdaptor" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (NetCDFAdaptor *)new NetCDFAdaptor((char const *)arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NetCDFAdaptor, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NetCDFAdaptor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NetCDFAdaptor__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NetCDFAdaptor__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_NetCDFAdaptor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NetCDFAdaptor(std::string)\n"
    "    NetCDFAdaptor(char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_Open__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NetCDFAdaptor_Open",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_Open" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_Open" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->Open(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_Open__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NetCDFAdaptor_Open",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_Open" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    try {
      (arg1)->Open();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_Open(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NetCDFAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NetCDFAdaptor_Open__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NetCDFAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NetCDFAdaptor_Open__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'NetCDFAdaptor_Open'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Open(NetCDFAdaptor *,std::string)\n"
    "    Open(NetCDFAdaptor *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_Close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NetCDFAdaptor_Close",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_Close" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    try {
      (arg1)->Close();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_setFileName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NetCDFAdaptor_setFileName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_setFileName" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NetCDFAdaptor_setFileName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setFileName(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_setFileName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NetCDFAdaptor_setFileName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_setFileName" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_setFileName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setFileName(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_setFileName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NetCDFAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NetCDFAdaptor_setFileName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NetCDFAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NetCDFAdaptor_setFileName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'NetCDFAdaptor_setFileName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setFileName(NetCDFAdaptor *,char *)\n"
    "    setFileName(NetCDFAdaptor *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_NodesFromDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string arg2 ;
  Grid *arg3 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NetCDFAdaptor_NodesFromDim",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_NodesFromDim" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_NodesFromDim" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NetCDFAdaptor_NodesFromDim" "', argument " "3"" of type '" "Grid *""'"); 
  }
  arg3 = reinterpret_cast< Grid * >(argp3);
  {
    try {
      (arg1)->NodesFromDim(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_WellSupportedPolygonsFromVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  Grid *arg4 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NetCDFAdaptor_WellSupportedPolygonsFromVars",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_WellSupportedPolygonsFromVars" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_WellSupportedPolygonsFromVars" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_WellSupportedPolygonsFromVars" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NetCDFAdaptor_WellSupportedPolygonsFromVars" "', argument " "4"" of type '" "Grid *""'"); 
  }
  arg4 = reinterpret_cast< Grid * >(argp4);
  {
    try {
      (arg1)->WellSupportedPolygonsFromVars(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_HomogeneousCellsFromVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  Grid *arg4 = (Grid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NetCDFAdaptor_HomogeneousCellsFromVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_HomogeneousCellsFromVar" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NetCDFAdaptor_HomogeneousCellsFromVar" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_HomogeneousCellsFromVar" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Grid, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NetCDFAdaptor_HomogeneousCellsFromVar" "', argument " "4"" of type '" "Grid *""'"); 
  }
  arg4 = reinterpret_cast< Grid * >(argp4);
  {
    try {
      (arg1)->HomogeneousCellsFromVar(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_AttributeFromVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NetCDFAdaptor_AttributeFromVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_AttributeFromVar" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NetCDFAdaptor_AttributeFromVar" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_AttributeFromVar" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NetCDFAdaptor_AttributeFromVar" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  {
    try {
      (arg1)->AttributeFromVar(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_CreateDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NetCDFAdaptor_CreateDim",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_CreateDim" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NetCDFAdaptor_CreateDim" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NetCDFAdaptor_CreateDim" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NetCDFAdaptor_CreateDim" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      (arg1)->CreateDim((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_DimFromDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  GridField *arg3 = (GridField *) 0 ;
  Dim_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NetCDFAdaptor_DimFromDim",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_DimFromDim" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NetCDFAdaptor_DimFromDim" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NetCDFAdaptor_DimFromDim" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NetCDFAdaptor_DimFromDim" "', argument " "3"" of type '" "GridField *""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NetCDFAdaptor_DimFromDim" "', argument " "4"" of type '" "Dim_t""'");
  } 
  arg4 = static_cast< Dim_t >(val4);
  {
    try {
      (arg1)->DimFromDim((std::string const &)*arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_VarFromAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  GridField *arg3 = (GridField *) 0 ;
  Dim_t arg4 ;
  std::vector< std::string > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:NetCDFAdaptor_VarFromAttribute",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "3"" of type '" "GridField *""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "4"" of type '" "Dim_t""'");
  } 
  arg4 = static_cast< Dim_t >(val4);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res5 = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "5"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NetCDFAdaptor_VarFromAttribute" "', argument " "5"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      (arg1)->VarFromAttribute((std::string const &)*arg2,arg3,arg4,(std::vector< std::string > const &)*arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_VarFromIncidence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  GridField *arg3 = (GridField *) 0 ;
  Dim_t arg4 ;
  Dim_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:NetCDFAdaptor_VarFromIncidence",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "3"" of type '" "GridField *""'"); 
  }
  arg3 = reinterpret_cast< GridField * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "4"" of type '" "Dim_t""'");
  } 
  arg4 = static_cast< Dim_t >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "6"" of type '" "std::string""'"); 
    }
    arg6 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj6, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_VarFromIncidence" "', argument " "7"" of type '" "std::string""'"); 
    }
    arg7 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->VarFromIncidence((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_mapType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  NcType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NetCDFAdaptor_mapType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NetCDFAdaptor_mapType" "', argument " "1"" of type '" "Type""'");
  } 
  arg1 = static_cast< Type >(val1);
  {
    try {
      result = NetCDFAdaptor::mapType(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new NcType(static_cast< const NcType& >(result))), SWIGTYPE_p_NcType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_mapType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcType arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NetCDFAdaptor_mapType",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NcType,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_mapType" "', argument " "1"" of type '" "NcType""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NetCDFAdaptor_mapType" "', argument " "1"" of type '" "NcType""'");
    } else {
      NcType * temp = reinterpret_cast< NcType * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (Type)NetCDFAdaptor::mapType(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_mapType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NcType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NetCDFAdaptor_mapType__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_NetCDFAdaptor_mapType__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'NetCDFAdaptor_mapType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    mapType(Type)\n"
    "    NetCDFAdaptor::mapType(NcType)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_HasDim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NetCDFAdaptor_HasDim",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_HasDim" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_HasDim" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)NetCDFAdaptor::HasDim(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_HasVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NetCDFAdaptor_HasVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_HasVar" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_HasVar" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)NetCDFAdaptor::HasVar(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NetCDFAdaptor_HasAttr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NcFile *arg1 = (NcFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NetCDFAdaptor_HasAttr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NcFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NetCDFAdaptor_HasAttr" "', argument " "1"" of type '" "NcFile *""'"); 
  }
  arg1 = reinterpret_cast< NcFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "NetCDFAdaptor_HasAttr" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (bool)NetCDFAdaptor::HasAttr(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NetCDFAdaptor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NetCDFAdaptor *arg1 = (NetCDFAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NetCDFAdaptor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NetCDFAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NetCDFAdaptor" "', argument " "1"" of type '" "NetCDFAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< NetCDFAdaptor * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NetCDFAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NetCDFAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ScanOp_filename_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanOp *arg1 = (ScanOp *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScanOp_filename_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanOp_filename_set" "', argument " "1"" of type '" "ScanOp *""'"); 
  }
  arg1 = reinterpret_cast< ScanOp * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScanOp_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScanOp_filename_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->filename = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanOp_filename_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanOp *arg1 = (ScanOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScanOp_filename_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanOp_filename_get" "', argument " "1"" of type '" "ScanOp *""'"); 
  }
  arg1 = reinterpret_cast< ScanOp * >(argp1);
  result = (std::string *) & ((arg1)->filename);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanOp_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanOp *arg1 = (ScanOp *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScanOp_offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanOp_offset_set" "', argument " "1"" of type '" "ScanOp *""'"); 
  }
  arg1 = reinterpret_cast< ScanOp * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScanOp_offset_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanOp_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanOp *arg1 = (ScanOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScanOp_offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanOp_offset_get" "', argument " "1"" of type '" "ScanOp *""'"); 
  }
  arg1 = reinterpret_cast< ScanOp * >(argp1);
  result = (long) ((arg1)->offset);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScanOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanOp *arg1 = (ScanOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScanOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScanOp" "', argument " "1"" of type '" "ScanOp *""'"); 
  }
  arg1 = reinterpret_cast< ScanOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScanOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ScanOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScanInternal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  long arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ScanInternal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ScanInternal",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ScanInternal" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScanInternal" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = (ScanInternal *)new ScanInternal(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScanInternal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScanInternal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  ScanInternal *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScanInternal",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ScanInternal" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ScanInternal *)new ScanInternal(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ScanInternal, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScanInternal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScanInternal__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScanInternal__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScanInternal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ScanInternal(std::string,long)\n"
    "    ScanInternal(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanInternal_setFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanInternal *arg1 = (ScanInternal *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScanInternal_setFileName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanInternal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanInternal_setFileName" "', argument " "1"" of type '" "ScanInternal *""'"); 
  }
  arg1 = reinterpret_cast< ScanInternal * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScanInternal_setFileName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->setFileName(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanInternal_setRawBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanInternal *arg1 = (ScanInternal *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScanInternal_setRawBytes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanInternal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanInternal_setRawBytes" "', argument " "1"" of type '" "ScanInternal *""'"); 
  }
  arg1 = reinterpret_cast< ScanInternal * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ScanInternal_setRawBytes" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->setRawBytes(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanInternal_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanInternal *arg1 = (ScanInternal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScanInternal_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanInternal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanInternal_Execute" "', argument " "1"" of type '" "ScanInternal *""'"); 
  }
  arg1 = reinterpret_cast< ScanInternal * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScanInternal_Scan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  istream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScanInternal_Scan",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_istream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScanInternal_Scan" "', argument " "1"" of type '" "istream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScanInternal_Scan" "', argument " "1"" of type '" "istream &""'"); 
  }
  arg1 = reinterpret_cast< istream * >(argp1);
  {
    try {
      result = (GridField *)ScanInternal::Scan(*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScanInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ScanInternal *arg1 = (ScanInternal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScanInternal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ScanInternal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScanInternal" "', argument " "1"" of type '" "ScanInternal *""'"); 
  }
  arg1 = reinterpret_cast< ScanInternal * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScanInternal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ScanInternal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AccumulateOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  AccumulateOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_AccumulateOp",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AccumulateOp" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AccumulateOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AccumulateOp" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AccumulateOp" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AccumulateOp" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (AccumulateOp *)new AccumulateOp(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AccumulateOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccumulateOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AccumulateOp *arg1 = (AccumulateOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AccumulateOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AccumulateOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccumulateOp_Execute" "', argument " "1"" of type '" "AccumulateOp *""'"); 
  }
  arg1 = reinterpret_cast< AccumulateOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccumulateOp_Accumulate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AccumulateOp_Accumulate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccumulateOp_Accumulate" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AccumulateOp_Accumulate" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AccumulateOp_Accumulate" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AccumulateOp_Accumulate" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AccumulateOp_Accumulate" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AccumulateOp_Accumulate" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    try {
      result = (GridField *)AccumulateOp::Accumulate(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccumulateOp_SetOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AccumulateOp *arg1 = (AccumulateOp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AccumulateOp_SetOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AccumulateOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccumulateOp_SetOffset" "', argument " "1"" of type '" "AccumulateOp *""'"); 
  }
  arg1 = reinterpret_cast< AccumulateOp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AccumulateOp_SetOffset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetOffset(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccumulateOp_position_offset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AccumulateOp *arg1 = (AccumulateOp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AccumulateOp_position_offset_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AccumulateOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccumulateOp_position_offset_set" "', argument " "1"" of type '" "AccumulateOp *""'"); 
  }
  arg1 = reinterpret_cast< AccumulateOp * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AccumulateOp_position_offset_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->position_offset = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AccumulateOp_position_offset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AccumulateOp *arg1 = (AccumulateOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AccumulateOp_position_offset_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AccumulateOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AccumulateOp_position_offset_get" "', argument " "1"" of type '" "AccumulateOp *""'"); 
  }
  arg1 = reinterpret_cast< AccumulateOp * >(argp1);
  result = (int) ((arg1)->position_offset);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AccumulateOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AccumulateOp *arg1 = (AccumulateOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AccumulateOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AccumulateOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AccumulateOp" "', argument " "1"" of type '" "AccumulateOp *""'"); 
  }
  arg1 = reinterpret_cast< AccumulateOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AccumulateOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AccumulateOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_debug_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr arg1 = (UnTypedPtr) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:debug_set",&obj0)) SWIG_fail;
  {
    arg1 = (UnTypedPtr) obj0;
  }
  {
    try {
      debug_set(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AssignmentFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssignmentFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssignmentFunction" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction_T_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_T_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_T_set" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  if (arg1) (arg1)->T = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction_T_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_T_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (GridField *) ((arg1)->T);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_S_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction_S_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_S_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_S_set" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  if (arg1) (arg1)->S = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_S_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction_S_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_S_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (GridField *) ((arg1)->S);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction__i_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction__i_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction__i_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AssignmentFunction__i_set" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  if (arg1) (arg1)->_i = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction__i_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dim_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction__i_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction__i_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (Dim_t) ((arg1)->_i);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction__j_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  Dim_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction__j_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction__j_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AssignmentFunction__j_set" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  if (arg1) (arg1)->_j = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction__j_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dim_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction__j_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction__j_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (Dim_t) ((arg1)->_j);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_dstarget_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  Dataset *arg2 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction_dstarget_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_dstarget_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Dataset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_dstarget_set" "', argument " "2"" of type '" "Dataset const *""'"); 
  }
  arg2 = reinterpret_cast< Dataset * >(argp2);
  if (arg1) (arg1)->dstarget = (Dataset const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_dstarget_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction_dstarget_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_dstarget_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (Dataset *) ((arg1)->dstarget);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dataset, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_dssource_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  Dataset *arg2 = (Dataset *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction_dssource_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_dssource_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Dataset, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_dssource_set" "', argument " "2"" of type '" "Dataset const *""'"); 
  }
  arg2 = reinterpret_cast< Dataset * >(argp2);
  if (arg1) (arg1)->dssource = (Dataset const *)arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_dssource_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Dataset *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction_dssource_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_dssource_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (Dataset *) ((arg1)->dssource);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Dataset, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_schtarget_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction_schtarget_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_schtarget_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_schtarget_set" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  if (arg1) (arg1)->schtarget = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_schtarget_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction_schtarget_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_schtarget_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (Scheme *)& ((arg1)->schtarget);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_schsource_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AssignmentFunction_schsource_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_schsource_set" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_schsource_set" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  if (arg1) (arg1)->schsource = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_schsource_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentFunction_schsource_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_schsource_get" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  result = (Scheme *)& ((arg1)->schsource);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AssignmentFunction_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction_setEnvironment" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AssignmentFunction_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AssignmentFunction_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AssignmentFunction_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AssignmentFunction_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentFunction___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = (AssignmentFunction *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AssignmentFunction___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentFunction___call__" "', argument " "1"" of type '" "AssignmentFunction *""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AssignmentFunction___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AssignmentFunction___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AssignmentFunction___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AssignmentFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AssignmentFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_AggregationFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregationFunction *arg1 = (AggregationFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AggregationFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AggregationFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AggregationFunction" "', argument " "1"" of type '" "AggregationFunction *""'"); 
  }
  arg1 = reinterpret_cast< AggregationFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AggregationFunction_setScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregationFunction *arg1 = (AggregationFunction *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AggregationFunction_setScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AggregationFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AggregationFunction_setScheme" "', argument " "1"" of type '" "AggregationFunction *""'"); 
  }
  arg1 = reinterpret_cast< AggregationFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AggregationFunction_setScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      (arg1)->setScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AggregationFunction_getOutScheme__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregationFunction *arg1 = (AggregationFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AggregationFunction_getOutScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AggregationFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AggregationFunction_getOutScheme" "', argument " "1"" of type '" "AggregationFunction *""'"); 
  }
  arg1 = reinterpret_cast< AggregationFunction * >(argp1);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AggregationFunction_getOutScheme__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregationFunction *arg1 = (AggregationFunction *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AggregationFunction_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AggregationFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AggregationFunction_getOutScheme" "', argument " "1"" of type '" "AggregationFunction *""'"); 
  }
  arg1 = reinterpret_cast< AggregationFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AggregationFunction_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AggregationFunction_getOutScheme(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AggregationFunction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AggregationFunction_getOutScheme__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AggregationFunction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Scheme, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AggregationFunction_getOutScheme__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AggregationFunction_getOutScheme'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getOutScheme(AggregationFunction *)\n"
    "    getOutScheme(AggregationFunction *,Scheme *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AggregationFunction___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregationFunction *arg1 = (AggregationFunction *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AggregationFunction___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AggregationFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AggregationFunction___call__" "', argument " "1"" of type '" "AggregationFunction *""'"); 
  }
  arg1 = reinterpret_cast< AggregationFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AggregationFunction___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AggregationFunction___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AggregationFunction___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AggregationFunction___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AggregationFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AggregationFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AggregateOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  Dim_t arg2 ;
  AssignmentFunction *arg3 = (AssignmentFunction *) 0 ;
  AggregationFunction *arg4 = (AggregationFunction *) 0 ;
  GridFieldOperator *arg5 = (GridFieldOperator *) 0 ;
  Dim_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  AggregateOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_AggregateOp",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AggregateOp" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AggregateOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_AggregateOp" "', argument " "3"" of type '" "AssignmentFunction *""'"); 
  }
  arg3 = reinterpret_cast< AssignmentFunction * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_AggregationFunction, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_AggregateOp" "', argument " "4"" of type '" "AggregationFunction *""'"); 
  }
  arg4 = reinterpret_cast< AggregationFunction * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_AggregateOp" "', argument " "5"" of type '" "GridFieldOperator *""'"); 
  }
  arg5 = reinterpret_cast< GridFieldOperator * >(argp5);
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_AggregateOp" "', argument " "6"" of type '" "Dim_t""'");
  } 
  arg6 = static_cast< Dim_t >(val6);
  {
    try {
      result = (AggregateOp *)new AggregateOp(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AggregateOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AggregateOp_Aggregate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  AssignmentFunction *arg3 = 0 ;
  AggregationFunction *arg4 = 0 ;
  GridField *arg5 = (GridField *) 0 ;
  Dim_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AggregateOp_Aggregate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AggregateOp_Aggregate" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AggregateOp_Aggregate" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AggregateOp_Aggregate" "', argument " "3"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AggregateOp_Aggregate" "', argument " "3"" of type '" "AssignmentFunction &""'"); 
  }
  arg3 = reinterpret_cast< AssignmentFunction * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_AggregationFunction,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AggregateOp_Aggregate" "', argument " "4"" of type '" "AggregationFunction &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AggregateOp_Aggregate" "', argument " "4"" of type '" "AggregationFunction &""'"); 
  }
  arg4 = reinterpret_cast< AggregationFunction * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "AggregateOp_Aggregate" "', argument " "5"" of type '" "GridField *""'"); 
  }
  arg5 = reinterpret_cast< GridField * >(argp5);
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AggregateOp_Aggregate" "', argument " "6"" of type '" "Dim_t""'");
  } 
  arg6 = static_cast< Dim_t >(val6);
  {
    try {
      result = (GridField *)AggregateOp::Aggregate(arg1,arg2,*arg3,*arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AggregateOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregateOp *arg1 = (AggregateOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AggregateOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_AggregateOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AggregateOp" "', argument " "1"" of type '" "AggregateOp *""'"); 
  }
  arg1 = reinterpret_cast< AggregateOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AggregateOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_AggregateOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_euclid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:euclid",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "euclid" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "euclid" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "euclid" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "euclid" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      result = (float)Aggregate::euclid(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_euclid3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float val1 ;
  int ecode1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:euclid3D",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "euclid3D" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "euclid3D" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "euclid3D" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "euclid3D" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "euclid3D" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_float(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "euclid3D" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  {
    try {
      result = (float)Aggregate::euclid3D(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_dotwo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AggregationFunction *arg1 = 0 ;
  AggregationFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::dotwo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_dotwo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_AggregationFunction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_dotwo" "', argument " "1"" of type '" "AggregationFunction &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dotwo" "', argument " "1"" of type '" "AggregationFunction &""'"); 
  }
  arg1 = reinterpret_cast< AggregationFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AggregationFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_dotwo" "', argument " "2"" of type '" "AggregationFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_dotwo" "', argument " "2"" of type '" "AggregationFunction &""'"); 
  }
  arg2 = reinterpret_cast< AggregationFunction * >(argp2);
  {
    try {
      result = (Aggregate::dotwo *)new Aggregate::dotwo(*arg1,*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__dotwo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dotwo___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::dotwo *arg1 = (Aggregate::dotwo *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:dotwo___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__dotwo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dotwo___call__" "', argument " "1"" of type '" "Aggregate::dotwo *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::dotwo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dotwo___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotwo___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dotwo___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotwo___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dotwo_mergeTuples(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::dotwo *arg1 = (Aggregate::dotwo *) 0 ;
  Tuple *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  Scheme *arg4 = (Scheme *) 0 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dotwo_mergeTuples",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__dotwo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dotwo_mergeTuples" "', argument " "1"" of type '" "Aggregate::dotwo *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::dotwo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dotwo_mergeTuples" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotwo_mergeTuples" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  arg2 = reinterpret_cast< Tuple * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dotwo_mergeTuples" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotwo_mergeTuples" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dotwo_mergeTuples" "', argument " "4"" of type '" "Scheme *""'"); 
  }
  arg4 = reinterpret_cast< Scheme * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dotwo_mergeTuples" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->mergeTuples(*arg2,*arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dotwo_mergeSchemes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::dotwo *arg1 = (Aggregate::dotwo *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  Scheme *arg3 = (Scheme *) 0 ;
  Scheme *arg4 = (Scheme *) 0 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:dotwo_mergeSchemes",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__dotwo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dotwo_mergeSchemes" "', argument " "1"" of type '" "Aggregate::dotwo *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::dotwo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dotwo_mergeSchemes" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dotwo_mergeSchemes" "', argument " "3"" of type '" "Scheme *""'"); 
  }
  arg3 = reinterpret_cast< Scheme * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dotwo_mergeSchemes" "', argument " "4"" of type '" "Scheme *""'"); 
  }
  arg4 = reinterpret_cast< Scheme * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dotwo_mergeSchemes" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->mergeSchemes(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_dotwo_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::dotwo *arg1 = (Aggregate::dotwo *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:dotwo_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__dotwo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dotwo_getOutScheme" "', argument " "1"" of type '" "Aggregate::dotwo *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::dotwo * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dotwo_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_dotwo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::dotwo *arg1 = (Aggregate::dotwo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_dotwo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__dotwo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_dotwo" "', argument " "1"" of type '" "Aggregate::dotwo *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::dotwo * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *dotwo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__dotwo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Any__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  int arg3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Aggregate::Any *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Any",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Any" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Any" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Any" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Aggregate::Any *)new Aggregate::Any(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__Any, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Any__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::Any *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Any",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Any" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Any" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::Any *)new Aggregate::Any(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__Any, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Any__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::Any *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Any",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Any" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::Any *)new Aggregate::Any(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__Any, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Any(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Any__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Any__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Any__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Any'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::Any(std::string,std::string,int)\n"
    "    Aggregate::Any(std::string,int)\n"
    "    Aggregate::Any(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Any___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Any *arg1 = (Aggregate::Any *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Any___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__Any, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Any___call__" "', argument " "1"" of type '" "Aggregate::Any *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::Any * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Any___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Any___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Any___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Any___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Any_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Any *arg1 = (Aggregate::Any *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Any_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__Any, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Any_getOutScheme" "', argument " "1"" of type '" "Aggregate::Any *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::Any * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Any_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Any(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Any *arg1 = (Aggregate::Any *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Any",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__Any, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Any" "', argument " "1"" of type '" "Aggregate::Any *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::Any * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Any_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__Any, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Count___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Count *arg1 = (Aggregate::Count *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Count___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__Count, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Count___call__" "', argument " "1"" of type '" "Aggregate::Count *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::Count * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Count___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Count___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Count___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Count___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Count_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Count *arg1 = (Aggregate::Count *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Count_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__Count, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Count_getOutScheme" "', argument " "1"" of type '" "Aggregate::Count *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::Count * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Count_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Count *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Count")) SWIG_fail;
  {
    try {
      result = (Aggregate::Count *)new Aggregate::Count();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__Count, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::Count *arg1 = (Aggregate::Count *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Count",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__Count, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Count" "', argument " "1"" of type '" "Aggregate::Count *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::Count * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Count_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__Count, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::area *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_area",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_area" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::area *)new Aggregate::area(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__area, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_area___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::area *arg1 = (Aggregate::area *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:area___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area___call__" "', argument " "1"" of type '" "Aggregate::area *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::area * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "area___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "area___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_area_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::area *arg1 = (Aggregate::area *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:area_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__area, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_getOutScheme" "', argument " "1"" of type '" "Aggregate::area *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::area * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::area *arg1 = (Aggregate::area *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__area, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_area" "', argument " "1"" of type '" "Aggregate::area *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::area * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *area_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__area, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_mkvector_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::mkvector *arg1 = (Aggregate::mkvector *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mkvector_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__mkvector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mkvector_attr_set" "', argument " "1"" of type '" "Aggregate::mkvector *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::mkvector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mkvector_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mkvector_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mkvector_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::mkvector *arg1 = (Aggregate::mkvector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mkvector_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__mkvector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mkvector_attr_get" "', argument " "1"" of type '" "Aggregate::mkvector *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::mkvector * >(argp1);
  result = (std::string *) & ((arg1)->attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_mkvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::mkvector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_mkvector",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_mkvector" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::mkvector *)new Aggregate::mkvector(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__mkvector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mkvector___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::mkvector *arg1 = (Aggregate::mkvector *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mkvector___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__mkvector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mkvector___call__" "', argument " "1"" of type '" "Aggregate::mkvector *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::mkvector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mkvector___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mkvector___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mkvector___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mkvector___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mkvector_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::mkvector *arg1 = (Aggregate::mkvector *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mkvector_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__mkvector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mkvector_getOutScheme" "', argument " "1"" of type '" "Aggregate::mkvector *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::mkvector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mkvector_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_mkvector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::mkvector *arg1 = (Aggregate::mkvector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_mkvector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__mkvector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mkvector" "', argument " "1"" of type '" "Aggregate::mkvector *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::mkvector * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *mkvector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__mkvector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_triweights___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triweights *arg1 = (Aggregate::triweights *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:triweights___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triweights, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triweights___call__" "', argument " "1"" of type '" "Aggregate::triweights *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triweights * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triweights___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triweights___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "triweights___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "triweights___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_triweights_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triweights *arg1 = (Aggregate::triweights *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:triweights_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triweights, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "triweights_getOutScheme" "', argument " "1"" of type '" "Aggregate::triweights *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triweights * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "triweights_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_triweights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triweights *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_triweights")) SWIG_fail;
  {
    try {
      result = (Aggregate::triweights *)new Aggregate::triweights();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__triweights, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_triweights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triweights *arg1 = (Aggregate::triweights *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_triweights",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triweights, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_triweights" "', argument " "1"" of type '" "Aggregate::triweights *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triweights * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *triweights_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__triweights, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_interpolate3D_attrs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate3D *arg1 = (Aggregate::interpolate3D *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interpolate3D_attrs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate3D_attrs_set" "', argument " "1"" of type '" "Aggregate::interpolate3D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate3D_attrs_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (arg1)->attrs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate3D_attrs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate3D *arg1 = (Aggregate::interpolate3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:interpolate3D_attrs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate3D_attrs_get" "', argument " "1"" of type '" "Aggregate::interpolate3D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate3D * >(argp1);
  result = (std::vector< std::string > *)& ((arg1)->attrs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::interpolate3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_interpolate3D",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate3D" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::interpolate3D *)new Aggregate::interpolate3D(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate3D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Aggregate::interpolate3D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_interpolate3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_interpolate3D" "', argument " "1"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_interpolate3D" "', argument " "1"" of type '" "std::vector< std::string > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try {
      result = (Aggregate::interpolate3D *)new Aggregate::interpolate3D(*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate3D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate3D(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_interpolate3D__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_interpolate3D__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_interpolate3D'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::interpolate3D(std::string)\n"
    "    Aggregate::interpolate3D(std::vector< std::string > &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate3D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate3D *arg1 = (Aggregate::interpolate3D *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:interpolate3D___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate3D___call__" "', argument " "1"" of type '" "Aggregate::interpolate3D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate3D___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate3D___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolate3D___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate3D___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate3D_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate3D *arg1 = (Aggregate::interpolate3D *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interpolate3D_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate3D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate3D_getOutScheme" "', argument " "1"" of type '" "Aggregate::interpolate3D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate3D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate3D_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_interpolate3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate3D *arg1 = (Aggregate::interpolate3D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interpolate3D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate3D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interpolate3D" "', argument " "1"" of type '" "Aggregate::interpolate3D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate3D * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interpolate3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__interpolate3D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_interpolate2D_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate2D *arg1 = (Aggregate::interpolate2D *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interpolate2D_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate2D_attr_set" "', argument " "1"" of type '" "Aggregate::interpolate2D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate2D * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate2D_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate2D_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate2D_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate2D *arg1 = (Aggregate::interpolate2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:interpolate2D_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate2D_attr_get" "', argument " "1"" of type '" "Aggregate::interpolate2D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate2D * >(argp1);
  result = (std::string *) & ((arg1)->attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::interpolate2D *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_interpolate2D",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate2D" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::interpolate2D *)new Aggregate::interpolate2D(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate2D, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate2D___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate2D *arg1 = (Aggregate::interpolate2D *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:interpolate2D___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate2D___call__" "', argument " "1"" of type '" "Aggregate::interpolate2D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate2D___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate2D___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolate2D___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate2D___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate2D_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate2D *arg1 = (Aggregate::interpolate2D *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interpolate2D_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate2D, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate2D_getOutScheme" "', argument " "1"" of type '" "Aggregate::interpolate2D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate2D * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate2D_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_interpolate2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate2D *arg1 = (Aggregate::interpolate2D *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interpolate2D",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate2D, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interpolate2D" "', argument " "1"" of type '" "Aggregate::interpolate2D *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate2D * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interpolate2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__interpolate2D, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_first__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::first *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_first",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_first" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::first *)new Aggregate::first(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__first, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_first__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::first *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_first",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_first" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_first" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::first *)new Aggregate::first(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__first, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_first__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  float arg1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Aggregate::first *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_first",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_first" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    try {
      result = (Aggregate::first *)new Aggregate::first(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__first, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_first__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::first *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_first")) SWIG_fail;
  {
    try {
      result = (Aggregate::first *)new Aggregate::first();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__first, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_first(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_first__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_first__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_first__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_first__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_first'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::first(std::string)\n"
    "    Aggregate::first(std::string,float)\n"
    "    Aggregate::first(float)\n"
    "    Aggregate::first()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_first___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::first *arg1 = (Aggregate::first *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:first___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__first, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "first___call__" "', argument " "1"" of type '" "Aggregate::first *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::first * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "first___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "first___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "first___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "first___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_first_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::first *arg1 = (Aggregate::first *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:first_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__first, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "first_getOutScheme" "', argument " "1"" of type '" "Aggregate::first *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::first * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "first_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::first *arg1 = (Aggregate::first *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_first",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__first, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_first" "', argument " "1"" of type '" "Aggregate::first *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::first * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *first_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__first, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::statistics *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_statistics",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_statistics" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::statistics *)new Aggregate::statistics(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__statistics, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_statistics___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::statistics *arg1 = (Aggregate::statistics *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:statistics___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__statistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "statistics___call__" "', argument " "1"" of type '" "Aggregate::statistics *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::statistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "statistics___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "statistics___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "statistics___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "statistics___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_statistics_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::statistics *arg1 = (Aggregate::statistics *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:statistics_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__statistics, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "statistics_getOutScheme" "', argument " "1"" of type '" "Aggregate::statistics *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::statistics * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "statistics_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_statistics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::statistics *arg1 = (Aggregate::statistics *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_statistics",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__statistics, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_statistics" "', argument " "1"" of type '" "Aggregate::statistics *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::statistics * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *statistics_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__statistics, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_project_attrs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::project *arg1 = (Aggregate::project *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:project_attrs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_attrs_set" "', argument " "1"" of type '" "Aggregate::project *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::project * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "project_attrs_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->attrs = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_attrs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::project *arg1 = (Aggregate::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:project_attrs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_attrs_get" "', argument " "1"" of type '" "Aggregate::project *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::project * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->attrs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_project__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::project *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_project",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_project" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::project *)new Aggregate::project(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__project, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_project__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::project *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_project",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_project" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::project *)new Aggregate::project(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__project, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_project(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_project__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_project__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_project'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::project(std::vector< std::string,std::allocator< std::string > >)\n"
    "    Aggregate::project(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_project___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::project *arg1 = (Aggregate::project *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:project___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project___call__" "', argument " "1"" of type '" "Aggregate::project *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::project * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "project___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "project___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "project___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "project___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_project_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::project *arg1 = (Aggregate::project *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:project_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__project, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "project_getOutScheme" "', argument " "1"" of type '" "Aggregate::project *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::project * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "project_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::project *arg1 = (Aggregate::project *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_project",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__project, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_project" "', argument " "1"" of type '" "Aggregate::project *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::project * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *project_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__project, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Type arg1 ;
  UnTypedPtr arg2 = (UnTypedPtr) 0 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:equal",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "equal" "', argument " "1"" of type '" "Type""'");
  } 
  arg1 = static_cast< Type >(val1);
  {
    arg2 = (UnTypedPtr) obj1;
  }
  {
    arg3 = (UnTypedPtr) obj2;
  }
  {
    try {
      result = (bool)Assign::equal(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TestCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned long arg1 ;
  void *arg2 = (void *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TestCallback",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TestCallback" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TestCallback" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    try {
      result = (bool)Assign::TestCallback(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pnpoly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:pnpoly",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnpoly" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (float) PyFloat_AsDouble(o);
    }
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnpoly" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pnpoly" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  {
    try {
      result = (int)Assign::pnpoly(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Both_left_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  AssignmentFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Both_left_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Both_left_set" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Both_left_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Both_left_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  arg2 = reinterpret_cast< AssignmentFunction * >(argp2);
  if (arg1) (arg1)->left = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Both_left_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  AssignmentFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Both_left_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Both_left_get" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  result = (AssignmentFunction *) &(AssignmentFunction &) ((arg1)->left);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Both_right_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  AssignmentFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Both_right_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Both_right_set" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Both_right_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Both_right_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  arg2 = reinterpret_cast< AssignmentFunction * >(argp2);
  if (arg1) (arg1)->right = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Both_right_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  AssignmentFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Both_right_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Both_right_get" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  result = (AssignmentFunction *) &(AssignmentFunction &) ((arg1)->right);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Both(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = 0 ;
  AssignmentFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Assign::Both *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Both",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Both" "', argument " "1"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Both" "', argument " "1"" of type '" "AssignmentFunction &""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Both" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Both" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  arg2 = reinterpret_cast< AssignmentFunction * >(argp2);
  {
    try {
      result = (Assign::Both *)new Assign::Both(*arg1,*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__Both, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Both___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Both___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Both___call__" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Both___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Both___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Both___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Both_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Both_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Both_setEnvironment" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Both_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Both_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Both_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Both_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Both(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Both *arg1 = (Assign::Both *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Both",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Both, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Both" "', argument " "1"" of type '" "Assign::Both *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Both * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Both_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__Both, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Either_left_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  AssignmentFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Either_left_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Either_left_set" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Either_left_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Either_left_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  arg2 = reinterpret_cast< AssignmentFunction * >(argp2);
  if (arg1) (arg1)->left = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Either_left_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  AssignmentFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Either_left_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Either_left_get" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  result = (AssignmentFunction *) &(AssignmentFunction &) ((arg1)->left);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Either_right_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  AssignmentFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Either_right_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Either_right_set" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Either_right_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Either_right_set" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  arg2 = reinterpret_cast< AssignmentFunction * >(argp2);
  if (arg1) (arg1)->right = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Either_right_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  AssignmentFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Either_right_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Either_right_get" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  result = (AssignmentFunction *) &(AssignmentFunction &) ((arg1)->right);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AssignmentFunction, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Either(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  AssignmentFunction *arg1 = 0 ;
  AssignmentFunction *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Assign::Either *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Either",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Either" "', argument " "1"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Either" "', argument " "1"" of type '" "AssignmentFunction &""'"); 
  }
  arg1 = reinterpret_cast< AssignmentFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_AssignmentFunction,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Either" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Either" "', argument " "2"" of type '" "AssignmentFunction &""'"); 
  }
  arg2 = reinterpret_cast< AssignmentFunction * >(argp2);
  {
    try {
      result = (Assign::Either *)new Assign::Either(*arg1,*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__Either, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Either___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Either___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Either___call__" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Either___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Either___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Either___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Either_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Either_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Either_setEnvironment" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Either_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Either_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Either_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Either_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Either(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Either *arg1 = (Assign::Either *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Either",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Either, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Either" "', argument " "1"" of type '" "Assign::Either *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Either * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Either_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__Either, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IncidentTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::IncidentTo *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IncidentTo")) SWIG_fail;
  {
    try {
      result = (Assign::IncidentTo *)new Assign::IncidentTo();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__IncidentTo, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncidentTo___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::IncidentTo *arg1 = (Assign::IncidentTo *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IncidentTo___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__IncidentTo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncidentTo___call__" "', argument " "1"" of type '" "Assign::IncidentTo *""'"); 
  }
  arg1 = reinterpret_cast< Assign::IncidentTo * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncidentTo___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IncidentTo___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IncidentTo___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncidentTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::IncidentTo *arg1 = (Assign::IncidentTo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IncidentTo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__IncidentTo, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncidentTo" "', argument " "1"" of type '" "Assign::IncidentTo *""'"); 
  }
  arg1 = reinterpret_cast< Assign::IncidentTo * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncidentTo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__IncidentTo, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Nodes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Nodes")) SWIG_fail;
  {
    try {
      result = (Assign::Nodes *)new Assign::Nodes();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__Nodes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nodes___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Nodes *arg1 = (Assign::Nodes *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Nodes___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Nodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nodes___call__" "', argument " "1"" of type '" "Assign::Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Nodes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nodes___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Nodes___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Nodes___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::Nodes *arg1 = (Assign::Nodes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Nodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__Nodes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Nodes" "', argument " "1"" of type '" "Assign::Nodes *""'"); 
  }
  arg1 = reinterpret_cast< Assign::Nodes * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Nodes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__Nodes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_adjacentNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dim_t arg1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Assign::adjacentNodes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_adjacentNodes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_adjacentNodes" "', argument " "1"" of type '" "Dim_t""'");
  } 
  arg1 = static_cast< Dim_t >(val1);
  {
    try {
      result = (Assign::adjacentNodes *)new Assign::adjacentNodes(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__adjacentNodes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_adjacentNodes_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacentNodes *arg1 = (Assign::adjacentNodes *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:adjacentNodes_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__adjacentNodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adjacentNodes_setEnvironment" "', argument " "1"" of type '" "Assign::adjacentNodes *""'"); 
  }
  arg1 = reinterpret_cast< Assign::adjacentNodes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adjacentNodes_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "adjacentNodes_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "adjacentNodes_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "adjacentNodes_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_adjacentNodes___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacentNodes *arg1 = (Assign::adjacentNodes *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:adjacentNodes___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__adjacentNodes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adjacentNodes___call__" "', argument " "1"" of type '" "Assign::adjacentNodes *""'"); 
  }
  arg1 = reinterpret_cast< Assign::adjacentNodes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "adjacentNodes___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "adjacentNodes___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adjacentNodes___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_adjacentNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacentNodes *arg1 = (Assign::adjacentNodes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_adjacentNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__adjacentNodes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_adjacentNodes" "', argument " "1"" of type '" "Assign::adjacentNodes *""'"); 
  }
  arg1 = reinterpret_cast< Assign::adjacentNodes * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *adjacentNodes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__adjacentNodes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_adjacent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacent *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_adjacent")) SWIG_fail;
  {
    try {
      result = (Assign::adjacent *)new Assign::adjacent();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__adjacent, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_adjacent_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacent *arg1 = (Assign::adjacent *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:adjacent_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__adjacent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adjacent_setEnvironment" "', argument " "1"" of type '" "Assign::adjacent *""'"); 
  }
  arg1 = reinterpret_cast< Assign::adjacent * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "adjacent_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "adjacent_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "adjacent_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "adjacent_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_adjacent___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacent *arg1 = (Assign::adjacent *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:adjacent___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__adjacent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "adjacent___call__" "', argument " "1"" of type '" "Assign::adjacent *""'"); 
  }
  arg1 = reinterpret_cast< Assign::adjacent * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "adjacent___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "adjacent___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "adjacent___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_adjacent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::adjacent *arg1 = (Assign::adjacent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_adjacent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__adjacent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_adjacent" "', argument " "1"" of type '" "Assign::adjacent *""'"); 
  }
  arg1 = reinterpret_cast< Assign::adjacent * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *adjacent_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__adjacent, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_neighbors___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::neighbors *arg1 = (Assign::neighbors *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:neighbors___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__neighbors, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "neighbors___call__" "', argument " "1"" of type '" "Assign::neighbors *""'"); 
  }
  arg1 = reinterpret_cast< Assign::neighbors * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "neighbors___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "neighbors___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "neighbors___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_neighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::neighbors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_neighbors")) SWIG_fail;
  {
    try {
      result = (Assign::neighbors *)new Assign::neighbors();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__neighbors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_neighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::neighbors *arg1 = (Assign::neighbors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_neighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__neighbors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_neighbors" "', argument " "1"" of type '" "Assign::neighbors *""'"); 
  }
  arg1 = reinterpret_cast< Assign::neighbors * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *neighbors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__neighbors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_intervalContains_rangeattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intervalContains_rangeattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains_rangeattr_set" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intervalContains_rangeattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intervalContains_rangeattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->rangeattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intervalContains_rangeattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intervalContains_rangeattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains_rangeattr_get" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  result = (std::string *) & ((arg1)->rangeattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intervalContains_valueattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intervalContains_valueattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains_valueattr_set" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intervalContains_valueattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intervalContains_valueattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->valueattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intervalContains_valueattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intervalContains_valueattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains_valueattr_get" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  result = (std::string *) & ((arg1)->valueattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intervalContains_pointattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intervalContains_pointattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains_pointattr_set" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intervalContains_pointattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intervalContains_pointattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->pointattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intervalContains_pointattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intervalContains_pointattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains_pointattr_get" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  result = (std::string *) & ((arg1)->pointattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intervalContains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Assign::intervalContains *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_intervalContains",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intervalContains" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intervalContains" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intervalContains" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::intervalContains *)new Assign::intervalContains(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__intervalContains, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intervalContains___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intervalContains___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intervalContains___call__" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intervalContains___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "intervalContains___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intervalContains___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intervalContains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::intervalContains *arg1 = (Assign::intervalContains *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_intervalContains",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__intervalContains, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intervalContains" "', argument " "1"" of type '" "Assign::intervalContains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::intervalContains * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *intervalContains_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__intervalContains, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_byPointerSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Assign::byPointerSet *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_byPointerSet",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_byPointerSet" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_byPointerSet" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::byPointerSet *)new Assign::byPointerSet(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__byPointerSet, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_byPointerSet___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::byPointerSet *arg1 = (Assign::byPointerSet *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:byPointerSet___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__byPointerSet, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "byPointerSet___call__" "', argument " "1"" of type '" "Assign::byPointerSet *""'"); 
  }
  arg1 = reinterpret_cast< Assign::byPointerSet * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "byPointerSet___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "byPointerSet___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "byPointerSet___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_byPointerSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::byPointerSet *arg1 = (Assign::byPointerSet *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_byPointerSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__byPointerSet, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_byPointerSet" "', argument " "1"" of type '" "Assign::byPointerSet *""'"); 
  }
  arg1 = reinterpret_cast< Assign::byPointerSet * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *byPointerSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__byPointerSet, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_nearest_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::nearest *arg1 = (Assign::nearest *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:nearest_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__nearest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nearest_a_set" "', argument " "1"" of type '" "Assign::nearest *""'"); 
  }
  arg1 = reinterpret_cast< Assign::nearest * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nearest_a_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nearest_a_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->a = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nearest_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::nearest *arg1 = (Assign::nearest *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nearest_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__nearest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nearest_a_get" "', argument " "1"" of type '" "Assign::nearest *""'"); 
  }
  arg1 = reinterpret_cast< Assign::nearest * >(argp1);
  result = (std::string *) & ((arg1)->a);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nearest_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::nearest *arg1 = (Assign::nearest *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:nearest_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__nearest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nearest_b_set" "', argument " "1"" of type '" "Assign::nearest *""'"); 
  }
  arg1 = reinterpret_cast< Assign::nearest * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nearest_b_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nearest_b_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->b = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nearest_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::nearest *arg1 = (Assign::nearest *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nearest_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__nearest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nearest_b_get" "', argument " "1"" of type '" "Assign::nearest *""'"); 
  }
  arg1 = reinterpret_cast< Assign::nearest * >(argp1);
  result = (std::string *) & ((arg1)->b);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_nearest__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Assign::nearest *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_nearest",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_nearest" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_nearest" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::nearest *)new Assign::nearest(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__nearest, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_nearest__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Assign::nearest *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_nearest",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_nearest" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::nearest *)new Assign::nearest(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__nearest, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_nearest(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_nearest__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_nearest__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_nearest'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Assign::nearest(std::string,std::string)\n"
    "    Assign::nearest(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_nearest___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::nearest *arg1 = (Assign::nearest *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:nearest___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__nearest, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nearest___call__" "', argument " "1"" of type '" "Assign::nearest *""'"); 
  }
  arg1 = reinterpret_cast< Assign::nearest * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nearest___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "nearest___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nearest___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_nearest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::nearest *arg1 = (Assign::nearest *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_nearest",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__nearest, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_nearest" "', argument " "1"" of type '" "Assign::nearest *""'"); 
  }
  arg1 = reinterpret_cast< Assign::nearest * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *nearest_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__nearest, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_sortedmatch_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::sortedmatch *arg1 = (Assign::sortedmatch *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:sortedmatch_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__sortedmatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sortedmatch_setEnvironment" "', argument " "1"" of type '" "Assign::sortedmatch *""'"); 
  }
  arg1 = reinterpret_cast< Assign::sortedmatch * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sortedmatch_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "sortedmatch_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "sortedmatch_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "sortedmatch_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sortedmatch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Assign::sortedmatch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_sortedmatch",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sortedmatch" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sortedmatch" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::sortedmatch *)new Assign::sortedmatch(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__sortedmatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sortedmatch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Assign::sortedmatch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_sortedmatch",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sortedmatch" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::sortedmatch *)new Assign::sortedmatch(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__sortedmatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sortedmatch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sortedmatch__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_sortedmatch__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_sortedmatch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Assign::sortedmatch(std::string,std::string)\n"
    "    Assign::sortedmatch(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_sortedmatch___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::sortedmatch *arg1 = (Assign::sortedmatch *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sortedmatch___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__sortedmatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sortedmatch___call__" "', argument " "1"" of type '" "Assign::sortedmatch *""'"); 
  }
  arg1 = reinterpret_cast< Assign::sortedmatch * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sortedmatch___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sortedmatch___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sortedmatch___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sortedmatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::sortedmatch *arg1 = (Assign::sortedmatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_sortedmatch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__sortedmatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sortedmatch" "', argument " "1"" of type '" "Assign::sortedmatch *""'"); 
  }
  arg1 = reinterpret_cast< Assign::sortedmatch * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sortedmatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__sortedmatch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_match_Tattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::match *arg1 = (Assign::match *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:match_Tattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__match, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match_Tattr_set" "', argument " "1"" of type '" "Assign::match *""'"); 
  }
  arg1 = reinterpret_cast< Assign::match * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "match_Tattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "match_Tattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Tattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_match_Tattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::match *arg1 = (Assign::match *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:match_Tattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__match, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match_Tattr_get" "', argument " "1"" of type '" "Assign::match *""'"); 
  }
  arg1 = reinterpret_cast< Assign::match * >(argp1);
  result = (std::string *) & ((arg1)->Tattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_match_Sattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::match *arg1 = (Assign::match *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:match_Sattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__match, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match_Sattr_set" "', argument " "1"" of type '" "Assign::match *""'"); 
  }
  arg1 = reinterpret_cast< Assign::match * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "match_Sattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "match_Sattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Sattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_match_Sattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::match *arg1 = (Assign::match *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:match_Sattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__match, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match_Sattr_get" "', argument " "1"" of type '" "Assign::match *""'"); 
  }
  arg1 = reinterpret_cast< Assign::match * >(argp1);
  result = (std::string *) & ((arg1)->Sattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_match__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Assign::match *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_match",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_match" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_match" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::match *)new Assign::match(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__match, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_match__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Assign::match *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_match",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_match" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::match *)new Assign::match(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__match, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_match(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_match__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_match__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_match'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Assign::match(std::string,std::string)\n"
    "    Assign::match(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_match___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::match *arg1 = (Assign::match *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:match___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__match, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "match___call__" "', argument " "1"" of type '" "Assign::match *""'"); 
  }
  arg1 = reinterpret_cast< Assign::match * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "match___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "match___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "match___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_match(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::match *arg1 = (Assign::match *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_match",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__match, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_match" "', argument " "1"" of type '" "Assign::match *""'"); 
  }
  arg1 = reinterpret_cast< Assign::match * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *match_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__match, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pointpoly2___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly2 *arg1 = (Assign::pointpoly2 *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pointpoly2___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly2, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointpoly2___call__" "', argument " "1"" of type '" "Assign::pointpoly2 *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly2 * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pointpoly2___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pointpoly2___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pointpoly2___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pointpoly2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pointpoly2")) SWIG_fail;
  {
    try {
      result = (Assign::pointpoly2 *)new Assign::pointpoly2();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__pointpoly2, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pointpoly2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly2 *arg1 = (Assign::pointpoly2 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pointpoly2",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly2, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pointpoly2" "', argument " "1"" of type '" "Assign::pointpoly2 *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly2 * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pointpoly2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__pointpoly2, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_containedby___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::containedby *arg1 = (Assign::containedby *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:containedby___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__containedby, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "containedby___call__" "', argument " "1"" of type '" "Assign::containedby *""'"); 
  }
  arg1 = reinterpret_cast< Assign::containedby * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "containedby___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "containedby___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "containedby___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_containedby_PointInCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::containedby *arg1 = (Assign::containedby *) 0 ;
  float arg2 ;
  float arg3 ;
  CellId arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:containedby_PointInCell",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__containedby, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "containedby_PointInCell" "', argument " "1"" of type '" "Assign::containedby *""'"); 
  }
  arg1 = reinterpret_cast< Assign::containedby * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "containedby_PointInCell" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "containedby_PointInCell" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "containedby_PointInCell" "', argument " "4"" of type '" "CellId""'");
  } 
  arg4 = static_cast< CellId >(val4);
  {
    try {
      result = (bool)(arg1)->PointInCell(arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_containedby(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::containedby *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_containedby")) SWIG_fail;
  {
    try {
      result = (Assign::containedby *)new Assign::containedby();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__containedby, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_containedby(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::containedby *arg1 = (Assign::containedby *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_containedby",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__containedby, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_containedby" "', argument " "1"" of type '" "Assign::containedby *""'"); 
  }
  arg1 = reinterpret_cast< Assign::containedby * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *containedby_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__containedby, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_fastcontainedby_setEnvironment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::fastcontainedby *arg1 = (Assign::fastcontainedby *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  Dim_t arg3 ;
  GridField *arg4 = (GridField *) 0 ;
  Dim_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:fastcontainedby_setEnvironment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__fastcontainedby, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastcontainedby_setEnvironment" "', argument " "1"" of type '" "Assign::fastcontainedby *""'"); 
  }
  arg1 = reinterpret_cast< Assign::fastcontainedby * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fastcontainedby_setEnvironment" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fastcontainedby_setEnvironment" "', argument " "3"" of type '" "Dim_t""'");
  } 
  arg3 = static_cast< Dim_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "fastcontainedby_setEnvironment" "', argument " "4"" of type '" "GridField *""'"); 
  }
  arg4 = reinterpret_cast< GridField * >(argp4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fastcontainedby_setEnvironment" "', argument " "5"" of type '" "Dim_t""'");
  } 
  arg5 = static_cast< Dim_t >(val5);
  {
    try {
      (arg1)->setEnvironment(arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fastcontainedby___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::fastcontainedby *arg1 = (Assign::fastcontainedby *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:fastcontainedby___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__fastcontainedby, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fastcontainedby___call__" "', argument " "1"" of type '" "Assign::fastcontainedby *""'"); 
  }
  arg1 = reinterpret_cast< Assign::fastcontainedby * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fastcontainedby___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fastcontainedby___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fastcontainedby___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_fastcontainedby(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::fastcontainedby *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_fastcontainedby")) SWIG_fail;
  {
    try {
      result = (Assign::fastcontainedby *)new Assign::fastcontainedby();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__fastcontainedby, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_fastcontainedby(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::fastcontainedby *arg1 = (Assign::fastcontainedby *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_fastcontainedby",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__fastcontainedby, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fastcontainedby" "', argument " "1"" of type '" "Assign::fastcontainedby *""'"); 
  }
  arg1 = reinterpret_cast< Assign::fastcontainedby * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *fastcontainedby_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__fastcontainedby, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_contains___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::contains *arg1 = (Assign::contains *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:contains___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__contains, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contains___call__" "', argument " "1"" of type '" "Assign::contains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::contains * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "contains___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "contains___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "contains___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::contains *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_contains")) SWIG_fail;
  {
    try {
      result = (Assign::contains *)new Assign::contains();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__contains, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::contains *arg1 = (Assign::contains *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_contains",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__contains, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_contains" "', argument " "1"" of type '" "Assign::contains *""'"); 
  }
  arg1 = reinterpret_cast< Assign::contains * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *contains_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__contains, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_pointpoly_xs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *arg1 = (Assign::pointpoly *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pointpoly_xs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointpoly_xs_set" "', argument " "1"" of type '" "Assign::pointpoly *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pointpoly_xs_set" "', argument " "2"" of type '" "float [10]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)10; ++ii) arg1->xs[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""xs""' of type '""float [10]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pointpoly_xs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *arg1 = (Assign::pointpoly *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pointpoly_xs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointpoly_xs_get" "', argument " "1"" of type '" "Assign::pointpoly *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly * >(argp1);
  result = (float *)(float *) ((arg1)->xs);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pointpoly_ys_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *arg1 = (Assign::pointpoly *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pointpoly_ys_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointpoly_ys_set" "', argument " "1"" of type '" "Assign::pointpoly *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pointpoly_ys_set" "', argument " "2"" of type '" "float [10]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)10; ++ii) arg1->ys[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""ys""' of type '""float [10]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pointpoly_ys_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *arg1 = (Assign::pointpoly *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pointpoly_ys_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointpoly_ys_get" "', argument " "1"" of type '" "Assign::pointpoly *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly * >(argp1);
  result = (float *)(float *) ((arg1)->ys);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pointpoly___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *arg1 = (Assign::pointpoly *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:pointpoly___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pointpoly___call__" "', argument " "1"" of type '" "Assign::pointpoly *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pointpoly___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pointpoly___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pointpoly___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pointpoly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pointpoly")) SWIG_fail;
  {
    try {
      result = (Assign::pointpoly *)new Assign::pointpoly();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__pointpoly, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pointpoly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::pointpoly *arg1 = (Assign::pointpoly *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pointpoly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__pointpoly, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pointpoly" "', argument " "1"" of type '" "Assign::pointpoly *""'"); 
  }
  arg1 = reinterpret_cast< Assign::pointpoly * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pointpoly_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__pointpoly, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_inverse_pointer_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::inverse_pointer *arg1 = (Assign::inverse_pointer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inverse_pointer_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__inverse_pointer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inverse_pointer_attr_set" "', argument " "1"" of type '" "Assign::inverse_pointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::inverse_pointer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "inverse_pointer_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "inverse_pointer_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_inverse_pointer_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::inverse_pointer *arg1 = (Assign::inverse_pointer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inverse_pointer_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__inverse_pointer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inverse_pointer_attr_get" "', argument " "1"" of type '" "Assign::inverse_pointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::inverse_pointer * >(argp1);
  result = (std::string *) & ((arg1)->attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_inverse_pointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Assign::inverse_pointer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_inverse_pointer",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_inverse_pointer" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::inverse_pointer *)new Assign::inverse_pointer(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__inverse_pointer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inverse_pointer___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::inverse_pointer *arg1 = (Assign::inverse_pointer *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:inverse_pointer___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__inverse_pointer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inverse_pointer___call__" "', argument " "1"" of type '" "Assign::inverse_pointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::inverse_pointer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inverse_pointer___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "inverse_pointer___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "inverse_pointer___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_inverse_pointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::inverse_pointer *arg1 = (Assign::inverse_pointer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_inverse_pointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__inverse_pointer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_inverse_pointer" "', argument " "1"" of type '" "Assign::inverse_pointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::inverse_pointer * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *inverse_pointer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__inverse_pointer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_bypointer_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::bypointer *arg1 = (Assign::bypointer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bypointer_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__bypointer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bypointer_attr_set" "', argument " "1"" of type '" "Assign::bypointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::bypointer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bypointer_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bypointer_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bypointer_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::bypointer *arg1 = (Assign::bypointer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bypointer_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__bypointer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bypointer_attr_get" "', argument " "1"" of type '" "Assign::bypointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::bypointer * >(argp1);
  result = (std::string *) & ((arg1)->attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_bypointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Assign::bypointer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_bypointer",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_bypointer" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::bypointer *)new Assign::bypointer(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__bypointer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bypointer___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::bypointer *arg1 = (Assign::bypointer *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bypointer___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__bypointer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bypointer___call__" "', argument " "1"" of type '" "Assign::bypointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::bypointer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bypointer___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "bypointer___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "bypointer___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_bypointer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::bypointer *arg1 = (Assign::bypointer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_bypointer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__bypointer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_bypointer" "', argument " "1"" of type '" "Assign::bypointer *""'"); 
  }
  arg1 = reinterpret_cast< Assign::bypointer * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *bypointer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__bypointer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_unify___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::unify *arg1 = (Assign::unify *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:unify___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__unify, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unify___call__" "', argument " "1"" of type '" "Assign::unify *""'"); 
  }
  arg1 = reinterpret_cast< Assign::unify * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unify___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "unify___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "unify___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_unify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::unify *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_unify")) SWIG_fail;
  {
    try {
      result = (Assign::unify *)new Assign::unify();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__unify, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_unify(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::unify *arg1 = (Assign::unify *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_unify",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__unify, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_unify" "', argument " "1"" of type '" "Assign::unify *""'"); 
  }
  arg1 = reinterpret_cast< Assign::unify * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *unify_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__unify, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ident___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::ident *arg1 = (Assign::ident *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ident___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__ident, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ident___call__" "', argument " "1"" of type '" "Assign::ident *""'"); 
  }
  arg1 = reinterpret_cast< Assign::ident * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ident___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ident___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ident___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ident(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::ident *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ident")) SWIG_fail;
  {
    try {
      result = (Assign::ident *)new Assign::ident();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__ident, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ident(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::ident *arg1 = (Assign::ident *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ident",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__ident, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ident" "', argument " "1"" of type '" "Assign::ident *""'"); 
  }
  arg1 = reinterpret_cast< Assign::ident * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ident_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__ident, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_interpolate1Dint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Aggregate::interpolate1D< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_interpolate1Dint",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dint" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dint" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::interpolate1D< int > *)new Aggregate::interpolate1D< int >(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate1DT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate1Dint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Aggregate::interpolate1D< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_interpolate1Dint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dint" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dint" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_interpolate1Dint" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (Aggregate::interpolate1D< int > *)new Aggregate::interpolate1D< int >(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate1DT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate1Dint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_interpolate1Dint__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_interpolate1Dint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_interpolate1Dint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::interpolate1D< int >(std::string,std::string,std::string)\n"
    "    Aggregate::interpolate1D< int >(std::string,std::string,std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate1Dint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< int > *arg1 = (Aggregate::interpolate1D< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:interpolate1Dint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate1Dint___call__" "', argument " "1"" of type '" "Aggregate::interpolate1D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate1Dint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate1Dint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolate1Dint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate1Dint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate1Dint_interp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< int > *arg1 = (Aggregate::interpolate1D< int > *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::vector< Tuple > *arg4 = 0 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:interpolate1Dint_interp",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate1Dint_interp" "', argument " "1"" of type '" "Aggregate::interpolate1D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "interpolate1Dint_interp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "interpolate1Dint_interp" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "interpolate1Dint_interp" "', argument " "4"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate1Dint_interp" "', argument " "4"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Tuple > * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "interpolate1Dint_interp" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      result = (int)(arg1)->interp(arg2,arg3,*arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate1Dint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< int > *arg1 = (Aggregate::interpolate1D< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interpolate1Dint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate1Dint_getOutScheme" "', argument " "1"" of type '" "Aggregate::interpolate1D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate1Dint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_interpolate1Dint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< int > *arg1 = (Aggregate::interpolate1D< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interpolate1Dint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interpolate1Dint" "', argument " "1"" of type '" "Aggregate::interpolate1D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interpolate1Dint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__interpolate1DT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_interpolate1Dfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Aggregate::interpolate1D< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_interpolate1Dfloat",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dfloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dfloat" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::interpolate1D< float > *)new Aggregate::interpolate1D< float >(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate1DT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate1Dfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  float arg4 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Aggregate::interpolate1D< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_interpolate1Dfloat",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dfloat" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_interpolate1Dfloat" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_interpolate1Dfloat" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    try {
      result = (Aggregate::interpolate1D< float > *)new Aggregate::interpolate1D< float >(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__interpolate1DT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_interpolate1Dfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_interpolate1Dfloat__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_interpolate1Dfloat__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_interpolate1Dfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::interpolate1D< float >(std::string,std::string,std::string)\n"
    "    Aggregate::interpolate1D< float >(std::string,std::string,std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate1Dfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< float > *arg1 = (Aggregate::interpolate1D< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:interpolate1Dfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate1Dfloat___call__" "', argument " "1"" of type '" "Aggregate::interpolate1D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate1Dfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate1Dfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "interpolate1Dfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate1Dfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate1Dfloat_interp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< float > *arg1 = (Aggregate::interpolate1D< float > *) 0 ;
  float arg2 ;
  std::string arg3 ;
  std::vector< Tuple > *arg4 = 0 ;
  float arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:interpolate1Dfloat_interp",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate1Dfloat_interp" "', argument " "1"" of type '" "Aggregate::interpolate1D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "interpolate1Dfloat_interp" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "interpolate1Dfloat_interp" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "interpolate1Dfloat_interp" "', argument " "4"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "interpolate1Dfloat_interp" "', argument " "4"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Tuple > * >(argp4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "interpolate1Dfloat_interp" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  {
    try {
      result = (float)(arg1)->interp(arg2,arg3,*arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_interpolate1Dfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< float > *arg1 = (Aggregate::interpolate1D< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:interpolate1Dfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "interpolate1Dfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::interpolate1D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "interpolate1Dfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_interpolate1Dfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::interpolate1D< float > *arg1 = (Aggregate::interpolate1D< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_interpolate1Dfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__interpolate1DT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_interpolate1Dfloat" "', argument " "1"" of type '" "Aggregate::interpolate1D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::interpolate1D< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *interpolate1Dfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__interpolate1DT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_avgint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_average< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_avgint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_avgint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_average< int > *)new Aggregate::_average< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___averageT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avgint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_average< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_avgint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_avgint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_avgint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::_average< int > *)new Aggregate::_average< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___averageT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avgint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_avgint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_avgint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_avgint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_average< int >(std::string)\n"
    "    Aggregate::_average< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_avgint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< int > *arg1 = (Aggregate::_average< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avgint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avgint___call__" "', argument " "1"" of type '" "Aggregate::_average< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avgint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avgint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avgint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avgint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avgint_average(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< int > *arg1 = (Aggregate::_average< int > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avgint_average",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avgint_average" "', argument " "1"" of type '" "Aggregate::_average< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "avgint_average" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avgint_average" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avgint_average" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (float)(arg1)->average(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avgint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< int > *arg1 = (Aggregate::_average< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avgint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avgint_getOutScheme" "', argument " "1"" of type '" "Aggregate::_average< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avgint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_avgint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< int > *arg1 = (Aggregate::_average< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_avgint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_avgint" "', argument " "1"" of type '" "Aggregate::_average< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *avgint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___averageT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_avgfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_average< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_avgfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_avgfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_average< float > *)new Aggregate::_average< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___averageT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avgfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_average< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_avgfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_avgfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_avgfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::_average< float > *)new Aggregate::_average< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___averageT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_avgfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_avgfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_avgfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_avgfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_average< float >(std::string)\n"
    "    Aggregate::_average< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_avgfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< float > *arg1 = (Aggregate::_average< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avgfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avgfloat___call__" "', argument " "1"" of type '" "Aggregate::_average< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avgfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avgfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avgfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avgfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avgfloat_average(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< float > *arg1 = (Aggregate::_average< float > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:avgfloat_average",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avgfloat_average" "', argument " "1"" of type '" "Aggregate::_average< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "avgfloat_average" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "avgfloat_average" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avgfloat_average" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (float)(arg1)->average(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_avgfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< float > *arg1 = (Aggregate::_average< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:avgfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avgfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::_average< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avgfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_avgfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_average< float > *arg1 = (Aggregate::_average< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_avgfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___averageT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_avgfloat" "', argument " "1"" of type '" "Aggregate::_average< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_average< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *avgfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___averageT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sumint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_sum< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_sumint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sumint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_sum< int > *)new Aggregate::_sum< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___sumT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sumint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_sum< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_sumint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sumint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_sumint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::_sum< int > *)new Aggregate::_sum< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___sumT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sumint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sumint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_sumint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_sumint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_sum< int >(std::string)\n"
    "    Aggregate::_sum< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_sumint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< int > *arg1 = (Aggregate::_sum< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sumint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sumint___call__" "', argument " "1"" of type '" "Aggregate::_sum< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sumint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sumint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sumint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sumint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sumint_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< int > *arg1 = (Aggregate::_sum< int > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sumint_sum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sumint_sum" "', argument " "1"" of type '" "Aggregate::_sum< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "sumint_sum" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sumint_sum" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sumint_sum" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (int)(arg1)->sum(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sumint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< int > *arg1 = (Aggregate::_sum< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sumint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sumint_getOutScheme" "', argument " "1"" of type '" "Aggregate::_sum< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sumint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sumint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< int > *arg1 = (Aggregate::_sum< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_sumint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sumint" "', argument " "1"" of type '" "Aggregate::_sum< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sumint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___sumT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_sumfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_sum< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_sumfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sumfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_sum< float > *)new Aggregate::_sum< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___sumT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sumfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_sum< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_sumfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_sumfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_sumfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::_sum< float > *)new Aggregate::_sum< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___sumT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_sumfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_sumfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_sumfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_sumfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_sum< float >(std::string)\n"
    "    Aggregate::_sum< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_sumfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< float > *arg1 = (Aggregate::_sum< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sumfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sumfloat___call__" "', argument " "1"" of type '" "Aggregate::_sum< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sumfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sumfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sumfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sumfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sumfloat_sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< float > *arg1 = (Aggregate::_sum< float > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:sumfloat_sum",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sumfloat_sum" "', argument " "1"" of type '" "Aggregate::_sum< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "sumfloat_sum" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sumfloat_sum" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "sumfloat_sum" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (float)(arg1)->sum(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_sumfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< float > *arg1 = (Aggregate::_sum< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:sumfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sumfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::_sum< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "sumfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_sumfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_sum< float > *arg1 = (Aggregate::_sum< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_sumfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___sumT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_sumfloat" "', argument " "1"" of type '" "Aggregate::_sum< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_sum< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *sumfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___sumT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_trigradint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::triGradient< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_trigradint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_trigradint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::triGradient< int > *)new Aggregate::triGradient< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__triGradientT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_trigradint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::triGradient< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_trigradint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_trigradint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_trigradint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::triGradient< int > *)new Aggregate::triGradient< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__triGradientT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_trigradint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_trigradint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_trigradint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_trigradint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::triGradient< int >(std::string)\n"
    "    Aggregate::triGradient< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_trigradint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< int > *arg1 = (Aggregate::triGradient< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:trigradint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trigradint___call__" "', argument " "1"" of type '" "Aggregate::triGradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trigradint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trigradint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_trigradint_trigrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< int > *arg1 = (Aggregate::triGradient< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:trigradint_trigrad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trigradint_trigrad" "', argument " "1"" of type '" "Aggregate::triGradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trigradint_trigrad" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradint_trigrad" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trigradint_trigrad" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradint_trigrad" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    int i,sz;
    
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj3);
    arg4 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj3, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg4[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->trigrad(*arg2,*arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_trigradint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< int > *arg1 = (Aggregate::triGradient< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:trigradint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trigradint_getOutScheme" "', argument " "1"" of type '" "Aggregate::triGradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trigradint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_trigradint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< int > *arg1 = (Aggregate::triGradient< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_trigradint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_trigradint" "', argument " "1"" of type '" "Aggregate::triGradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *trigradint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__triGradientT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_trigradfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::triGradient< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_trigradfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_trigradfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::triGradient< float > *)new Aggregate::triGradient< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__triGradientT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_trigradfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::triGradient< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_trigradfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_trigradfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_trigradfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::triGradient< float > *)new Aggregate::triGradient< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__triGradientT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_trigradfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_trigradfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_trigradfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_trigradfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::triGradient< float >(std::string)\n"
    "    Aggregate::triGradient< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_trigradfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< float > *arg1 = (Aggregate::triGradient< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:trigradfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trigradfloat___call__" "', argument " "1"" of type '" "Aggregate::triGradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trigradfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trigradfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_trigradfloat_trigrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< float > *arg1 = (Aggregate::triGradient< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:trigradfloat_trigrad",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trigradfloat_trigrad" "', argument " "1"" of type '" "Aggregate::triGradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trigradfloat_trigrad" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradfloat_trigrad" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trigradfloat_trigrad" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "trigradfloat_trigrad" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  {
    int i,sz;
    
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj3);
    arg4 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj3, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg4[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->trigrad(*arg2,*arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_trigradfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< float > *arg1 = (Aggregate::triGradient< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:trigradfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "trigradfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::triGradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "trigradfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_trigradfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::triGradient< float > *arg1 = (Aggregate::triGradient< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_trigradfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__triGradientT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_trigradfloat" "', argument " "1"" of type '" "Aggregate::triGradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::triGradient< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *trigradfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__triGradientT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_grad3Dint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::gradient3D< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_grad3Dint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_grad3Dint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::gradient3D< int > *)new Aggregate::gradient3D< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradient3DT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_grad3Dint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::gradient3D< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_grad3Dint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_grad3Dint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_grad3Dint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::gradient3D< int > *)new Aggregate::gradient3D< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradient3DT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_grad3Dint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_grad3Dint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_grad3Dint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_grad3Dint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::gradient3D< int >(std::string)\n"
    "    Aggregate::gradient3D< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_grad3Dint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< int > *arg1 = (Aggregate::gradient3D< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grad3Dint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grad3Dint___call__" "', argument " "1"" of type '" "Aggregate::gradient3D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grad3Dint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grad3Dint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grad3Dint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grad3Dint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grad3Dint_gradLeastSquares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< int > *arg1 = (Aggregate::gradient3D< int > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  std::vector< Tuple > *arg7 = 0 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:grad3Dint_gradLeastSquares",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grad3Dint_gradLeastSquares" "', argument " "1"" of type '" "Aggregate::gradient3D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< int > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grad3Dint_gradLeastSquares" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grad3Dint_gradLeastSquares" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grad3Dint_gradLeastSquares" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "grad3Dint_gradLeastSquares" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "grad3Dint_gradLeastSquares" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "grad3Dint_gradLeastSquares" "', argument " "7"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grad3Dint_gradLeastSquares" "', argument " "7"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg7 = reinterpret_cast< std::vector< Tuple > * >(argp7);
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj8)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj8);
    arg9 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj8, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg9[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj9)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj9);
    arg10 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj9, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg10[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->gradLeastSquares(arg2,arg3,arg4,arg5,arg6,*arg7,arg8,arg9,arg10);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return resultobj;
fail:
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_grad3Dint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< int > *arg1 = (Aggregate::gradient3D< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grad3Dint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grad3Dint_getOutScheme" "', argument " "1"" of type '" "Aggregate::gradient3D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grad3Dint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_grad3Dint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< int > *arg1 = (Aggregate::gradient3D< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_grad3Dint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_grad3Dint" "', argument " "1"" of type '" "Aggregate::gradient3D< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *grad3Dint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__gradient3DT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_grad3Dfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::gradient3D< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_grad3Dfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_grad3Dfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::gradient3D< float > *)new Aggregate::gradient3D< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradient3DT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_grad3Dfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::gradient3D< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_grad3Dfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_grad3Dfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_grad3Dfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::gradient3D< float > *)new Aggregate::gradient3D< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradient3DT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_grad3Dfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_grad3Dfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_grad3Dfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_grad3Dfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::gradient3D< float >(std::string)\n"
    "    Aggregate::gradient3D< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_grad3Dfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< float > *arg1 = (Aggregate::gradient3D< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:grad3Dfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grad3Dfloat___call__" "', argument " "1"" of type '" "Aggregate::gradient3D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grad3Dfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grad3Dfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grad3Dfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grad3Dfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_grad3Dfloat_gradLeastSquares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< float > *arg1 = (Aggregate::gradient3D< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  std::vector< Tuple > *arg7 = 0 ;
  float *arg8 = (float *) 0 ;
  float *arg9 = (float *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  float val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  void *argp7 = 0 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:grad3Dfloat_gradLeastSquares",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "1"" of type '" "Aggregate::gradient3D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  ecode5 = SWIG_AsVal_float(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "5"" of type '" "float""'");
  } 
  arg5 = static_cast< float >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "7"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp7) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "grad3Dfloat_gradLeastSquares" "', argument " "7"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg7 = reinterpret_cast< std::vector< Tuple > * >(argp7);
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj8)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj8);
    arg9 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj8, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg9[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj9)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj9);
    arg10 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj9, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg10[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->gradLeastSquares(arg2,arg3,arg4,arg5,arg6,*arg7,arg8,arg9,arg10);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return resultobj;
fail:
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_grad3Dfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< float > *arg1 = (Aggregate::gradient3D< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:grad3Dfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grad3Dfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::gradient3D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grad3Dfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_grad3Dfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient3D< float > *arg1 = (Aggregate::gradient3D< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_grad3Dfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradient3DT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_grad3Dfloat" "', argument " "1"" of type '" "Aggregate::gradient3D< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient3D< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *grad3Dfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__gradient3DT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_gradint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::gradient< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_gradint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_gradint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::gradient< int > *)new Aggregate::gradient< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradientT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gradint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::gradient< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_gradint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_gradint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gradint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::gradient< int > *)new Aggregate::gradient< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradientT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gradint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gradint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_gradint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_gradint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::gradient< int >(std::string)\n"
    "    Aggregate::gradient< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< int > *arg1 = (Aggregate::gradient< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:gradint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradint___call__" "', argument " "1"" of type '" "Aggregate::gradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gradint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gradint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradint_gradLeastSquares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< int > *arg1 = (Aggregate::gradient< int > *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  std::string arg5 ;
  std::vector< Tuple > *arg6 = 0 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:gradint_gradLeastSquares",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradint_gradLeastSquares" "', argument " "1"" of type '" "Aggregate::gradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< int > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gradint_gradLeastSquares" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gradint_gradLeastSquares" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gradint_gradLeastSquares" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "gradint_gradLeastSquares" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "gradint_gradLeastSquares" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradint_gradLeastSquares" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg6 = reinterpret_cast< std::vector< Tuple > * >(argp6);
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->gradLeastSquares(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return resultobj;
fail:
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradint_gradnorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< int > *arg1 = (Aggregate::gradient< int > *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  std::string arg5 ;
  std::vector< Tuple > *arg6 = 0 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:gradint_gradnorm",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradint_gradnorm" "', argument " "1"" of type '" "Aggregate::gradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< int > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gradint_gradnorm" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gradint_gradnorm" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gradint_gradnorm" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "gradint_gradnorm" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "gradint_gradnorm" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradint_gradnorm" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg6 = reinterpret_cast< std::vector< Tuple > * >(argp6);
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->gradnorm(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return resultobj;
fail:
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< int > *arg1 = (Aggregate::gradient< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gradint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradint_getOutScheme" "', argument " "1"" of type '" "Aggregate::gradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gradint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gradint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< int > *arg1 = (Aggregate::gradient< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_gradint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gradint" "', argument " "1"" of type '" "Aggregate::gradient< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gradint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__gradientT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_gradfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::gradient< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_gradfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_gradfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::gradient< float > *)new Aggregate::gradient< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradientT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gradfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::gradient< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_gradfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_gradfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_gradfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::gradient< float > *)new Aggregate::gradient< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__gradientT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_gradfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_gradfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_gradfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_gradfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::gradient< float >(std::string)\n"
    "    Aggregate::gradient< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< float > *arg1 = (Aggregate::gradient< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:gradfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradfloat___call__" "', argument " "1"" of type '" "Aggregate::gradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gradfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gradfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradfloat_gradLeastSquares(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< float > *arg1 = (Aggregate::gradient< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  std::string arg5 ;
  std::vector< Tuple > *arg6 = 0 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:gradfloat_gradLeastSquares",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradfloat_gradLeastSquares" "', argument " "1"" of type '" "Aggregate::gradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gradfloat_gradLeastSquares" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gradfloat_gradLeastSquares" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gradfloat_gradLeastSquares" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "gradfloat_gradLeastSquares" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "gradfloat_gradLeastSquares" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradfloat_gradLeastSquares" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg6 = reinterpret_cast< std::vector< Tuple > * >(argp6);
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->gradLeastSquares(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return resultobj;
fail:
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradfloat_gradnorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< float > *arg1 = (Aggregate::gradient< float > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  std::string arg5 ;
  std::vector< Tuple > *arg6 = 0 ;
  float *arg7 = (float *) 0 ;
  float *arg8 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:gradfloat_gradnorm",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradfloat_gradnorm" "', argument " "1"" of type '" "Aggregate::gradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gradfloat_gradnorm" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gradfloat_gradnorm" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gradfloat_gradnorm" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "gradfloat_gradnorm" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "gradfloat_gradnorm" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "gradfloat_gradnorm" "', argument " "6"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg6 = reinterpret_cast< std::vector< Tuple > * >(argp6);
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      (arg1)->gradnorm(arg2,arg3,arg4,arg5,*arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return resultobj;
fail:
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_gradfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< float > *arg1 = (Aggregate::gradient< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:gradfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gradfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::gradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gradfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_gradfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::gradient< float > *arg1 = (Aggregate::gradient< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_gradfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__gradientT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_gradfloat" "', argument " "1"" of type '" "Aggregate::gradient< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::gradient< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *gradfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__gradientT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_minint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_min< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_minint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_minint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_min< int > *)new Aggregate::_min< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___minT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_minint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_min< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_minint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_minint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_minint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::_min< int > *)new Aggregate::_min< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___minT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_minint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_minint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_minint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_minint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_min< int >(std::string)\n"
    "    Aggregate::_min< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_minint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< int > *arg1 = (Aggregate::_min< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:minint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "minint___call__" "', argument " "1"" of type '" "Aggregate::_min< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "minint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "minint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "minint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "minint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minint_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< int > *arg1 = (Aggregate::_min< int > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:minint_min",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "minint_min" "', argument " "1"" of type '" "Aggregate::_min< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "minint_min" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "minint_min" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "minint_min" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (int)(arg1)->min(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< int > *arg1 = (Aggregate::_min< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:minint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "minint_getOutScheme" "', argument " "1"" of type '" "Aggregate::_min< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "minint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_minint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< int > *arg1 = (Aggregate::_min< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_minint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_minint" "', argument " "1"" of type '" "Aggregate::_min< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *minint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___minT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_minfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_min< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_minfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_minfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_min< float > *)new Aggregate::_min< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___minT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_minfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_min< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_minfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_minfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_minfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::_min< float > *)new Aggregate::_min< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___minT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_minfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_minfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_minfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_minfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_min< float >(std::string)\n"
    "    Aggregate::_min< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_minfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< float > *arg1 = (Aggregate::_min< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:minfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "minfloat___call__" "', argument " "1"" of type '" "Aggregate::_min< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "minfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "minfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "minfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "minfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minfloat_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< float > *arg1 = (Aggregate::_min< float > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:minfloat_min",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "minfloat_min" "', argument " "1"" of type '" "Aggregate::_min< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "minfloat_min" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "minfloat_min" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "minfloat_min" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (float)(arg1)->min(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_minfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< float > *arg1 = (Aggregate::_min< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:minfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "minfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::_min< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "minfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_minfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_min< float > *arg1 = (Aggregate::_min< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_minfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___minT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_minfloat" "', argument " "1"" of type '" "Aggregate::_min< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_min< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *minfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___minT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_maxint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_max< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_maxint",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_maxint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_max< int > *)new Aggregate::_max< int >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___maxT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_maxint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_max< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_maxint",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_maxint" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_maxint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Aggregate::_max< int > *)new Aggregate::_max< int >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___maxT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_maxint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_maxint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_maxint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_maxint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_max< int >(std::string)\n"
    "    Aggregate::_max< int >(std::string,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_maxint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< int > *arg1 = (Aggregate::_max< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:maxint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maxint___call__" "', argument " "1"" of type '" "Aggregate::_max< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maxint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maxint___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maxint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maxint___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maxint_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< int > *arg1 = (Aggregate::_max< int > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:maxint_max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maxint_max" "', argument " "1"" of type '" "Aggregate::_max< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "maxint_max" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maxint_max" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maxint_max" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (int)(arg1)->max(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maxint_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< int > *arg1 = (Aggregate::_max< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maxint_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maxint_getOutScheme" "', argument " "1"" of type '" "Aggregate::_max< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maxint_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_maxint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< int > *arg1 = (Aggregate::_max< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_maxint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_maxint" "', argument " "1"" of type '" "Aggregate::_max< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *maxint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___maxT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_maxfloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Aggregate::_max< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_maxfloat",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_maxfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Aggregate::_max< float > *)new Aggregate::_max< float >(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___maxT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_maxfloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  float arg2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Aggregate::_max< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_maxfloat",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_maxfloat" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_maxfloat" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    try {
      result = (Aggregate::_max< float > *)new Aggregate::_max< float >(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate___maxT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_maxfloat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_maxfloat__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_maxfloat__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_maxfloat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Aggregate::_max< float >(std::string)\n"
    "    Aggregate::_max< float >(std::string,float)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_maxfloat___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< float > *arg1 = (Aggregate::_max< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:maxfloat___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maxfloat___call__" "', argument " "1"" of type '" "Aggregate::_max< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maxfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maxfloat___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maxfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maxfloat___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maxfloat_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< float > *arg1 = (Aggregate::_max< float > *) 0 ;
  std::string arg2 ;
  std::vector< Tuple > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:maxfloat_max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maxfloat_max" "', argument " "1"" of type '" "Aggregate::_max< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "maxfloat_max" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "maxfloat_max" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "maxfloat_max" "', argument " "3"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Tuple > * >(argp3);
  {
    try {
      result = (float)(arg1)->max(arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_maxfloat_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< float > *arg1 = (Aggregate::_max< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:maxfloat_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "maxfloat_getOutScheme" "', argument " "1"" of type '" "Aggregate::_max< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "maxfloat_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_maxfloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::_max< float > *arg1 = (Aggregate::_max< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_maxfloat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate___maxT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_maxfloat" "', argument " "1"" of type '" "Aggregate::_max< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::_max< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *maxfloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate___maxT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_intunion_vecattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intunion_vecattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_vecattr_set" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intunion_vecattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intunion_vecattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->vecattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion_vecattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intunion_vecattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_vecattr_get" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  result = (std::string *) & ((arg1)->vecattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion_valattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intunion_valattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_valattr_set" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intunion_valattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intunion_valattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->valattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion_valattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intunion_valattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_valattr_get" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  result = (std::string *) & ((arg1)->valattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intunion_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_type_set" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intunion_type_set" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intunion_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_type_get" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  result = (Type) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intunion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  Type arg3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Aggregate::setunion< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_intunion",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intunion" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intunion" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_intunion" "', argument " "3"" of type '" "Type""'");
  } 
  arg3 = static_cast< Type >(val3);
  {
    try {
      result = (Aggregate::setunion< int > *)new Aggregate::setunion< int >(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__setunionT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intunion___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion___call__" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intunion___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intunion___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "intunion___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intunion___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intunion_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intunion_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intunion_getOutScheme" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intunion_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intunion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< int > *arg1 = (Aggregate::setunion< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_intunion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intunion" "', argument " "1"" of type '" "Aggregate::setunion< int > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *intunion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__setunionT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_floatunion_vecattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatunion_vecattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_vecattr_set" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatunion_vecattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatunion_vecattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->vecattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion_vecattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:floatunion_vecattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_vecattr_get" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  result = (std::string *) & ((arg1)->vecattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion_valattr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatunion_valattr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_valattr_set" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatunion_valattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatunion_valattr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->valattr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion_valattr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:floatunion_valattr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_valattr_get" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  result = (std::string *) & ((arg1)->valattr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion_type_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatunion_type_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_type_set" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "floatunion_type_set" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  if (arg1) (arg1)->type = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion_type_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:floatunion_type_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_type_get" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  result = (Type) ((arg1)->type);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_floatunion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  Type arg3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Aggregate::setunion< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_floatunion",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_floatunion" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_floatunion" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_floatunion" "', argument " "3"" of type '" "Type""'");
  } 
  arg3 = static_cast< Type >(val3);
  {
    try {
      result = (Aggregate::setunion< float > *)new Aggregate::setunion< float >(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Aggregate__setunionT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  std::vector< Tuple > *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:floatunion___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion___call__" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatunion___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatunion___call__" "', argument " "2"" of type '" "std::vector< Tuple > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Tuple > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "floatunion___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatunion___call__" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->operator ()(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatunion_getOutScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  Scheme *arg2 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatunion_getOutScheme",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatunion_getOutScheme" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatunion_getOutScheme" "', argument " "2"" of type '" "Scheme *""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (Scheme *)(arg1)->getOutScheme(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_floatunion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Aggregate::setunion< float > *arg1 = (Aggregate::setunion< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_floatunion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Aggregate__setunionT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_floatunion" "', argument " "1"" of type '" "Aggregate::setunion< float > *""'"); 
  }
  arg1 = reinterpret_cast< Aggregate::setunion< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *floatunion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Aggregate__setunionT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_intmember_item_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intmember_item_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember_item_attr_set" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intmember_item_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intmember_item_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->item_attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intmember_item_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intmember_item_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember_item_attr_get" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  result = (std::string *) & ((arg1)->item_attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intmember_set_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intmember_set_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember_set_attr_set" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intmember_set_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intmember_set_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->set_attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intmember_set_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intmember_set_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember_set_attr_get" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  result = (std::string *) & ((arg1)->set_attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intmember_set_value_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:intmember_set_value_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember_set_value_attr_set" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intmember_set_value_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intmember_set_value_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->set_value_attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_intmember_set_value_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:intmember_set_value_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember_set_value_attr_get" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  result = (std::string *) & ((arg1)->set_value_attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_intmember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Assign::memberof< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_intmember",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intmember" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intmember" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_intmember" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::memberof< int > *)new Assign::memberof< int >(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__memberofT_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_intmember___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:intmember___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intmember___call__" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intmember___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "intmember___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intmember___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_intmember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< int > *arg1 = (Assign::memberof< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_intmember",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intmember" "', argument " "1"" of type '" "Assign::memberof< int > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< int > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *intmember_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__memberofT_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_floatmember_item_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatmember_item_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember_item_attr_set" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatmember_item_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatmember_item_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->item_attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatmember_item_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:floatmember_item_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember_item_attr_get" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  result = (std::string *) & ((arg1)->item_attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatmember_set_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatmember_set_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember_set_attr_set" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatmember_set_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatmember_set_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->set_attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatmember_set_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:floatmember_set_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember_set_attr_get" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  result = (std::string *) & ((arg1)->set_attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatmember_set_value_attr_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:floatmember_set_value_attr_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember_set_value_attr_set" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "floatmember_set_value_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatmember_set_value_attr_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->set_value_attr = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatmember_set_value_attr_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:floatmember_set_value_attr_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember_set_value_attr_get" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  result = (std::string *) & ((arg1)->set_value_attr);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_floatmember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Assign::memberof< float > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_floatmember",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_floatmember" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_floatmember" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_floatmember" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Assign::memberof< float > *)new Assign::memberof< float >(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Assign__memberofT_float_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_floatmember___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  CellId *arg2 = 0 ;
  std::vector< CellId > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CellId temp2 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:floatmember___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatmember___call__" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "floatmember___call__" "', argument " "2"" of type '" "CellId""'");
  } 
  temp2 = static_cast< CellId >(val2);
  arg2 = &temp2;
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "floatmember___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "floatmember___call__" "', argument " "3"" of type '" "std::vector< CellId > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< CellId > * >(argp3);
  {
    try {
      (arg1)->operator ()((CellId const &)*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_floatmember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Assign::memberof< float > *arg1 = (Assign::memberof< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_floatmember",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Assign__memberofT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_floatmember" "', argument " "1"" of type '" "Assign::memberof< float > *""'"); 
  }
  arg1 = reinterpret_cast< Assign::memberof< float > * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *floatmember_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Assign__memberofT_float_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MergeOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MergeOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MergeOp",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MergeOp" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MergeOp" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      result = (MergeOp *)new MergeOp(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MergeOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeOp *arg1 = (MergeOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MergeOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeOp_Execute" "', argument " "1"" of type '" "MergeOp *""'"); 
  }
  arg1 = reinterpret_cast< MergeOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MergeOp_Merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  GridField *arg2 = (GridField *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MergeOp_Merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MergeOp_Merge" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MergeOp_Merge" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  {
    try {
      result = (GridField *)MergeOp::Merge(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MergeOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MergeOp *arg1 = (MergeOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MergeOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MergeOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MergeOp" "', argument " "1"" of type '" "MergeOp *""'"); 
  }
  arg1 = reinterpret_cast< MergeOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MergeOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MergeOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SiftOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dim_t arg1 ;
  GridFieldOperator *arg2 = (GridFieldOperator *) 0 ;
  short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SiftOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SiftOp",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SiftOp" "', argument " "1"" of type '" "Dim_t""'");
  } 
  arg1 = static_cast< Dim_t >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SiftOp" "', argument " "2"" of type '" "GridFieldOperator *""'"); 
  }
  arg2 = reinterpret_cast< GridFieldOperator * >(argp2);
  {
    try {
      result = (SiftOp *)new SiftOp(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SiftOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SiftOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SiftOp *arg1 = (SiftOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SiftOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SiftOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SiftOp_Execute" "', argument " "1"" of type '" "SiftOp *""'"); 
  }
  arg1 = reinterpret_cast< SiftOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SiftOp_Sift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Dim_t arg1 ;
  GridField *arg2 = (GridField *) 0 ;
  short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SiftOp_Sift",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SiftOp_Sift" "', argument " "1"" of type '" "Dim_t""'");
  } 
  arg1 = static_cast< Dim_t >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SiftOp_Sift" "', argument " "2"" of type '" "GridField *""'"); 
  }
  arg2 = reinterpret_cast< GridField * >(argp2);
  {
    try {
      result = (GridField *)SiftOp::Sift(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SiftOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SiftOp *arg1 = (SiftOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SiftOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SiftOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SiftOp" "', argument " "1"" of type '" "SiftOp *""'"); 
  }
  arg1 = reinterpret_cast< SiftOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SiftOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SiftOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_typeformat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  char result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:typeformat",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "typeformat" "', argument " "1"" of type '" "Type""'");
  } 
  arg1 = static_cast< Type >(val1);
  {
    try {
      result = (char)typeformat(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_typeval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:typeval",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "typeval" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Type)typeval(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_typesize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:typesize",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "typesize" "', argument " "1"" of type '" "Type""'");
  } 
  arg1 = static_cast< Type >(val1);
  {
    try {
      result = (int)typesize(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_plusplus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  UnTypedPtr *arg1 = (UnTypedPtr *) 0 ;
  Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:plusplus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "plusplus" "', argument " "1"" of type '" "UnTypedPtr *""'"); 
  }
  arg1 = reinterpret_cast< UnTypedPtr * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "plusplus" "', argument " "2"" of type '" "Type""'");
  } 
  arg2 = static_cast< Type >(val2);
  {
    try {
      plusplus(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scheme__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Scheme")) SWIG_fail;
  {
    try {
      result = (Scheme *)new Scheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scheme__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Scheme",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Scheme" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Scheme *)new Scheme(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Scheme(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Scheme__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Scheme__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Scheme'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Scheme()\n"
    "    Scheme(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_addAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  std::string *arg2 = 0 ;
  Type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scheme_addAttribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_addAttribute" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_addAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_addAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scheme_addAttribute" "', argument " "3"" of type '" "Type""'");
  } 
  arg3 = static_cast< Type >(val3);
  {
    try {
      (arg1)->addAttribute((std::string const &)*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_removeAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_removeAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_removeAttribute" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_removeAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_removeAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->removeAttribute((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_clear" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      (arg1)->clear();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_Subsumes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_Subsumes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_Subsumes" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_Subsumes" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_Subsumes" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (bool)((Scheme const *)arg1)->Subsumes((Scheme const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< pair< std::string,Type >,std::allocator< pair< std::string,Type > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_begin" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      result = (arg1)->begin();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Scheme::FieldIterator(static_cast< const Scheme::FieldIterator& >(result))), SWIGTYPE_p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< pair< std::string,Type >,std::allocator< pair< std::string,Type > > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_end" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      result = (arg1)->end();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Scheme::FieldIterator(static_cast< const Scheme::FieldIterator& >(result))), SWIGTYPE_p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_size" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      result = ((Scheme const *)arg1)->size();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_bytesize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_bytesize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_bytesize" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      result = (arg1)->bytesize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_byteposition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_byteposition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_byteposition" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_byteposition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_byteposition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->byteposition((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_getType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_getType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_getType" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_getType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_getType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (Type)((Scheme const *)arg1)->getType((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_getType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_getType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_getType" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scheme_getType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (Type)((Scheme const *)arg1)->getType(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_getType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scheme_getType__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scheme_getType__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Scheme_getType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getType(Scheme const *,std::string const &)\n"
    "    getType(Scheme const *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_getPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_getPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_getPosition" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_getPosition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_getPosition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)((Scheme const *)arg1)->getPosition((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_getAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_getAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_getAttribute" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scheme_getAttribute" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((Scheme const *)arg1)->getAttribute(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_isAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_isAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_isAttribute" "', argument " "1"" of type '" "Scheme const *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_isAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_isAttribute" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((Scheme const *)arg1)->isAttribute((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme___eq__" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme___eq__" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme___eq__" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator ==((Scheme const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme___ge__" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme___ge__" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme___ge__" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator >=((Scheme const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme___le__" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme___le__" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme___le__" "', argument " "2"" of type '" "Scheme const &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (bool)(arg1)->operator <=((Scheme const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_formatOf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_formatOf",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_formatOf" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scheme_formatOf" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->formatOf(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_asString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_asString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_asString" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      result = (arg1)->asString();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_PrintTo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scheme_PrintTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_PrintTo" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Scheme_PrintTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->PrintTo(*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_PrintTo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_PrintTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_PrintTo" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Scheme_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scheme_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try {
      (arg1)->PrintTo(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_PrintTo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Scheme_PrintTo__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Scheme_PrintTo__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Scheme_PrintTo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PrintTo(Scheme *,ostream &,int)\n"
    "    PrintTo(Scheme *,ostream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scheme_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_show" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scheme_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scheme_show" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scheme_show" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scheme_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Scheme_show__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Scheme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scheme_show__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Scheme_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(Scheme *)\n"
    "    print(Scheme *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Scheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Scheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Scheme" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Scheme_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Scheme, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Tuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Scheme *arg1 = (Scheme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Tuple *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Tuple",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Scheme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Tuple" "', argument " "1"" of type '" "Scheme *""'"); 
  }
  arg1 = reinterpret_cast< Scheme * >(argp1);
  {
    try {
      result = (Tuple *)new Tuple(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Tuple, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_getScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_getScheme",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_getScheme" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      result = (Scheme *)(arg1)->getScheme();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_get" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tuple_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (UnTypedPtr)(arg1)->get(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  int arg2 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tuple_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_set" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tuple_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = (UnTypedPtr) obj2;
  }
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  UnTypedPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_get" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Tuple_get" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (UnTypedPtr)(arg1)->get(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Tuple_get__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tuple_get__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Tuple_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(Tuple *,int)\n"
    "    get(Tuple *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  std::string arg2 ;
  UnTypedPtr arg3 = (UnTypedPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tuple_set",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_set" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Tuple_set" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    arg3 = (UnTypedPtr) obj2;
  }
  {
    try {
      (arg1)->set(arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = true;
        }
        if (_v) {
          return _wrap_Tuple_set__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = true;
        }
        if (_v) {
          return _wrap_Tuple_set__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Tuple_set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    set(Tuple *,int,UnTypedPtr)\n"
    "    set(Tuple *,std::string,UnTypedPtr)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_getAttribute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_getAttribute",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_getAttribute" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tuple_getAttribute" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (arg1)->getAttribute(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_size" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      result = (int)(arg1)->size();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_asString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_asString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_asString" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_asString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_asString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (arg1)->asString((std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_asString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_asString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_asString" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      result = (arg1)->asString();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_asString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Tuple_asString__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tuple_asString__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Tuple_asString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    asString(Tuple *,std::string const &)\n"
    "    asString(Tuple *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_show__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_show",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_show" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      (arg1)->print();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_show__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_show",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_show" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Tuple_show" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->print(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_show(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Tuple_show__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Tuple_show__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Tuple_show'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    print(Tuple *)\n"
    "    print(Tuple *,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_PrintTo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  ostream *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tuple_PrintTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_PrintTo" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Tuple_PrintTo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->PrintTo(*arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_PrintTo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_PrintTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_PrintTo" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_PrintTo" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    try {
      (arg1)->PrintTo(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_PrintTo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Tuple_PrintTo__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Tuple, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Tuple_PrintTo__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Tuple_PrintTo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PrintTo(Tuple *,ostream &,int)\n"
    "    PrintTo(Tuple *,ostream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_bytesize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_bytesize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_bytesize" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      result = (int)(arg1)->bytesize();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_Next" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      (arg1)->Next();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_Allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_Allocate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_Allocate" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      result = (char *)(arg1)->Allocate();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_assign",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_assign" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_assign" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->assign(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  Tuple *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_copy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_copy" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_copy" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_copy" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  arg2 = reinterpret_cast< Tuple * >(argp2);
  {
    try {
      (arg1)->copy(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_isNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Tuple_isNull",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_isNull" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      result = (bool)(arg1)->isNull();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  ifstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_Read" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ifstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_Read" "', argument " "2"" of type '" "ifstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_Read" "', argument " "2"" of type '" "ifstream &""'"); 
  }
  arg2 = reinterpret_cast< ifstream * >(argp2);
  {
    try {
      (arg1)->Read(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_Parse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_Parse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_Parse" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_Parse" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      (arg1)->Parse(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_Covers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_Covers",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_Covers" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_Covers" "', argument " "2"" of type '" "Scheme &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_Covers" "', argument " "2"" of type '" "Scheme &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (bool)(arg1)->Covers(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Tuple_CoveredBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Tuple_CoveredBy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tuple_CoveredBy" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tuple_CoveredBy" "', argument " "2"" of type '" "Scheme &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tuple_CoveredBy" "', argument " "2"" of type '" "Scheme &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      result = (bool)(arg1)->CoveredBy(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Tuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Tuple *arg1 = (Tuple *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Tuple",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Tuple, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Tuple" "', argument " "1"" of type '" "Tuple *""'"); 
  }
  arg1 = reinterpret_cast< Tuple * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Tuple_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Tuple, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ProjectOp__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  Dim_t arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ProjectOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ProjectOp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ProjectOp" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ProjectOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ProjectOp" "', argument " "3"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ProjectOp" "', argument " "3"" of type '" "std::vector< std::string > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::string > * >(argp3);
  {
    try {
      result = (ProjectOp *)new ProjectOp(arg1,arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProjectOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProjectOp__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridFieldOperator *arg1 = (GridFieldOperator *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  ProjectOp *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ProjectOp",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridFieldOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ProjectOp" "', argument " "1"" of type '" "GridFieldOperator *""'"); 
  }
  arg1 = reinterpret_cast< GridFieldOperator * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ProjectOp" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ProjectOp" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (ProjectOp *)new ProjectOp(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ProjectOp, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProjectOp(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ProjectOp__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridFieldOperator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ProjectOp__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ProjectOp'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ProjectOp(GridFieldOperator *,Dim_t,std::vector< std::string > &)\n"
    "    ProjectOp(GridFieldOperator *,Dim_t,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectOp_Execute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectOp *arg1 = (ProjectOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ProjectOp_Execute",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectOp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectOp_Execute" "', argument " "1"" of type '" "ProjectOp *""'"); 
  }
  arg1 = reinterpret_cast< ProjectOp * >(argp1);
  {
    try {
      (arg1)->Execute();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectOp_Project__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  std::vector< std::string > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ProjectOp_Project",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectOp_Project" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProjectOp_Project" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ProjectOp_Project" "', argument " "3"" of type '" "std::vector< std::string >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (GridField *)ProjectOp::Project(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectOp_Project__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GridField *arg1 = (GridField *) 0 ;
  Dim_t arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GridField *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ProjectOp_Project",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_GridField, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProjectOp_Project" "', argument " "1"" of type '" "GridField *""'"); 
  }
  arg1 = reinterpret_cast< GridField * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProjectOp_Project" "', argument " "2"" of type '" "Dim_t""'");
  } 
  arg2 = static_cast< Dim_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ProjectOp_Project" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (GridField *)ProjectOp::Project(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GridField, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProjectOp_Project(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProjectOp_Project__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GridField, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProjectOp_Project__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ProjectOp_Project'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Project(GridField *,Dim_t,std::vector< std::string >)\n"
    "    ProjectOp::Project(GridField *,Dim_t,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProjectOp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ProjectOp *arg1 = (ProjectOp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ProjectOp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ProjectOp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProjectOp" "', argument " "1"" of type '" "ProjectOp *""'"); 
  }
  arg1 = reinterpret_cast< ProjectOp * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProjectOp_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ProjectOp, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OneGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  OneGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_OneGrid",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_OneGrid" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OneGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (OneGrid *)new OneGrid(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OneGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OneGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OneGrid *arg1 = (OneGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OneGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OneGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OneGrid" "', argument " "1"" of type '" "OneGrid *""'"); 
  }
  arg1 = reinterpret_cast< OneGrid * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OneGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OneGrid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ZeroGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ZeroGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ZeroGrid",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ZeroGrid" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ZeroGrid" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (ZeroGrid *)new ZeroGrid(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZeroGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ZeroGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ZeroGrid *arg1 = (ZeroGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ZeroGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ZeroGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ZeroGrid" "', argument " "1"" of type '" "ZeroGrid *""'"); 
  }
  arg1 = reinterpret_cast< ZeroGrid * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ZeroGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ZeroGrid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TupleFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TupleFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TupleFunction")) SWIG_fail;
  {
    try {
      result = (TupleFunction *)new TupleFunction();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TupleFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TupleFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TupleFunction *arg1 = (TupleFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TupleFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TupleFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TupleFunction" "', argument " "1"" of type '" "TupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< TupleFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleFunction_Parse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TupleFunction *arg1 = (TupleFunction *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TupleFunction_Parse",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TupleFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleFunction_Parse" "', argument " "1"" of type '" "TupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< TupleFunction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TupleFunction_Parse" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      (arg1)->Parse(arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleFunction_ReturnType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TupleFunction *arg1 = (TupleFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TupleFunction_ReturnType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TupleFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleFunction_ReturnType" "', argument " "1"" of type '" "TupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< TupleFunction * >(argp1);
  {
    try {
      result = (Scheme *)(arg1)->ReturnType();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleFunction_InputType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TupleFunction *arg1 = (TupleFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Scheme *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TupleFunction_InputType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TupleFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleFunction_InputType" "', argument " "1"" of type '" "TupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< TupleFunction * >(argp1);
  {
    try {
      result = (Scheme *)(arg1)->InputType();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Scheme, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TupleFunction_Eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TupleFunction *arg1 = (TupleFunction *) 0 ;
  Tuple *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TupleFunction_Eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TupleFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TupleFunction_Eval" "', argument " "1"" of type '" "TupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< TupleFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TupleFunction_Eval" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TupleFunction_Eval" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  arg2 = reinterpret_cast< Tuple * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TupleFunction_Eval" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TupleFunction_Eval" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->Eval(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TupleFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TupleFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SpecializedTupleFunction_SpecializeFor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecializedTupleFunction *arg1 = (SpecializedTupleFunction *) 0 ;
  Scheme *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SpecializedTupleFunction_SpecializeFor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpecializedTupleFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecializedTupleFunction_SpecializeFor" "', argument " "1"" of type '" "SpecializedTupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< SpecializedTupleFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Scheme,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecializedTupleFunction_SpecializeFor" "', argument " "2"" of type '" "Scheme &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecializedTupleFunction_SpecializeFor" "', argument " "2"" of type '" "Scheme &""'"); 
  }
  arg2 = reinterpret_cast< Scheme * >(argp2);
  {
    try {
      (arg1)->SpecializeFor(*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecializedTupleFunction_Eval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecializedTupleFunction *arg1 = (SpecializedTupleFunction *) 0 ;
  Tuple *arg2 = 0 ;
  Tuple *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SpecializedTupleFunction_Eval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpecializedTupleFunction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecializedTupleFunction_Eval" "', argument " "1"" of type '" "SpecializedTupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< SpecializedTupleFunction * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SpecializedTupleFunction_Eval" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecializedTupleFunction_Eval" "', argument " "2"" of type '" "Tuple &""'"); 
  }
  arg2 = reinterpret_cast< Tuple * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Tuple,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SpecializedTupleFunction_Eval" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SpecializedTupleFunction_Eval" "', argument " "3"" of type '" "Tuple &""'"); 
  }
  arg3 = reinterpret_cast< Tuple * >(argp3);
  {
    try {
      (arg1)->Eval(*arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpecializedTupleFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecializedTupleFunction *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SpecializedTupleFunction")) SWIG_fail;
  {
    try {
      result = (SpecializedTupleFunction *)new SpecializedTupleFunction();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpecializedTupleFunction, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecializedTupleFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecializedTupleFunction *arg1 = (SpecializedTupleFunction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SpecializedTupleFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SpecializedTupleFunction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecializedTupleFunction" "', argument " "1"" of type '" "SpecializedTupleFunction *""'"); 
  }
  arg1 = reinterpret_cast< SpecializedTupleFunction * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecializedTupleFunction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpecializedTupleFunction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_nullstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nullstream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_nullstream")) SWIG_fail;
  {
    try {
      result = (nullstream *)new nullstream();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nullstream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_nullstream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nullstream *arg1 = (nullstream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_nullstream",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_nullstream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_nullstream" "', argument " "1"" of type '" "nullstream *""'"); 
  }
  arg1 = reinterpret_cast< nullstream * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *nullstream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_nullstream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_split(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:split",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "split" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "split" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "split" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "split" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "split" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp3);
  {
    try {
      split((std::string const &)*arg1,arg2,*arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_remove_whitespace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:remove_whitespace",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "remove_whitespace" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "remove_whitespace" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = remove_whitespace((std::string const &)*arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_same(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:same",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "same" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "same" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "same" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "same" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)same((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fatal__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Fatal",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Fatal" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      Fatal((char const *)arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Fatal(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
  resultobj = _wrap_Fatal__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_Warning__varargs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args, PyObject *varargs) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Warning",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Warning" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      Warning((char const *)arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Warning(PyObject *self, PyObject *args) {
  PyObject *resultobj;
  PyObject *varargs;
  PyObject *newargs;
  
  newargs = PyTuple_GetSlice(args,0,1);
  varargs = PyTuple_GetSlice(args,1,PyTuple_Size(args)+1);
  resultobj = _wrap_Warning__varargs__(self,newargs,varargs);
  Py_XDECREF(newargs);
  Py_XDECREF(varargs);
  return resultobj;
}


SWIGINTERN PyObject *_wrap_tab(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tab",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tab" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = tab(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_magic_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[49] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_magic_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_magic_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 49);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircHeader_magic_set" "', argument " "2"" of type '" "char [49]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->magic,arg2,49*sizeof(char));
  else memset(arg1->magic,0,49*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_magic_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_magic_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_magic_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (char *)(char *) ((arg1)->magic);
  {
    size_t size = 49;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_version_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[49] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_version_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_version_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 49);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircHeader_version_set" "', argument " "2"" of type '" "char [49]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->version,arg2,49*sizeof(char));
  else memset(arg1->version,0,49*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_version_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_version_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_version_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (char *)(char *) ((arg1)->version);
  {
    size_t size = 49;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_start_time_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[49] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_start_time_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_start_time_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 49);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircHeader_start_time_set" "', argument " "2"" of type '" "char [49]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->start_time,arg2,49*sizeof(char));
  else memset(arg1->start_time,0,49*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_start_time_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_start_time_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_start_time_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (char *)(char *) ((arg1)->start_time);
  {
    size_t size = 49;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_variable_nm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[49] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_variable_nm_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_variable_nm_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 49);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircHeader_variable_nm_set" "', argument " "2"" of type '" "char [49]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->variable_nm,arg2,49*sizeof(char));
  else memset(arg1->variable_nm,0,49*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_variable_nm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_variable_nm_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_variable_nm_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (char *)(char *) ((arg1)->variable_nm);
  {
    size_t size = 49;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_variable_dim_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[49] ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_variable_dim_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_variable_dim_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_AsCharArray(obj1, temp2, 49);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircHeader_variable_dim_set" "', argument " "2"" of type '" "char [49]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->variable_dim,arg2,49*sizeof(char));
  else memset(arg1->variable_dim,0,49*sizeof(char));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_variable_dim_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_variable_dim_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_variable_dim_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (char *)(char *) ((arg1)->variable_dim);
  {
    size_t size = 49;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    resultobj = SWIG_FromCharPtrAndSize(result, size);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_v_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_v_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_v_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_v_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->v = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_v_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_v_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_v_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->v);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_compress_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_compress_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_compress_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_compress_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->compress = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_compress_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_compress_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_compress_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->compress);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_a_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_a_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_a_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_a_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->a = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_a_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_a_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_a_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (double) ((arg1)->a);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_b_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_b_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_b_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_b_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->b = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_b_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_b_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_b_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (double) ((arg1)->b);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_nsteps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_nsteps_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_nsteps_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_nsteps_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nsteps = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_nsteps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_nsteps_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_nsteps_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->nsteps);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_timestep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_timestep_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_timestep_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_timestep_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->timestep = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_timestep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_timestep_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_timestep_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->timestep);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_skip_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_skip_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_skip_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_skip_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->skip = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_skip_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_skip_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_skip_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->skip);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ivs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_ivs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ivs_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_ivs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ivs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ivs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_ivs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ivs_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->ivs);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_i23d_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_i23d_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_i23d_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_i23d_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->i23d = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_i23d_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_i23d_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_i23d_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->i23d);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_vpos_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_vpos_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_vpos_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_vpos_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->vpos = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_vpos_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_vpos_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_vpos_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->vpos);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_zmsl_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_zmsl_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_zmsl_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_zmsl_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->zmsl = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_zmsl_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_zmsl_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_zmsl_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->zmsl);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ivcor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_ivcor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ivcor_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_ivcor_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ivcor = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ivcor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_ivcor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ivcor_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->ivcor);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_h0_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_h0_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_h0_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_h0_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->h0 = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_h0_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_h0_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_h0_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->h0);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_hs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_hs_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_hs_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_hs_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->hs = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_hs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_hs_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_hs_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->hs);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_hc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_hc_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_hc_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_hc_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->hc = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_hc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_hc_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_hc_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->hc);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_thetab_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_thetab_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_thetab_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_thetab_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->thetab = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_thetab_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_thetab_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_thetab_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->thetab);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_thetaf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_thetaf_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_thetaf_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_thetaf_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->thetaf = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_thetaf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_thetaf_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_thetaf_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float) ((arg1)->thetaf);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_nvrt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_nvrt_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_nvrt_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_nvrt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nvrt = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_nvrt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_nvrt_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_nvrt_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->nvrt);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_kz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_kz_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_kz_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_kz_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->kz = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_kz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_kz_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_kz_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->kz);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ks_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_ks_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ks_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_ks_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ks_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_ks_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ks_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->ks);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_nitems_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_nitems_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_nitems_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_nitems_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->nitems = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_nitems_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_nitems_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_nitems_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->nitems);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_hsize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_hsize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_hsize_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_hsize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->hsize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_hsize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_hsize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_hsize_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->hsize);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ssize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_ssize_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ssize_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_ssize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ssize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ssize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_ssize_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ssize_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->ssize);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_sigma_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_sigma_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_sigma_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_sigma_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->sigma = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_sigma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_sigma_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_sigma_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->sigma);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_zcor_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_zcor_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_zcor_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->zcor = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_zcor_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_zcor_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_zcor_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float *) ((arg1)->zcor);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_np_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_np_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_np_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_np_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->np = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_np_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_np_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_np_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->np);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ne_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_ne_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ne_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircHeader_ne_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ne = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_ne_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_ne_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_ne_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int) ((arg1)->ne);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_x_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_x_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float *) ((arg1)->x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_y_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_y_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float *) ((arg1)->y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_d_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_d_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_d_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->d = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_d_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_d_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_d_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (float *) ((arg1)->d);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_bi_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_bi_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_bi_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  if (arg1) (arg1)->bi = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_bi_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_bi_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_bi_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int *) ((arg1)->bi);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_no_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_no_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_no_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  if (arg1) (arg1)->no = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_no_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_no_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_no_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int *) ((arg1)->no);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_etype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_etype_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_etype_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  if (arg1) (arg1)->etype = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_etype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_etype_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_etype_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int *) ((arg1)->etype);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_icon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircHeader_icon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_icon_set" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElcircHeader_icon_set" "', argument " "2"" of type '" "int *[4]""'"); 
  } 
  arg2 = reinterpret_cast< int ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) arg1->icon[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""icon""' of type '""int *[4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircHeader_icon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircHeader_icon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircHeader_icon_get" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  result = (int **)(int **) ((arg1)->icon);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ElcircHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ElcircHeader")) SWIG_fail;
  {
    try {
      result = (ElcircHeader *)new ElcircHeader();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElcircHeader, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElcircHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ElcircHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElcircHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElcircHeader_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ElcircHeader, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ElcircTimeStep_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStep_t_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_t_set" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStep_t_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStep_t_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_t_get" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  result = (float) ((arg1)->t);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_it_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStep_it_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_it_set" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStep_it_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->it = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_it_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStep_it_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_it_get" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  result = (int) ((arg1)->it);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_surfind_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStep_surfind_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_surfind_set" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  if (arg1) (arg1)->surfind = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_surfind_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStep_surfind_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_surfind_get" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  result = (int *) ((arg1)->surfind);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_e_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStep_e_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_e_set" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->e = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_e_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStep_e_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_e_get" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  result = (float *) ((arg1)->e);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_d_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStep_d_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_d_set" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->d = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStep_d_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStep_d_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStep_d_get" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  result = (float *) ((arg1)->d);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ElcircTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ElcircTimeStep")) SWIG_fail;
  {
    try {
      result = (ElcircTimeStep *)new ElcircTimeStep();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElcircTimeStep, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElcircTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ElcircTimeStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElcircTimeStep" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElcircTimeStep_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ElcircTimeStep, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_t_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStepAtNode_t_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_t_set" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStepAtNode_t_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->t = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_t_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStepAtNode_t_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_t_get" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  result = (float) ((arg1)->t);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_it_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStepAtNode_it_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_it_set" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStepAtNode_it_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->it = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_it_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStepAtNode_it_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_it_get" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  result = (int) ((arg1)->it);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_istart_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStepAtNode_istart_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_istart_set" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStepAtNode_istart_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->istart = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_istart_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStepAtNode_istart_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_istart_get" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  result = (int) ((arg1)->istart);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_istop_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStepAtNode_istop_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_istop_set" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStepAtNode_istop_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->istop = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_istop_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStepAtNode_istop_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_istop_get" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  result = (int) ((arg1)->istop);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_npts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStepAtNode_npts_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_npts_set" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElcircTimeStepAtNode_npts_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->npts = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_npts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStepAtNode_npts_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_npts_get" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  result = (int) ((arg1)->npts);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_d_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  float *arg2 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElcircTimeStepAtNode_d_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_d_set" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  if (arg1) (arg1)->d = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElcircTimeStepAtNode_d_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElcircTimeStepAtNode_d_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElcircTimeStepAtNode_d_get" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  result = (float *) ((arg1)->d);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ElcircTimeStepAtNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ElcircTimeStepAtNode")) SWIG_fail;
  {
    try {
      result = (ElcircTimeStepAtNode *)new ElcircTimeStepAtNode();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElcircTimeStepAtNode, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElcircTimeStepAtNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStepAtNode *arg1 = (ElcircTimeStepAtNode *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ElcircTimeStepAtNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStepAtNode, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElcircTimeStepAtNode" "', argument " "1"" of type '" "ElcircTimeStepAtNode *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStepAtNode * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElcircTimeStepAtNode_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ElcircTimeStepAtNode, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ElioGrid_ne_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_ne_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_ne_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGrid_ne_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->ne = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_ne_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_ne_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_ne_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (int) ((arg1)->ne);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_np_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_np_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_np_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGrid_np_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->np = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_np_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_np_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_np_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (int) ((arg1)->np);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_x_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_x_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGrid_x_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_x_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_x_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (double *) ((arg1)->x);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_y_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_y_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGrid_y_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_y_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_y_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (double *) ((arg1)->y);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_d_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_d_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_d_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGrid_d_set" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  if (arg1) (arg1)->d = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_d_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_d_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_d_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (double *) ((arg1)->d);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_etype_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int *arg2 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_etype_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_etype_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  if (arg1) (arg1)->etype = arg2;
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_etype_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_etype_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_etype_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (int *) ((arg1)->etype);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_icon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int **arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGrid_icon_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_icon_set" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGrid_icon_set" "', argument " "2"" of type '" "int *[4]""'"); 
  } 
  arg2 = reinterpret_cast< int ** >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) arg1->icon[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""icon""' of type '""int *[4]""'");
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGrid_icon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int **result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGrid_icon_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGrid_icon_get" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  result = (int **)(int **) ((arg1)->icon);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_int, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ElioGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ElioGrid")) SWIG_fail;
  {
    try {
      result = (ElioGrid *)new ElioGrid();
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ElioGrid, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ElioGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ElioGrid",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElioGrid" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  {
    try {
      delete arg1;
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ElioGrid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ElioGrid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ElioReadGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  ElioGrid *arg2 = (ElioGrid *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioReadGrid",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioReadGrid" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioReadGrid" "', argument " "2"" of type '" "ElioGrid *""'"); 
  }
  arg2 = reinterpret_cast< ElioGrid * >(argp2);
  {
    try {
      result = (int)ElioReadGrid(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioFindElementInGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioFindElementInGrid",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioFindElementInGrid" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioFindElementInGrid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioFindElementInGrid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)ElioFindElementInGrid(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetCoefficientsGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioGetCoefficientsGrid",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetCoefficientsGrid" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetCoefficientsGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetCoefficientsGrid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetCoefficientsGrid" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetCoefficientsGrid" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)ElioGetCoefficientsGrid(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGridFindNearestNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioGridFindNearestNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGridFindNearestNode" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGridFindNearestNode" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGridFindNearestNode" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)ElioGridFindNearestNode(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioFindNearestNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioFindNearestNode",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioFindNearestNode" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioFindNearestNode" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioFindNearestNode" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)ElioFindNearestNode(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetGridElementCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioGetGridElementCenter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetGridElementCenter" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetGridElementCenter" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetGridElementCenter" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetGridElementCenter" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)ElioGetGridElementCenter(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetGridElementArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElioGrid *arg1 = (ElioGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetGridElementArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElioGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetGridElementArea" "', argument " "1"" of type '" "ElioGrid *""'"); 
  }
  arg1 = reinterpret_cast< ElioGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetGridElementArea" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)ElioGetGridElementArea(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetHeader" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetHeader" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioGetHeader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioAllocateHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioAllocateHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioAllocateHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    try {
      result = (int)ElioAllocateHeader(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioFreeHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioFreeHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioFreeHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    try {
      ElioFreeHeader(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioPrintHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioPrintHeader",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioPrintHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    try {
      ElioPrintHeader(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetNStepsInFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetNStepsInFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetNStepsInFile" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetNStepsInFile" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioGetNStepsInFile(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  ElcircHeader *arg3 = (ElcircHeader *) 0 ;
  ElcircTimeStep *arg4 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioGetTimeStep",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetTimeStep" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetTimeStep" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetTimeStep" "', argument " "3"" of type '" "ElcircHeader *""'"); 
  }
  arg3 = reinterpret_cast< ElcircHeader * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetTimeStep" "', argument " "4"" of type '" "ElcircTimeStep *""'"); 
  }
  arg4 = reinterpret_cast< ElcircTimeStep * >(argp4);
  {
    try {
      result = (int)ElioGetTimeStep(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioFreeTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioFreeTimeStep",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioFreeTimeStep" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  {
    try {
      ElioFreeTimeStep(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioAllocateTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircTimeStep *arg2 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioAllocateTimeStep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioAllocateTimeStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioAllocateTimeStep" "', argument " "2"" of type '" "ElcircTimeStep *""'"); 
  }
  arg2 = reinterpret_cast< ElcircTimeStep * >(argp2);
  {
    try {
      result = (int)ElioAllocateTimeStep(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  ElcircHeader *arg4 = (ElcircHeader *) 0 ;
  float *arg5 = (float *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  float *arg9 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:ElioGetNode",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetNode" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetNode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetNode" "', argument " "4"" of type '" "ElcircHeader *""'"); 
  }
  arg4 = reinterpret_cast< ElcircHeader * >(argp4);
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj8)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj8);
    arg9 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj8, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg9[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioGetNode(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetNodeOld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  ElcircHeader *arg4 = (ElcircHeader *) 0 ;
  float *arg5 = (float *) 0 ;
  int *arg6 = (int *) 0 ;
  float *arg7 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:ElioGetNodeOld",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetNodeOld" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetNodeOld" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetNodeOld" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetNodeOld" "', argument " "4"" of type '" "ElcircHeader *""'"); 
  }
  arg4 = reinterpret_cast< ElcircHeader * >(argp4);
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioGetNodeOld(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioExtractNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircTimeStep *arg1 = (ElcircTimeStep *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float *arg6 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioExtractNode",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioExtractNode" "', argument " "1"" of type '" "ElcircTimeStep *""'"); 
  }
  arg1 = reinterpret_cast< ElcircTimeStep * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioExtractNode" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioExtractNode" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioExtractNode" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElioExtractNode" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioExtractNode(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetXYData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  ElcircHeader *arg5 = (ElcircHeader *) 0 ;
  float *arg6 = (float *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:ElioGetXYData",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetXYData" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetXYData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetXYData" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetXYData" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetXYData" "', argument " "5"" of type '" "ElcircHeader *""'"); 
  }
  arg5 = reinterpret_cast< ElcircHeader * >(argp5);
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj8)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj8);
    arg9 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj8, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg9[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj9)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj9);
    arg10 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj9, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg10[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioGetXYData(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return resultobj;
fail:
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetXYData2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  ElcircHeader *arg4 = (ElcircHeader *) 0 ;
  double *arg5 = (double *) 0 ;
  float *arg6 = (float *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  float *arg10 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:ElioGetXYData2",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetXYData2" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetXYData2" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetXYData2" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetXYData2" "', argument " "4"" of type '" "ElcircHeader *""'"); 
  }
  arg4 = reinterpret_cast< ElcircHeader * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetXYData2" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj8)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj8);
    arg9 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj8, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg9[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj9)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj9);
    arg10 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj9, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg10[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioGetXYData2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  {
    if (arg10) free(arg10);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInterpTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  ElcircTimeStep *arg6 = (ElcircTimeStep *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  float *arg9 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:ElioInterpTimeStep",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioInterpTimeStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioInterpTimeStep" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioInterpTimeStep" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioInterpTimeStep" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioInterpTimeStep" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioInterpTimeStep" "', argument " "6"" of type '" "ElcircTimeStep *""'"); 
  }
  arg6 = reinterpret_cast< ElcircTimeStep * >(argp6);
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj8)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj8);
    arg9 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj8, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg9[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioInterpTimeStep(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  {
    if (arg9) free(arg9);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ElcircHeader *arg5 = (ElcircHeader *) 0 ;
  float *arg6 = (float *) 0 ;
  int *arg7 = (int *) 0 ;
  float *arg8 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ElioGetPoint",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetPoint" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetPoint" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetPoint" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetPoint" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetPoint" "', argument " "5"" of type '" "ElcircHeader *""'"); 
  }
  arg5 = reinterpret_cast< ElcircHeader * >(argp5);
  {
    int i,sz;
    
    if (!PySequence_Check(obj5)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj5);
    arg6 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj5, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg6[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj6)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj6);
    arg7 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj6, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg7[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj7)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj7);
    arg8 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj7, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg8[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioGetPoint(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return resultobj;
fail:
  {
    if (arg6) free(arg6);
  }
  {
    if (arg7) free(arg7);
  }
  {
    if (arg8) free(arg8);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioMakeScalarsOld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioMakeScalarsOld",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioMakeScalarsOld" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioMakeScalarsOld(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioMakeVectorsOld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioMakeVectorsOld",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioMakeVectorsOld" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (float *) malloc(sz*sizeof(float));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (float) PyFloat_AsDouble(o);
    }
  }
  {
    try {
      result = (int)ElioMakeVectorsOld(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioExtractGrid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int *arg5 = (int *) 0 ;
  ElcircHeader *arg6 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioExtractGrid",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioExtractGrid" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioExtractGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioExtractGrid" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioExtractGrid" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (int) PyInt_AsLong(o);
    }
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioExtractGrid" "', argument " "6"" of type '" "ElcircHeader *""'"); 
  }
  arg6 = reinterpret_cast< ElcircHeader * >(argp6);
  {
    try {
      result = (int)ElioExtractGrid(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioExtractData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  int *arg3 = (int *) 0 ;
  ElcircTimeStep arg4 ;
  ElcircTimeStep *arg5 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioExtractData",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioExtractData" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioExtractData" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioExtractData" "', argument " "4"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioExtractData" "', argument " "4"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioExtractData" "', argument " "5"" of type '" "ElcircTimeStep *""'"); 
  }
  arg5 = reinterpret_cast< ElcircTimeStep * >(argp5);
  {
    try {
      result = (int)ElioExtractData(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioIntersectToLeft(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioIntersectToLeft",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioIntersectToLeft" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioIntersectToLeft" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioIntersectToLeft" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioIntersectToLeft" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElioIntersectToLeft" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ElioIntersectToLeft" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (int)ElioIntersectToLeft(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInPolygon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioInPolygon",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioInPolygon" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioInPolygon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioInPolygon" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioInPolygon" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioInPolygon" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)ElioInPolygon(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  return resultobj;
fail:
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioFindElementXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioFindElementXY",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioFindElementXY" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioFindElementXY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioFindElementXY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)ElioFindElementXY(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInsideElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ElioInsideElement",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioInsideElement" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioInsideElement" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioInsideElement" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioInsideElement" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElioInsideElement" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ElioInsideElement" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ElioInsideElement" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ElioInsideElement" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (int)ElioInsideElement(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInsideElement4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:ElioInsideElement4",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioInsideElement4" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioInsideElement4" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioInsideElement4" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioInsideElement4" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElioInsideElement4" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ElioInsideElement4" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ElioInsideElement4" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ElioInsideElement4" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ElioInsideElement4" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ElioInsideElement4" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    try {
      result = (int)ElioInsideElement4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioEvalFlowXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioEvalFlowXY",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioEvalFlowXY" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioEvalFlowXY" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioEvalFlowXY" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioEvalFlowXY" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioEvalFlowXY" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioEvalFlowXY" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (int)ElioEvalFlowXY(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioEvalScalarXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioEvalScalarXY",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioEvalScalarXY" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioEvalScalarXY" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioEvalScalarXY" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioEvalScalarXY" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)ElioEvalScalarXY(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioEval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioEval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioEval" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioEval" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioEval" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioEval" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)ElioEval(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetCoefficients(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioGetCoefficients",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetCoefficients" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetCoefficients" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetCoefficients" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetCoefficients" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetCoefficients" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  {
    try {
      result = (int)ElioGetCoefficients(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ibilinear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  void *argp12 = 0 ;
  int res12 = 0 ;
  void *argp13 = 0 ;
  int res13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOO:ibilinear",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ibilinear" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ibilinear" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ibilinear" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ibilinear" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ibilinear" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ibilinear" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ibilinear" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ibilinear" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ibilinear" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ibilinear" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  res11 = SWIG_ConvertPtr(obj10, &argp11,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res11)) {
    SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "ibilinear" "', argument " "11"" of type '" "double *""'"); 
  }
  arg11 = reinterpret_cast< double * >(argp11);
  res12 = SWIG_ConvertPtr(obj11, &argp12,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res12)) {
    SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "ibilinear" "', argument " "12"" of type '" "double *""'"); 
  }
  arg12 = reinterpret_cast< double * >(argp12);
  res13 = SWIG_ConvertPtr(obj12, &argp13,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res13)) {
    SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "ibilinear" "', argument " "13"" of type '" "double *""'"); 
  }
  arg13 = reinterpret_cast< double * >(argp13);
  {
    try {
      result = (int)ibilinear(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg11) free(arg11);
  }
  {
    if (arg12) free(arg12);
  }
  {
    if (arg13) free(arg13);
  }
  return resultobj;
fail:
  {
    if (arg11) free(arg11);
  }
  {
    if (arg12) free(arg12);
  }
  {
    if (arg13) free(arg13);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetZPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  double arg2 ;
  double arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioGetZPos",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetZPos" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetZPos" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetZPos" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    int i,sz;
    
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj3);
    arg4 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj3, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg4[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (int) PyInt_AsLong(o);
    }
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioGetZPos" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      result = (int)ElioGetZPos(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetSurfaceHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetSurfaceHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetSurfaceHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetSurfaceHeader" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioGetSurfaceHeader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetSurfaceStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  ElcircTimeStep arg3 ;
  ElcircTimeStep *arg4 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioGetSurfaceStep",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetSurfaceStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetSurfaceStep" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetSurfaceStep" "', argument " "3"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioGetSurfaceStep" "', argument " "3"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetSurfaceStep" "', argument " "4"" of type '" "ElcircTimeStep *""'"); 
  }
  arg4 = reinterpret_cast< ElcircTimeStep * >(argp4);
  {
    try {
      result = (int)ElioGetSurfaceStep(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetBottomHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetBottomHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetBottomHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetBottomHeader" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioGetBottomHeader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetBottomStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  ElcircTimeStep arg3 ;
  ElcircTimeStep *arg4 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioGetBottomStep",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetBottomStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetBottomStep" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetBottomStep" "', argument " "3"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioGetBottomStep" "', argument " "3"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetBottomStep" "', argument " "4"" of type '" "ElcircTimeStep *""'"); 
  }
  arg4 = reinterpret_cast< ElcircTimeStep * >(argp4);
  {
    try {
      result = (int)ElioGetBottomStep(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetTransectHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  ElcircHeader *arg5 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioGetTransectHeader",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetTransectHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetTransectHeader" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetTransectHeader" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioGetTransectHeader" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetTransectHeader" "', argument " "5"" of type '" "ElcircHeader *""'"); 
  }
  arg5 = reinterpret_cast< ElcircHeader * >(argp5);
  {
    try {
      result = (int)ElioGetTransectHeader(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return resultobj;
fail:
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetTransectStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  int arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  ElcircTimeStep arg7 ;
  ElcircTimeStep *arg8 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  void *argp7 ;
  int res7 = 0 ;
  void *argp8 = 0 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:ElioGetTransectStep",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetTransectStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetTransectStep" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetTransectStep" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetTransectStep" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetTransectStep" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioGetTransectStep" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    res7 = SWIG_ConvertPtr(obj6, &argp7, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "ElioGetTransectStep" "', argument " "7"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioGetTransectStep" "', argument " "7"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp7);
      arg7 = *temp;
      if (SWIG_IsNewObj(res7)) delete temp;
    }
  }
  res8 = SWIG_ConvertPtr(obj7, &argp8,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "ElioGetTransectStep" "', argument " "8"" of type '" "ElcircTimeStep *""'"); 
  }
  arg8 = reinterpret_cast< ElcircTimeStep * >(argp8);
  {
    try {
      result = (int)ElioGetTransectStep(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetLevelHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetLevelHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetLevelHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetLevelHeader" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioGetLevelHeader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetLevelStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  ElcircTimeStep arg3 ;
  int arg4 ;
  ElcircTimeStep *arg5 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioGetLevelStep",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetLevelStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetLevelStep" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetLevelStep" "', argument " "3"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioGetLevelStep" "', argument " "3"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetLevelStep" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetLevelStep" "', argument " "5"" of type '" "ElcircTimeStep *""'"); 
  }
  arg5 = reinterpret_cast< ElcircTimeStep * >(argp5);
  {
    try {
      result = (int)ElioGetLevelStep(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetZLevelHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetZLevelHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetZLevelHeader" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetZLevelHeader" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioGetZLevelHeader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetZLevelStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  ElcircTimeStep arg3 ;
  float arg4 ;
  ElcircTimeStep *arg5 = (ElcircTimeStep *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioGetZLevelStep",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetZLevelStep" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioGetZLevelStep" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioGetZLevelStep" "', argument " "3"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioGetZLevelStep" "', argument " "3"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetZLevelStep" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_ElcircTimeStep, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioGetZLevelStep" "', argument " "5"" of type '" "ElcircTimeStep *""'"); 
  }
  arg5 = reinterpret_cast< ElcircTimeStep * >(argp5);
  {
    try {
      result = (int)ElioGetZLevelStep(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioPutHeader(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioPutHeader",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioPutHeader" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioPutHeader" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioPutHeader(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioPutTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  ElcircTimeStep arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioPutTimeStep",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioPutTimeStep" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioPutTimeStep" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioPutTimeStep" "', argument " "3"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioPutTimeStep" "', argument " "3"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (int)ElioPutTimeStep(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioPutHeaderOld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioPutHeaderOld",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioPutHeaderOld" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioPutHeaderOld" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    try {
      result = (int)ElioPutHeaderOld(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioPutTimeStepOld(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  ElcircHeader *arg2 = (ElcircHeader *) 0 ;
  ElcircTimeStep arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioPutTimeStepOld",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioPutTimeStepOld" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioPutTimeStepOld" "', argument " "2"" of type '" "ElcircHeader *""'"); 
  }
  arg2 = reinterpret_cast< ElcircHeader * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_ElcircTimeStep,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioPutTimeStepOld" "', argument " "3"" of type '" "ElcircTimeStep""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElioPutTimeStepOld" "', argument " "3"" of type '" "ElcircTimeStep""'");
    } else {
      ElcircTimeStep * temp = reinterpret_cast< ElcircTimeStep * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (int)ElioPutTimeStepOld(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetFileType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FILE *arg1 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioGetFileType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetFileType" "', argument " "1"" of type '" "FILE *""'"); 
  }
  arg1 = reinterpret_cast< FILE * >(argp1);
  {
    try {
      result = (int)ElioGetFileType(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetElementArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ElcircHeader *arg1 = (ElcircHeader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioGetElementArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ElcircHeader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElioGetElementArea" "', argument " "1"" of type '" "ElcircHeader *""'"); 
  }
  arg1 = reinterpret_cast< ElcircHeader * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetElementArea" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (double)ElioGetElementArea(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioMinMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioMinMax",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioMinMax" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioMinMax" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioMinMax" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ElioMinMax" "', argument " "4"" of type '" "double *""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (int)ElioMinMax(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioIntMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioIntMin",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioIntMin" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    try {
      result = (int)ElioIntMin(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioIntMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ElioIntMax",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioIntMax" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    try {
      result = (int)ElioIntMax(arg1,arg2);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioFindIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ElioFindIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioFindIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioFindIndex" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioFindIndex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (int)ElioFindIndex(arg1,arg2,arg3);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    if (arg2) free(arg2);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInterpolateArray(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioInterpolateArray",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioInterpolateArray" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioInterpolateArray" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioInterpolateArray" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioInterpolateArray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ElioInterpolateArray" "', argument " "5"" of type '" "double *""'"); 
  }
  arg5 = reinterpret_cast< double * >(argp5);
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioInterpolateArray" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ElioInterpolateArray(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInterpolate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ElioInterpolate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioInterpolate" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioInterpolate" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioInterpolate" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioInterpolate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (double)ElioInterpolate(arg1,arg2,arg3,arg4);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioInterpolateAtIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:ElioInterpolateAtIndex",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioInterpolateAtIndex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElioInterpolateAtIndex" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElioInterpolateAtIndex" "', argument " "3"" of type '" "double *""'"); 
  }
  arg3 = reinterpret_cast< double * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioInterpolateAtIndex" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElioInterpolateAtIndex" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (double)ElioInterpolateAtIndex(arg1,arg2,arg3,arg4,arg5);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioGetDay",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioGetDay" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElioGetDay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ElioGetDay" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ElioGetDay" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ElioGetDay" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ElioGetDay" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (double)ElioGetDay(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioGetYearDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  double *arg6 = (double *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:ElioGetYearDay",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioGetYearDay" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    int i,sz;
    
    if (!PySequence_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj1);
    arg2 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj1, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg2[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj2);
    arg3 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj2, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg3[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj3)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj3);
    arg4 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj3, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg4[i] = (int) PyInt_AsLong(o);
    }
  }
  {
    int i,sz;
    
    if (!PySequence_Check(obj4)) {
      PyErr_SetString(PyExc_TypeError, "Expected a sequence");
      return NULL;
    }
    
    sz = PySequence_Size(obj4);
    arg5 = (int *) malloc(sz*sizeof(int));
    for (i = 0; i < sz; i++) {
      PyObject *o = PySequence_GetItem(obj4, i);
      if (!PyNumber_Check(o)) {
        PyErr_SetString(PyExc_TypeError, "Sequence elements must be numbers");
        return NULL;
      }
      arg5[i] = (int) PyInt_AsLong(o);
    }
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "ElioGetYearDay" "', argument " "6"" of type '" "double *""'"); 
  }
  arg6 = reinterpret_cast< double * >(argp6);
  {
    try {
      ElioGetYearDay(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return resultobj;
fail:
  {
    if (arg2) free(arg2);
  }
  {
    if (arg3) free(arg3);
  }
  {
    if (arg4) free(arg4);
  }
  {
    if (arg5) free(arg5);
  }
  {
    if (arg6) free(arg6);
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ElioSetCorieTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ElioSetCorieTime",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ElioSetCorieTime" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      ElioSetCorieTime(arg1);
    } catch(std::string e) {
      PyErr_SetString(PyExc_Exception, e.c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"castToCellArray", _wrap_castToCellArray, METH_VARARGS, NULL},
	 { (char *)"vectori_iterator", _wrap_vectori_iterator, METH_VARARGS, NULL},
	 { (char *)"vectori___nonzero__", _wrap_vectori___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectori___bool__", _wrap_vectori___bool__, METH_VARARGS, NULL},
	 { (char *)"vectori___len__", _wrap_vectori___len__, METH_VARARGS, NULL},
	 { (char *)"vectori_pop", _wrap_vectori_pop, METH_VARARGS, NULL},
	 { (char *)"vectori___getslice__", _wrap_vectori___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___setslice__", _wrap_vectori___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delslice__", _wrap_vectori___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectori___delitem__", _wrap_vectori___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___getitem__", _wrap_vectori___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectori___setitem__", _wrap_vectori___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectori_append", _wrap_vectori_append, METH_VARARGS, NULL},
	 { (char *)"vectori_empty", _wrap_vectori_empty, METH_VARARGS, NULL},
	 { (char *)"vectori_size", _wrap_vectori_size, METH_VARARGS, NULL},
	 { (char *)"vectori_clear", _wrap_vectori_clear, METH_VARARGS, NULL},
	 { (char *)"vectori_swap", _wrap_vectori_swap, METH_VARARGS, NULL},
	 { (char *)"vectori_get_allocator", _wrap_vectori_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectori_begin", _wrap_vectori_begin, METH_VARARGS, NULL},
	 { (char *)"vectori_end", _wrap_vectori_end, METH_VARARGS, NULL},
	 { (char *)"vectori_rbegin", _wrap_vectori_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectori_rend", _wrap_vectori_rend, METH_VARARGS, NULL},
	 { (char *)"vectori_pop_back", _wrap_vectori_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectori_erase", _wrap_vectori_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectori", _wrap_new_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_push_back", _wrap_vectori_push_back, METH_VARARGS, NULL},
	 { (char *)"vectori_front", _wrap_vectori_front, METH_VARARGS, NULL},
	 { (char *)"vectori_back", _wrap_vectori_back, METH_VARARGS, NULL},
	 { (char *)"vectori_assign", _wrap_vectori_assign, METH_VARARGS, NULL},
	 { (char *)"vectori_resize", _wrap_vectori_resize, METH_VARARGS, NULL},
	 { (char *)"vectori_insert", _wrap_vectori_insert, METH_VARARGS, NULL},
	 { (char *)"vectori_reserve", _wrap_vectori_reserve, METH_VARARGS, NULL},
	 { (char *)"vectori_capacity", _wrap_vectori_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectori", _wrap_delete_vectori, METH_VARARGS, NULL},
	 { (char *)"vectori_swigregister", vectori_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectord_iterator", _wrap_vectord_iterator, METH_VARARGS, NULL},
	 { (char *)"vectord___nonzero__", _wrap_vectord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectord___bool__", _wrap_vectord___bool__, METH_VARARGS, NULL},
	 { (char *)"vectord___len__", _wrap_vectord___len__, METH_VARARGS, NULL},
	 { (char *)"vectord_pop", _wrap_vectord_pop, METH_VARARGS, NULL},
	 { (char *)"vectord___getslice__", _wrap_vectord___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___setslice__", _wrap_vectord___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delslice__", _wrap_vectord___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectord___delitem__", _wrap_vectord___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___getitem__", _wrap_vectord___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectord___setitem__", _wrap_vectord___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectord_append", _wrap_vectord_append, METH_VARARGS, NULL},
	 { (char *)"vectord_empty", _wrap_vectord_empty, METH_VARARGS, NULL},
	 { (char *)"vectord_size", _wrap_vectord_size, METH_VARARGS, NULL},
	 { (char *)"vectord_clear", _wrap_vectord_clear, METH_VARARGS, NULL},
	 { (char *)"vectord_swap", _wrap_vectord_swap, METH_VARARGS, NULL},
	 { (char *)"vectord_get_allocator", _wrap_vectord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectord_begin", _wrap_vectord_begin, METH_VARARGS, NULL},
	 { (char *)"vectord_end", _wrap_vectord_end, METH_VARARGS, NULL},
	 { (char *)"vectord_rbegin", _wrap_vectord_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectord_rend", _wrap_vectord_rend, METH_VARARGS, NULL},
	 { (char *)"vectord_pop_back", _wrap_vectord_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectord_erase", _wrap_vectord_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectord", _wrap_new_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_push_back", _wrap_vectord_push_back, METH_VARARGS, NULL},
	 { (char *)"vectord_front", _wrap_vectord_front, METH_VARARGS, NULL},
	 { (char *)"vectord_back", _wrap_vectord_back, METH_VARARGS, NULL},
	 { (char *)"vectord_assign", _wrap_vectord_assign, METH_VARARGS, NULL},
	 { (char *)"vectord_resize", _wrap_vectord_resize, METH_VARARGS, NULL},
	 { (char *)"vectord_insert", _wrap_vectord_insert, METH_VARARGS, NULL},
	 { (char *)"vectord_reserve", _wrap_vectord_reserve, METH_VARARGS, NULL},
	 { (char *)"vectord_capacity", _wrap_vectord_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectord", _wrap_delete_vectord, METH_VARARGS, NULL},
	 { (char *)"vectord_swigregister", vectord_swigregister, METH_VARARGS, NULL},
	 { (char *)"vectorS_iterator", _wrap_vectorS_iterator, METH_VARARGS, NULL},
	 { (char *)"vectorS___nonzero__", _wrap_vectorS___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vectorS___bool__", _wrap_vectorS___bool__, METH_VARARGS, NULL},
	 { (char *)"vectorS___len__", _wrap_vectorS___len__, METH_VARARGS, NULL},
	 { (char *)"vectorS_pop", _wrap_vectorS_pop, METH_VARARGS, NULL},
	 { (char *)"vectorS___getslice__", _wrap_vectorS___getslice__, METH_VARARGS, NULL},
	 { (char *)"vectorS___setslice__", _wrap_vectorS___setslice__, METH_VARARGS, NULL},
	 { (char *)"vectorS___delslice__", _wrap_vectorS___delslice__, METH_VARARGS, NULL},
	 { (char *)"vectorS___delitem__", _wrap_vectorS___delitem__, METH_VARARGS, NULL},
	 { (char *)"vectorS___getitem__", _wrap_vectorS___getitem__, METH_VARARGS, NULL},
	 { (char *)"vectorS___setitem__", _wrap_vectorS___setitem__, METH_VARARGS, NULL},
	 { (char *)"vectorS_append", _wrap_vectorS_append, METH_VARARGS, NULL},
	 { (char *)"vectorS_empty", _wrap_vectorS_empty, METH_VARARGS, NULL},
	 { (char *)"vectorS_size", _wrap_vectorS_size, METH_VARARGS, NULL},
	 { (char *)"vectorS_clear", _wrap_vectorS_clear, METH_VARARGS, NULL},
	 { (char *)"vectorS_swap", _wrap_vectorS_swap, METH_VARARGS, NULL},
	 { (char *)"vectorS_get_allocator", _wrap_vectorS_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vectorS_begin", _wrap_vectorS_begin, METH_VARARGS, NULL},
	 { (char *)"vectorS_end", _wrap_vectorS_end, METH_VARARGS, NULL},
	 { (char *)"vectorS_rbegin", _wrap_vectorS_rbegin, METH_VARARGS, NULL},
	 { (char *)"vectorS_rend", _wrap_vectorS_rend, METH_VARARGS, NULL},
	 { (char *)"vectorS_pop_back", _wrap_vectorS_pop_back, METH_VARARGS, NULL},
	 { (char *)"vectorS_erase", _wrap_vectorS_erase, METH_VARARGS, NULL},
	 { (char *)"new_vectorS", _wrap_new_vectorS, METH_VARARGS, NULL},
	 { (char *)"vectorS_push_back", _wrap_vectorS_push_back, METH_VARARGS, NULL},
	 { (char *)"vectorS_front", _wrap_vectorS_front, METH_VARARGS, NULL},
	 { (char *)"vectorS_back", _wrap_vectorS_back, METH_VARARGS, NULL},
	 { (char *)"vectorS_assign", _wrap_vectorS_assign, METH_VARARGS, NULL},
	 { (char *)"vectorS_resize", _wrap_vectorS_resize, METH_VARARGS, NULL},
	 { (char *)"vectorS_insert", _wrap_vectorS_insert, METH_VARARGS, NULL},
	 { (char *)"vectorS_reserve", _wrap_vectorS_reserve, METH_VARARGS, NULL},
	 { (char *)"vectorS_capacity", _wrap_vectorS_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_vectorS", _wrap_delete_vectorS, METH_VARARGS, NULL},
	 { (char *)"vectorS_swigregister", vectorS_swigregister, METH_VARARGS, NULL},
	 { (char *)"derefFloat", _wrap_derefFloat, METH_VARARGS, NULL},
	 { (char *)"derefInt", _wrap_derefInt, METH_VARARGS, NULL},
	 { (char *)"derefPyObject", _wrap_derefPyObject, METH_VARARGS, NULL},
	 { (char *)"derefPyString", _wrap_derefPyString, METH_VARARGS, NULL},
	 { (char *)"derefString", _wrap_derefString, METH_VARARGS, NULL},
	 { (char *)"asPyObject", _wrap_asPyObject, METH_VARARGS, NULL},
	 { (char *)"asPyString", _wrap_asPyString, METH_VARARGS, NULL},
	 { (char *)"makeArrayReader", _wrap_makeArrayReader, METH_VARARGS, NULL},
	 { (char *)"asUnTypedPtr", _wrap_asUnTypedPtr, METH_VARARGS, NULL},
	 { (char *)"print_array", _wrap_print_array, METH_VARARGS, NULL},
	 { (char *)"testsign", _wrap_testsign, METH_VARARGS, NULL},
	 { (char *)"new_Object", _wrap_new_Object, METH_VARARGS, NULL},
	 { (char *)"Object_ref", _wrap_Object_ref, METH_VARARGS, NULL},
	 { (char *)"Object_norefs", _wrap_Object_norefs, METH_VARARGS, NULL},
	 { (char *)"Object_unref", _wrap_Object_unref, METH_VARARGS, NULL},
	 { (char *)"Object_refcount_set", _wrap_Object_refcount_set, METH_VARARGS, NULL},
	 { (char *)"Object_refcount_get", _wrap_Object_refcount_get, METH_VARARGS, NULL},
	 { (char *)"delete_Object", _wrap_delete_Object, METH_VARARGS, NULL},
	 { (char *)"Object_swigregister", Object_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_GridFieldOperator", _wrap_delete_GridFieldOperator, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_getResult", _wrap_GridFieldOperator_getResult, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_Execute", _wrap_GridFieldOperator_Execute, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_Update", _wrap_GridFieldOperator_Update, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_clearResult", _wrap_GridFieldOperator_clearResult, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_Updated", _wrap_GridFieldOperator_Updated, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_getModTime", _wrap_GridFieldOperator_getModTime, METH_VARARGS, NULL},
	 { (char *)"GridFieldOperator_swigregister", GridFieldOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"ZeroaryGridFieldOperator_Updated", _wrap_ZeroaryGridFieldOperator_Updated, METH_VARARGS, NULL},
	 { (char *)"delete_ZeroaryGridFieldOperator", _wrap_delete_ZeroaryGridFieldOperator, METH_VARARGS, NULL},
	 { (char *)"ZeroaryGridFieldOperator_swigregister", ZeroaryGridFieldOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"UnaryGridFieldOperator_Updated", _wrap_UnaryGridFieldOperator_Updated, METH_VARARGS, NULL},
	 { (char *)"UnaryGridFieldOperator_GetPrevious", _wrap_UnaryGridFieldOperator_GetPrevious, METH_VARARGS, NULL},
	 { (char *)"UnaryGridFieldOperator_SetPrevious", _wrap_UnaryGridFieldOperator_SetPrevious, METH_VARARGS, NULL},
	 { (char *)"delete_UnaryGridFieldOperator", _wrap_delete_UnaryGridFieldOperator, METH_VARARGS, NULL},
	 { (char *)"UnaryGridFieldOperator_swigregister", UnaryGridFieldOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"BinaryGridFieldOperator_Updated", _wrap_BinaryGridFieldOperator_Updated, METH_VARARGS, NULL},
	 { (char *)"BinaryGridFieldOperator_GetLeft", _wrap_BinaryGridFieldOperator_GetLeft, METH_VARARGS, NULL},
	 { (char *)"BinaryGridFieldOperator_SetLeft", _wrap_BinaryGridFieldOperator_SetLeft, METH_VARARGS, NULL},
	 { (char *)"BinaryGridFieldOperator_GetRight", _wrap_BinaryGridFieldOperator_GetRight, METH_VARARGS, NULL},
	 { (char *)"BinaryGridFieldOperator_SetRight", _wrap_BinaryGridFieldOperator_SetRight, METH_VARARGS, NULL},
	 { (char *)"delete_BinaryGridFieldOperator", _wrap_delete_BinaryGridFieldOperator, METH_VARARGS, NULL},
	 { (char *)"BinaryGridFieldOperator_swigregister", BinaryGridFieldOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_SetShape", _wrap_RankedDataset_SetShape, METH_VARARGS, NULL},
	 { (char *)"new_RankedDataset", _wrap_new_RankedDataset, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Dim", _wrap_RankedDataset_Dim, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetVoidPointer", _wrap_RankedDataset_GetVoidPointer, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_BeginInt", _wrap_RankedDataset_BeginInt, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_EndInt", _wrap_RankedDataset_EndInt, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_BeginFloat", _wrap_RankedDataset_BeginFloat, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_EndFloat", _wrap_RankedDataset_EndFloat, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Clear", _wrap_RankedDataset_Clear, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_CoerceScheme", _wrap_RankedDataset_CoerceScheme, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_AddAttribute", _wrap_RankedDataset_AddAttribute, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Bind", _wrap_RankedDataset_Bind, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_unBind", _wrap_RankedDataset_unBind, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_unref", _wrap_RankedDataset_unref, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetScheme", _wrap_RankedDataset_GetScheme, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_IsAttribute", _wrap_RankedDataset_IsAttribute, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetAttribute", _wrap_RankedDataset_GetAttribute, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_RemoveAttribute", _wrap_RankedDataset_RemoveAttribute, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetAttributeValue", _wrap_RankedDataset_GetAttributeValue, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetFloatAttributeValue", _wrap_RankedDataset_GetFloatAttributeValue, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetIntAttributeValue", _wrap_RankedDataset_GetIntAttributeValue, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Arity", _wrap_RankedDataset_Arity, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Size", _wrap_RankedDataset_Size, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_MaxRank", _wrap_RankedDataset_MaxRank, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Apply", _wrap_RankedDataset_Apply, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_GetDataset", _wrap_RankedDataset_GetDataset, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_Zip", _wrap_RankedDataset_Zip, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_PrintTo", _wrap_RankedDataset_PrintTo, METH_VARARGS, NULL},
	 { (char *)"delete_RankedDataset", _wrap_delete_RankedDataset, METH_VARARGS, NULL},
	 { (char *)"RankedDataset_swigregister", RankedDataset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Dataset", _wrap_new_Dataset, METH_VARARGS, NULL},
	 { (char *)"delete_Dataset", _wrap_delete_Dataset, METH_VARARGS, NULL},
	 { (char *)"Dataset_AddAttribute", _wrap_Dataset_AddAttribute, METH_VARARGS, NULL},
	 { (char *)"Dataset_RemoveAttribute", _wrap_Dataset_RemoveAttribute, METH_VARARGS, NULL},
	 { (char *)"Dataset_Zip", _wrap_Dataset_Zip, METH_VARARGS, NULL},
	 { (char *)"Dataset_Clear", _wrap_Dataset_Clear, METH_VARARGS, NULL},
	 { (char *)"Dataset_CoerceScheme", _wrap_Dataset_CoerceScheme, METH_VARARGS, NULL},
	 { (char *)"Dataset_Apply", _wrap_Dataset_Apply, METH_VARARGS, NULL},
	 { (char *)"Dataset_recordOrdinals", _wrap_Dataset_recordOrdinals, METH_VARARGS, NULL},
	 { (char *)"Dataset_FilterBy", _wrap_Dataset_FilterBy, METH_VARARGS, NULL},
	 { (char *)"Dataset_BeginInt", _wrap_Dataset_BeginInt, METH_VARARGS, NULL},
	 { (char *)"Dataset_EndInt", _wrap_Dataset_EndInt, METH_VARARGS, NULL},
	 { (char *)"Dataset_BeginFloat", _wrap_Dataset_BeginFloat, METH_VARARGS, NULL},
	 { (char *)"Dataset_EndFloat", _wrap_Dataset_EndFloat, METH_VARARGS, NULL},
	 { (char *)"Dataset_IsEmpty", _wrap_Dataset_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"Dataset_IsAttribute", _wrap_Dataset_IsAttribute, METH_VARARGS, NULL},
	 { (char *)"Dataset_GetAttribute", _wrap_Dataset_GetAttribute, METH_VARARGS, NULL},
	 { (char *)"Dataset_GetVoidPointer", _wrap_Dataset_GetVoidPointer, METH_VARARGS, NULL},
	 { (char *)"Dataset_GetAttributeVal", _wrap_Dataset_GetAttributeVal, METH_VARARGS, NULL},
	 { (char *)"Dataset_FastBindTuple", _wrap_Dataset_FastBindTuple, METH_VARARGS, NULL},
	 { (char *)"Dataset_BindTuple", _wrap_Dataset_BindTuple, METH_VARARGS, NULL},
	 { (char *)"Dataset_Size", _wrap_Dataset_Size, METH_VARARGS, NULL},
	 { (char *)"Dataset_Arity", _wrap_Dataset_Arity, METH_VARARGS, NULL},
	 { (char *)"Dataset_GetScheme", _wrap_Dataset_GetScheme, METH_VARARGS, NULL},
	 { (char *)"Dataset_PrintTo", _wrap_Dataset_PrintTo, METH_VARARGS, NULL},
	 { (char *)"Dataset_show", _wrap_Dataset_show, METH_VARARGS, NULL},
	 { (char *)"Dataset_nearest", _wrap_Dataset_nearest, METH_VARARGS, NULL},
	 { (char *)"Dataset_lookupFloat", _wrap_Dataset_lookupFloat, METH_VARARGS, NULL},
	 { (char *)"Dataset_lookupInt", _wrap_Dataset_lookupInt, METH_VARARGS, NULL},
	 { (char *)"Dataset_swigregister", Dataset_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GridField", _wrap_new_GridField, METH_VARARGS, NULL},
	 { (char *)"delete_GridField", _wrap_delete_GridField, METH_VARARGS, NULL},
	 { (char *)"GridField_setGrid", _wrap_GridField_setGrid, METH_VARARGS, NULL},
	 { (char *)"GridField_nearest", _wrap_GridField_nearest, METH_VARARGS, NULL},
	 { (char *)"GridField_lookupInt", _wrap_GridField_lookupInt, METH_VARARGS, NULL},
	 { (char *)"GridField_lookupFloat", _wrap_GridField_lookupFloat, METH_VARARGS, NULL},
	 { (char *)"GridField_Clear", _wrap_GridField_Clear, METH_VARARGS, NULL},
	 { (char *)"GridField_getKCell", _wrap_GridField_getKCell, METH_VARARGS, NULL},
	 { (char *)"GridField_unref", _wrap_GridField_unref, METH_VARARGS, NULL},
	 { (char *)"GridField_notValid", _wrap_GridField_notValid, METH_VARARGS, NULL},
	 { (char *)"GridField_RestrictAll", _wrap_GridField_RestrictAll, METH_VARARGS, NULL},
	 { (char *)"GridField_RangeRestrict", _wrap_GridField_RangeRestrict, METH_VARARGS, NULL},
	 { (char *)"GridField_show", _wrap_GridField_show, METH_VARARGS, NULL},
	 { (char *)"GridField_PrintTo", _wrap_GridField_PrintTo, METH_VARARGS, NULL},
	 { (char *)"GridField_PrepareForExecution", _wrap_GridField_PrepareForExecution, METH_VARARGS, NULL},
	 { (char *)"GridField_Updated", _wrap_GridField_Updated, METH_VARARGS, NULL},
	 { (char *)"GridField_Execute", _wrap_GridField_Execute, METH_VARARGS, NULL},
	 { (char *)"GridField_Dim", _wrap_GridField_Dim, METH_VARARGS, NULL},
	 { (char *)"GridField_Card", _wrap_GridField_Card, METH_VARARGS, NULL},
	 { (char *)"GridField_GetGrid", _wrap_GridField_GetGrid, METH_VARARGS, NULL},
	 { (char *)"GridField_ref", _wrap_GridField_ref, METH_VARARGS, NULL},
	 { (char *)"GridField_swigregister", GridField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitGridField", _wrap_new_UnitGridField, METH_VARARGS, NULL},
	 { (char *)"UnitGridField_Bind", _wrap_UnitGridField_Bind, METH_VARARGS, NULL},
	 { (char *)"delete_UnitGridField", _wrap_delete_UnitGridField, METH_VARARGS, NULL},
	 { (char *)"UnitGridField_swigregister", UnitGridField_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Array", _wrap_new_Array, METH_VARARGS, NULL},
	 { (char *)"Array_makeArray", _wrap_Array_makeArray, METH_VARARGS, NULL},
	 { (char *)"Array_unref", _wrap_Array_unref, METH_VARARGS, NULL},
	 { (char *)"Array_ref", _wrap_Array_ref, METH_VARARGS, NULL},
	 { (char *)"delete_Array", _wrap_delete_Array, METH_VARARGS, NULL},
	 { (char *)"Array_fill", _wrap_Array_fill, METH_VARARGS, NULL},
	 { (char *)"Array_copyAndFilter", _wrap_Array_copyAndFilter, METH_VARARGS, NULL},
	 { (char *)"Array_copy", _wrap_Array_copy, METH_VARARGS, NULL},
	 { (char *)"Array_copyIntData", _wrap_Array_copyIntData, METH_VARARGS, NULL},
	 { (char *)"Array_shareIntData", _wrap_Array_shareIntData, METH_VARARGS, NULL},
	 { (char *)"Array_copyFloatData", _wrap_Array_copyFloatData, METH_VARARGS, NULL},
	 { (char *)"Array_shareFloatData", _wrap_Array_shareFloatData, METH_VARARGS, NULL},
	 { (char *)"Array_copyObjData", _wrap_Array_copyObjData, METH_VARARGS, NULL},
	 { (char *)"Array_shareObjData", _wrap_Array_shareObjData, METH_VARARGS, NULL},
	 { (char *)"Array_getData", _wrap_Array_getData, METH_VARARGS, NULL},
	 { (char *)"Array_set", _wrap_Array_set, METH_VARARGS, NULL},
	 { (char *)"Array_size", _wrap_Array_size, METH_VARARGS, NULL},
	 { (char *)"Array_gettype", _wrap_Array_gettype, METH_VARARGS, NULL},
	 { (char *)"Array_sname", _wrap_Array_sname, METH_VARARGS, NULL},
	 { (char *)"Array_setVals", _wrap_Array_setVals, METH_VARARGS, NULL},
	 { (char *)"Array_getVals", _wrap_Array_getVals, METH_VARARGS, NULL},
	 { (char *)"Array_getValPtr", _wrap_Array_getValPtr, METH_VARARGS, NULL},
	 { (char *)"Array_getValInt", _wrap_Array_getValInt, METH_VARARGS, NULL},
	 { (char *)"Array_next", _wrap_Array_next, METH_VARARGS, NULL},
	 { (char *)"Array_expand", _wrap_Array_expand, METH_VARARGS, NULL},
	 { (char *)"Array_repeat", _wrap_Array_repeat, METH_VARARGS, NULL},
	 { (char *)"Array_cast", _wrap_Array_cast, METH_VARARGS, NULL},
	 { (char *)"Array_UnSafeCast", _wrap_Array_UnSafeCast, METH_VARARGS, NULL},
	 { (char *)"Array_show", _wrap_Array_show, METH_VARARGS, NULL},
	 { (char *)"Array_getName", _wrap_Array_getName, METH_VARARGS, NULL},
	 { (char *)"Array_deleteName", _wrap_Array_deleteName, METH_VARARGS, NULL},
	 { (char *)"Array_clear", _wrap_Array_clear, METH_VARARGS, NULL},
	 { (char *)"Array_type_set", _wrap_Array_type_set, METH_VARARGS, NULL},
	 { (char *)"Array_type_get", _wrap_Array_type_get, METH_VARARGS, NULL},
	 { (char *)"Array_getScheme", _wrap_Array_getScheme, METH_VARARGS, NULL},
	 { (char *)"Array_swigregister", Array_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ConstArray", _wrap_new_ConstArray, METH_VARARGS, NULL},
	 { (char *)"ConstArray_copyAndFilter", _wrap_ConstArray_copyAndFilter, METH_VARARGS, NULL},
	 { (char *)"ConstArray_copy", _wrap_ConstArray_copy, METH_VARARGS, NULL},
	 { (char *)"ConstArray_copyData", _wrap_ConstArray_copyData, METH_VARARGS, NULL},
	 { (char *)"ConstArray_shareData", _wrap_ConstArray_shareData, METH_VARARGS, NULL},
	 { (char *)"ConstArray_getData", _wrap_ConstArray_getData, METH_VARARGS, NULL},
	 { (char *)"ConstArray_setVals", _wrap_ConstArray_setVals, METH_VARARGS, NULL},
	 { (char *)"ConstArray_getVals", _wrap_ConstArray_getVals, METH_VARARGS, NULL},
	 { (char *)"ConstArray_getValPtr", _wrap_ConstArray_getValPtr, METH_VARARGS, NULL},
	 { (char *)"ConstArray_next", _wrap_ConstArray_next, METH_VARARGS, NULL},
	 { (char *)"ConstArray_getConst", _wrap_ConstArray_getConst, METH_VARARGS, NULL},
	 { (char *)"ConstArray_setConst", _wrap_ConstArray_setConst, METH_VARARGS, NULL},
	 { (char *)"ConstArray_expand", _wrap_ConstArray_expand, METH_VARARGS, NULL},
	 { (char *)"ConstArray_repeat", _wrap_ConstArray_repeat, METH_VARARGS, NULL},
	 { (char *)"ConstArray_resize", _wrap_ConstArray_resize, METH_VARARGS, NULL},
	 { (char *)"ConstArray_cast", _wrap_ConstArray_cast, METH_VARARGS, NULL},
	 { (char *)"ConstArray_show", _wrap_ConstArray_show, METH_VARARGS, NULL},
	 { (char *)"ConstArray_clear", _wrap_ConstArray_clear, METH_VARARGS, NULL},
	 { (char *)"ConstArray_SetConst", _wrap_ConstArray_SetConst, METH_VARARGS, NULL},
	 { (char *)"delete_ConstArray", _wrap_delete_ConstArray, METH_VARARGS, NULL},
	 { (char *)"ConstArray_swigregister", ConstArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Cell", _wrap_new_Cell, METH_VARARGS, NULL},
	 { (char *)"delete_Cell", _wrap_delete_Cell, METH_VARARGS, NULL},
	 { (char *)"Cell_Cross", _wrap_Cell_Cross, METH_VARARGS, NULL},
	 { (char *)"Cell_Cross2", _wrap_Cell_Cross2, METH_VARARGS, NULL},
	 { (char *)"Cell_mapNodes", _wrap_Cell_mapNodes, METH_VARARGS, NULL},
	 { (char *)"Cell_setNode", _wrap_Cell_setNode, METH_VARARGS, NULL},
	 { (char *)"Cell_eq", _wrap_Cell_eq, METH_VARARGS, NULL},
	 { (char *)"Cell___eq__", _wrap_Cell___eq__, METH_VARARGS, NULL},
	 { (char *)"Cell___lt__", _wrap_Cell___lt__, METH_VARARGS, NULL},
	 { (char *)"Cell_show", _wrap_Cell_show, METH_VARARGS, NULL},
	 { (char *)"Cell_hasNode", _wrap_Cell_hasNode, METH_VARARGS, NULL},
	 { (char *)"Cell_IncidentTo", _wrap_Cell_IncidentTo, METH_VARARGS, NULL},
	 { (char *)"Cell_setsize", _wrap_Cell_setsize, METH_VARARGS, NULL},
	 { (char *)"Cell_setnodes", _wrap_Cell_setnodes, METH_VARARGS, NULL},
	 { (char *)"Cell_getsize", _wrap_Cell_getsize, METH_VARARGS, NULL},
	 { (char *)"Cell_getnodes", _wrap_Cell_getnodes, METH_VARARGS, NULL},
	 { (char *)"Cell_getnode", _wrap_Cell_getnode, METH_VARARGS, NULL},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"eqCell___call__", _wrap_eqCell___call__, METH_VARARGS, NULL},
	 { (char *)"new_eqCell", _wrap_new_eqCell, METH_VARARGS, NULL},
	 { (char *)"delete_eqCell", _wrap_delete_eqCell, METH_VARARGS, NULL},
	 { (char *)"eqCell_swigregister", eqCell_swigregister, METH_VARARGS, NULL},
	 { (char *)"ltCell___call__", _wrap_ltCell___call__, METH_VARARGS, NULL},
	 { (char *)"new_ltCell", _wrap_new_ltCell, METH_VARARGS, NULL},
	 { (char *)"delete_ltCell", _wrap_delete_ltCell, METH_VARARGS, NULL},
	 { (char *)"ltCell_swigregister", ltCell_swigregister, METH_VARARGS, NULL},
	 { (char *)"SimpleCellHash___call__", _wrap_SimpleCellHash___call__, METH_VARARGS, NULL},
	 { (char *)"new_SimpleCellHash", _wrap_new_SimpleCellHash, METH_VARARGS, NULL},
	 { (char *)"delete_SimpleCellHash", _wrap_delete_SimpleCellHash, METH_VARARGS, NULL},
	 { (char *)"SimpleCellHash_swigregister", SimpleCellHash_swigregister, METH_VARARGS, NULL},
	 { (char *)"CellHash___call__", _wrap_CellHash___call__, METH_VARARGS, NULL},
	 { (char *)"new_CellHash", _wrap_new_CellHash, METH_VARARGS, NULL},
	 { (char *)"delete_CellHash", _wrap_delete_CellHash, METH_VARARGS, NULL},
	 { (char *)"CellHash_swigregister", CellHash_swigregister, METH_VARARGS, NULL},
	 { (char *)"CellArray_whoami", _wrap_CellArray_whoami, METH_VARARGS, NULL},
	 { (char *)"new_CellArray", _wrap_new_CellArray, METH_VARARGS, NULL},
	 { (char *)"delete_CellArray", _wrap_delete_CellArray, METH_VARARGS, NULL},
	 { (char *)"CellArray_getsize", _wrap_CellArray_getsize, METH_VARARGS, NULL},
	 { (char *)"CellArray_addCell", _wrap_CellArray_addCell, METH_VARARGS, NULL},
	 { (char *)"CellArray_addCellNodes", _wrap_CellArray_addCellNodes, METH_VARARGS, NULL},
	 { (char *)"CellArray_getCell", _wrap_CellArray_getCell, METH_VARARGS, NULL},
	 { (char *)"CellArray_getCellCopy", _wrap_CellArray_getCellCopy, METH_VARARGS, NULL},
	 { (char *)"CellArray_getCellNodes", _wrap_CellArray_getCellNodes, METH_VARARGS, NULL},
	 { (char *)"CellArray_contains", _wrap_CellArray_contains, METH_VARARGS, NULL},
	 { (char *)"CellArray_getOrd", _wrap_CellArray_getOrd, METH_VARARGS, NULL},
	 { (char *)"CellArray_bytes", _wrap_CellArray_bytes, METH_VARARGS, NULL},
	 { (char *)"CellArray_ref", _wrap_CellArray_ref, METH_VARARGS, NULL},
	 { (char *)"CellArray_unref", _wrap_CellArray_unref, METH_VARARGS, NULL},
	 { (char *)"CellArray_setNodeArray", _wrap_CellArray_setNodeArray, METH_VARARGS, NULL},
	 { (char *)"CellArray_getIncidentCells", _wrap_CellArray_getIncidentCells, METH_VARARGS, NULL},
	 { (char *)"CellArray_getAdjacentCells", _wrap_CellArray_getAdjacentCells, METH_VARARGS, NULL},
	 { (char *)"CellArray_getNodeCount", _wrap_CellArray_getNodeCount, METH_VARARGS, NULL},
	 { (char *)"CellArray_show", _wrap_CellArray_show, METH_VARARGS, NULL},
	 { (char *)"CellArray_toNodeSet", _wrap_CellArray_toNodeSet, METH_VARARGS, NULL},
	 { (char *)"CellArray_Intersection", _wrap_CellArray_Intersection, METH_VARARGS, NULL},
	 { (char *)"CellArray_Cross", _wrap_CellArray_Cross, METH_VARARGS, NULL},
	 { (char *)"CellArray_Append", _wrap_CellArray_Append, METH_VARARGS, NULL},
	 { (char *)"CellArray_mapNodes", _wrap_CellArray_mapNodes, METH_VARARGS, NULL},
	 { (char *)"CellArray_makeCrossNodeMap", _wrap_CellArray_makeCrossNodeMap, METH_VARARGS, NULL},
	 { (char *)"CellArray_buildInvertedIndex", _wrap_CellArray_buildInvertedIndex, METH_VARARGS, NULL},
	 { (char *)"CellArray_buildIncidenceIndex", _wrap_CellArray_buildIncidenceIndex, METH_VARARGS, NULL},
	 { (char *)"CellArray_buildAdjacencyIndex", _wrap_CellArray_buildAdjacencyIndex, METH_VARARGS, NULL},
	 { (char *)"CellArray_getCellVector", _wrap_CellArray_getCellVector, METH_VARARGS, NULL},
	 { (char *)"CellArray_cleanup_node_array_set", _wrap_CellArray_cleanup_node_array_set, METH_VARARGS, NULL},
	 { (char *)"CellArray_cleanup_node_array_get", _wrap_CellArray_cleanup_node_array_get, METH_VARARGS, NULL},
	 { (char *)"CellArray_swigregister", CellArray_swigregister, METH_VARARGS, NULL},
	 { (char *)"testString", _wrap_testString, METH_VARARGS, NULL},
	 { (char *)"Grid_name_set", _wrap_Grid_name_set, METH_VARARGS, NULL},
	 { (char *)"Grid_name_get", _wrap_Grid_name_get, METH_VARARGS, NULL},
	 { (char *)"new_Grid", _wrap_new_Grid, METH_VARARGS, NULL},
	 { (char *)"Grid_ref", _wrap_Grid_ref, METH_VARARGS, NULL},
	 { (char *)"Grid_unref", _wrap_Grid_unref, METH_VARARGS, NULL},
	 { (char *)"delete_Grid", _wrap_delete_Grid, METH_VARARGS, NULL},
	 { (char *)"Grid_getName", _wrap_Grid_getName, METH_VARARGS, NULL},
	 { (char *)"Grid_init", _wrap_Grid_init, METH_VARARGS, NULL},
	 { (char *)"Grid_getdim", _wrap_Grid_getdim, METH_VARARGS, NULL},
	 { (char *)"Grid_Size", _wrap_Grid_Size, METH_VARARGS, NULL},
	 { (char *)"Grid_setKCells", _wrap_Grid_setKCells, METH_VARARGS, NULL},
	 { (char *)"Grid_getKCells", _wrap_Grid_getKCells, METH_VARARGS, NULL},
	 { (char *)"Grid_setImplicit0Cells", _wrap_Grid_setImplicit0Cells, METH_VARARGS, NULL},
	 { (char *)"Grid_countKCells", _wrap_Grid_countKCells, METH_VARARGS, NULL},
	 { (char *)"Grid_empty", _wrap_Grid_empty, METH_VARARGS, NULL},
	 { (char *)"Grid_shareCells", _wrap_Grid_shareCells, METH_VARARGS, NULL},
	 { (char *)"Grid_copyCells", _wrap_Grid_copyCells, METH_VARARGS, NULL},
	 { (char *)"Grid_nodeFilter", _wrap_Grid_nodeFilter, METH_VARARGS, NULL},
	 { (char *)"Grid_checkWellFormed", _wrap_Grid_checkWellFormed, METH_VARARGS, NULL},
	 { (char *)"Grid_cellCount", _wrap_Grid_cellCount, METH_VARARGS, NULL},
	 { (char *)"Grid_IncidentTo", _wrap_Grid_IncidentTo, METH_VARARGS, NULL},
	 { (char *)"Grid_normalize", _wrap_Grid_normalize, METH_VARARGS, NULL},
	 { (char *)"Grid_mapNodes", _wrap_Grid_mapNodes, METH_VARARGS, NULL},
	 { (char *)"Grid_setReferent", _wrap_Grid_setReferent, METH_VARARGS, NULL},
	 { (char *)"Grid_Intersection", _wrap_Grid_Intersection, METH_VARARGS, NULL},
	 { (char *)"Grid_Cross", _wrap_Grid_Cross, METH_VARARGS, NULL},
	 { (char *)"Grid_show", _wrap_Grid_show, METH_VARARGS, NULL},
	 { (char *)"Grid_ordmap_set", _wrap_Grid_ordmap_set, METH_VARARGS, NULL},
	 { (char *)"Grid_ordmap_get", _wrap_Grid_ordmap_get, METH_VARARGS, NULL},
	 { (char *)"Grid_swigregister", Grid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UnitGrid", _wrap_new_UnitGrid, METH_VARARGS, NULL},
	 { (char *)"delete_UnitGrid", _wrap_delete_UnitGrid, METH_VARARGS, NULL},
	 { (char *)"UnitGrid_swigregister", UnitGrid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Implicit0Cells", _wrap_new_Implicit0Cells, METH_VARARGS, NULL},
	 { (char *)"delete_Implicit0Cells", _wrap_delete_Implicit0Cells, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getsize", _wrap_Implicit0Cells_getsize, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getCell", _wrap_Implicit0Cells_getCell, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getCellCopy", _wrap_Implicit0Cells_getCellCopy, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getCellNodes", _wrap_Implicit0Cells_getCellNodes, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_whoami", _wrap_Implicit0Cells_whoami, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_contains", _wrap_Implicit0Cells_contains, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getOrd", _wrap_Implicit0Cells_getOrd, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getIncidentCells", _wrap_Implicit0Cells_getIncidentCells, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getAdjacentCells", _wrap_Implicit0Cells_getAdjacentCells, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getNodeCount", _wrap_Implicit0Cells_getNodeCount, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_mapNodes", _wrap_Implicit0Cells_mapNodes, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_buildInvertedIndex", _wrap_Implicit0Cells_buildInvertedIndex, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_buildAdjacentIndex", _wrap_Implicit0Cells_buildAdjacentIndex, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_show", _wrap_Implicit0Cells_show, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_implicit", _wrap_Implicit0Cells_implicit, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_bytes", _wrap_Implicit0Cells_bytes, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_unref", _wrap_Implicit0Cells_unref, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_ref", _wrap_Implicit0Cells_ref, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_asCellArray", _wrap_Implicit0Cells_asCellArray, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_getCellVector", _wrap_Implicit0Cells_getCellVector, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_toNodeSet", _wrap_Implicit0Cells_toNodeSet, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_Intersection", _wrap_Implicit0Cells_Intersection, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_Cross", _wrap_Implicit0Cells_Cross, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_makeCrossNodeMap", _wrap_Implicit0Cells_makeCrossNodeMap, METH_VARARGS, NULL},
	 { (char *)"Implicit0Cells_swigregister", Implicit0Cells_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ArrayReader", _wrap_delete_ArrayReader, METH_VARARGS, NULL},
	 { (char *)"new_ArrayReader", _wrap_new_ArrayReader, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_makeArrayReader", _wrap_ArrayReader_makeArrayReader, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_ReadTuples", _wrap_ArrayReader_ReadTuples, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_ReadPrimitives", _wrap_ArrayReader_ReadPrimitives, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_Read", _wrap_ArrayReader_Read, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_getOffset", _wrap_ArrayReader_getOffset, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_setOffset", _wrap_ArrayReader_setOffset, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_setPatternAttribute", _wrap_ArrayReader_setPatternAttribute, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_setStream", _wrap_ArrayReader_setStream, METH_VARARGS, NULL},
	 { (char *)"ArrayReader_swigregister", ArrayReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FileArrayReader", _wrap_new_FileArrayReader, METH_VARARGS, NULL},
	 { (char *)"delete_FileArrayReader", _wrap_delete_FileArrayReader, METH_VARARGS, NULL},
	 { (char *)"FileArrayReader_swigregister", FileArrayReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ProjectArrayReader", _wrap_new_ProjectArrayReader, METH_VARARGS, NULL},
	 { (char *)"delete_ProjectArrayReader", _wrap_delete_ProjectArrayReader, METH_VARARGS, NULL},
	 { (char *)"ProjectArrayReader_GetScheme", _wrap_ProjectArrayReader_GetScheme, METH_VARARGS, NULL},
	 { (char *)"ProjectArrayReader_SetScheme", _wrap_ProjectArrayReader_SetScheme, METH_VARARGS, NULL},
	 { (char *)"ProjectArrayReader_ReadPrimitives", _wrap_ProjectArrayReader_ReadPrimitives, METH_VARARGS, NULL},
	 { (char *)"ProjectArrayReader_ReadTuples", _wrap_ProjectArrayReader_ReadTuples, METH_VARARGS, NULL},
	 { (char *)"ProjectArrayReader_swigregister", ProjectArrayReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TextFileArrayReader", _wrap_new_TextFileArrayReader, METH_VARARGS, NULL},
	 { (char *)"delete_TextFileArrayReader", _wrap_delete_TextFileArrayReader, METH_VARARGS, NULL},
	 { (char *)"TextFileArrayReader_swigregister", TextFileArrayReader_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ArrayWriter", _wrap_new_ArrayWriter, METH_VARARGS, NULL},
	 { (char *)"ArrayWriter_Write", _wrap_ArrayWriter_Write, METH_VARARGS, NULL},
	 { (char *)"delete_ArrayWriter", _wrap_delete_ArrayWriter, METH_VARARGS, NULL},
	 { (char *)"ArrayWriter_swigregister", ArrayWriter_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ElcircFile", _wrap_new_ElcircFile, METH_VARARGS, NULL},
	 { (char *)"delete_ElcircFile", _wrap_delete_ElcircFile, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getVarScheme", _wrap_ElcircFile_getVarScheme, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getSurfReader", _wrap_ElcircFile_getSurfReader, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getVariableReader", _wrap_ElcircFile_getVariableReader, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getSurfOffset", _wrap_ElcircFile_getSurfOffset, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getVariableOffset", _wrap_ElcircFile_getVariableOffset, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getTimestepSize", _wrap_ElcircFile_getTimestepSize, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_getHeaderSize", _wrap_ElcircFile_getHeaderSize, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_readHGrid", _wrap_ElcircFile_readHGrid, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_readDGrid", _wrap_ElcircFile_readDGrid, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_readVGrid", _wrap_ElcircFile_readVGrid, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_readTGrid", _wrap_ElcircFile_readTGrid, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_Valid", _wrap_ElcircFile_Valid, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_makeHeader", _wrap_ElcircFile_makeHeader, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_h_set", _wrap_ElcircFile_h_set, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_h_get", _wrap_ElcircFile_h_get, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_i23d", _wrap_ElcircFile_i23d, METH_VARARGS, NULL},
	 { (char *)"ElcircFile_swigregister", ElcircFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CrossOp", _wrap_new_CrossOp, METH_VARARGS, NULL},
	 { (char *)"CrossOp_Execute", _wrap_CrossOp_Execute, METH_VARARGS, NULL},
	 { (char *)"CrossOp_Cross", _wrap_CrossOp_Cross, METH_VARARGS, NULL},
	 { (char *)"delete_CrossOp", _wrap_delete_CrossOp, METH_VARARGS, NULL},
	 { (char *)"CrossOp_swigregister", CrossOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RestrictOp", _wrap_new_RestrictOp, METH_VARARGS, NULL},
	 { (char *)"RestrictOp_Execute", _wrap_RestrictOp_Execute, METH_VARARGS, NULL},
	 { (char *)"RestrictOp_Restrict", _wrap_RestrictOp_Restrict, METH_VARARGS, NULL},
	 { (char *)"delete_RestrictOp", _wrap_delete_RestrictOp, METH_VARARGS, NULL},
	 { (char *)"RestrictOp_swigregister", RestrictOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ApplyOp", _wrap_new_ApplyOp, METH_VARARGS, NULL},
	 { (char *)"ApplyOp_Execute", _wrap_ApplyOp_Execute, METH_VARARGS, NULL},
	 { (char *)"ApplyOp_Apply", _wrap_ApplyOp_Apply, METH_VARARGS, NULL},
	 { (char *)"ApplyOp_SetExpression", _wrap_ApplyOp_SetExpression, METH_VARARGS, NULL},
	 { (char *)"ApplyOp_SetRank", _wrap_ApplyOp_SetRank, METH_VARARGS, NULL},
	 { (char *)"delete_ApplyOp", _wrap_delete_ApplyOp, METH_VARARGS, NULL},
	 { (char *)"ApplyOp_swigregister", ApplyOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BindOp", _wrap_new_BindOp, METH_VARARGS, NULL},
	 { (char *)"BindOp_setArrayReader", _wrap_BindOp_setArrayReader, METH_VARARGS, NULL},
	 { (char *)"BindOp_setOffset", _wrap_BindOp_setOffset, METH_VARARGS, NULL},
	 { (char *)"BindOp_setOffsetInt", _wrap_BindOp_setOffsetInt, METH_VARARGS, NULL},
	 { (char *)"BindOp_Execute", _wrap_BindOp_Execute, METH_VARARGS, NULL},
	 { (char *)"BindOp_Bind", _wrap_BindOp_Bind, METH_VARARGS, NULL},
	 { (char *)"delete_BindOp", _wrap_delete_BindOp, METH_VARARGS, NULL},
	 { (char *)"BindOp_swigregister", BindOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BindConstantOp", _wrap_new_BindConstantOp, METH_VARARGS, NULL},
	 { (char *)"BindConstantOp_Execute", _wrap_BindConstantOp_Execute, METH_VARARGS, NULL},
	 { (char *)"BindConstantOp_setAttributeVal", _wrap_BindConstantOp_setAttributeVal, METH_VARARGS, NULL},
	 { (char *)"BindConstantOp_BindConstant", _wrap_BindConstantOp_BindConstant, METH_VARARGS, NULL},
	 { (char *)"delete_BindConstantOp", _wrap_delete_BindConstantOp, METH_VARARGS, NULL},
	 { (char *)"BindConstantOp_swigregister", BindConstantOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DataDumpOp", _wrap_new_DataDumpOp, METH_VARARGS, NULL},
	 { (char *)"DataDumpOp_Execute", _wrap_DataDumpOp_Execute, METH_VARARGS, NULL},
	 { (char *)"DataDumpOp_DataDump", _wrap_DataDumpOp_DataDump, METH_VARARGS, NULL},
	 { (char *)"delete_DataDumpOp", _wrap_delete_DataDumpOp, METH_VARARGS, NULL},
	 { (char *)"DataDumpOp_swigregister", DataDumpOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutputOp", _wrap_new_OutputOp, METH_VARARGS, NULL},
	 { (char *)"OutputOp_offset_set", _wrap_OutputOp_offset_set, METH_VARARGS, NULL},
	 { (char *)"OutputOp_offset_get", _wrap_OutputOp_offset_get, METH_VARARGS, NULL},
	 { (char *)"OutputOp_filename_set", _wrap_OutputOp_filename_set, METH_VARARGS, NULL},
	 { (char *)"OutputOp_filename_get", _wrap_OutputOp_filename_get, METH_VARARGS, NULL},
	 { (char *)"OutputOp_Execute", _wrap_OutputOp_Execute, METH_VARARGS, NULL},
	 { (char *)"OutputOp_setFileName", _wrap_OutputOp_setFileName, METH_VARARGS, NULL},
	 { (char *)"OutputOp_Output", _wrap_OutputOp_Output, METH_VARARGS, NULL},
	 { (char *)"delete_OutputOp", _wrap_delete_OutputOp, METH_VARARGS, NULL},
	 { (char *)"OutputOp_swigregister", OutputOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutputNetCDFOp", _wrap_new_OutputNetCDFOp, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_filename_set", _wrap_OutputNetCDFOp_filename_set, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_filename_get", _wrap_OutputNetCDFOp_filename_get, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_Execute", _wrap_OutputNetCDFOp_Execute, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_setFileName", _wrap_OutputNetCDFOp_setFileName, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_WriteNetCDF", _wrap_OutputNetCDFOp_WriteNetCDF, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_WriteTimeVars", _wrap_OutputNetCDFOp_WriteTimeVars, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_SetDate", _wrap_OutputNetCDFOp_SetDate, METH_VARARGS, NULL},
	 { (char *)"delete_OutputNetCDFOp", _wrap_delete_OutputNetCDFOp, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFOp_swigregister", OutputNetCDFOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutputNetCDFDim", _wrap_new_OutputNetCDFDim, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFDim_WriteCells", _wrap_OutputNetCDFDim_WriteCells, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFDim_Execute", _wrap_OutputNetCDFDim_Execute, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFDim_SetDate", _wrap_OutputNetCDFDim_SetDate, METH_VARARGS, NULL},
	 { (char *)"delete_OutputNetCDFDim", _wrap_delete_OutputNetCDFDim, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFDim_swigregister", OutputNetCDFDim_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OutputNetCDFVars", _wrap_new_OutputNetCDFVars, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFVars_Execute", _wrap_OutputNetCDFVars_Execute, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFVars_SetDate", _wrap_OutputNetCDFVars_SetDate, METH_VARARGS, NULL},
	 { (char *)"delete_OutputNetCDFVars", _wrap_delete_OutputNetCDFVars, METH_VARARGS, NULL},
	 { (char *)"OutputNetCDFVars_swigregister", OutputNetCDFVars_swigregister, METH_VARARGS, NULL},
	 { (char *)"mapType", _wrap_mapType, METH_VARARGS, NULL},
	 { (char *)"HasDim", _wrap_HasDim, METH_VARARGS, NULL},
	 { (char *)"HasVar", _wrap_HasVar, METH_VARARGS, NULL},
	 { (char *)"HasAttr", _wrap_HasAttr, METH_VARARGS, NULL},
	 { (char *)"new_NetCDFAdaptor", _wrap_new_NetCDFAdaptor, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_Open", _wrap_NetCDFAdaptor_Open, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_Close", _wrap_NetCDFAdaptor_Close, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_setFileName", _wrap_NetCDFAdaptor_setFileName, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_NodesFromDim", _wrap_NetCDFAdaptor_NodesFromDim, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_WellSupportedPolygonsFromVars", _wrap_NetCDFAdaptor_WellSupportedPolygonsFromVars, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_HomogeneousCellsFromVar", _wrap_NetCDFAdaptor_HomogeneousCellsFromVar, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_AttributeFromVar", _wrap_NetCDFAdaptor_AttributeFromVar, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_CreateDim", _wrap_NetCDFAdaptor_CreateDim, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_DimFromDim", _wrap_NetCDFAdaptor_DimFromDim, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_VarFromAttribute", _wrap_NetCDFAdaptor_VarFromAttribute, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_VarFromIncidence", _wrap_NetCDFAdaptor_VarFromIncidence, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_mapType", _wrap_NetCDFAdaptor_mapType, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_HasDim", _wrap_NetCDFAdaptor_HasDim, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_HasVar", _wrap_NetCDFAdaptor_HasVar, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_HasAttr", _wrap_NetCDFAdaptor_HasAttr, METH_VARARGS, NULL},
	 { (char *)"delete_NetCDFAdaptor", _wrap_delete_NetCDFAdaptor, METH_VARARGS, NULL},
	 { (char *)"NetCDFAdaptor_swigregister", NetCDFAdaptor_swigregister, METH_VARARGS, NULL},
	 { (char *)"ScanOp_filename_set", _wrap_ScanOp_filename_set, METH_VARARGS, NULL},
	 { (char *)"ScanOp_filename_get", _wrap_ScanOp_filename_get, METH_VARARGS, NULL},
	 { (char *)"ScanOp_offset_set", _wrap_ScanOp_offset_set, METH_VARARGS, NULL},
	 { (char *)"ScanOp_offset_get", _wrap_ScanOp_offset_get, METH_VARARGS, NULL},
	 { (char *)"delete_ScanOp", _wrap_delete_ScanOp, METH_VARARGS, NULL},
	 { (char *)"ScanOp_swigregister", ScanOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScanInternal", _wrap_new_ScanInternal, METH_VARARGS, NULL},
	 { (char *)"ScanInternal_setFileName", _wrap_ScanInternal_setFileName, METH_VARARGS, NULL},
	 { (char *)"ScanInternal_setRawBytes", _wrap_ScanInternal_setRawBytes, METH_VARARGS, NULL},
	 { (char *)"ScanInternal_Execute", _wrap_ScanInternal_Execute, METH_VARARGS, NULL},
	 { (char *)"ScanInternal_Scan", _wrap_ScanInternal_Scan, METH_VARARGS, NULL},
	 { (char *)"delete_ScanInternal", _wrap_delete_ScanInternal, METH_VARARGS, NULL},
	 { (char *)"ScanInternal_swigregister", ScanInternal_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AccumulateOp", _wrap_new_AccumulateOp, METH_VARARGS, NULL},
	 { (char *)"AccumulateOp_Execute", _wrap_AccumulateOp_Execute, METH_VARARGS, NULL},
	 { (char *)"AccumulateOp_Accumulate", _wrap_AccumulateOp_Accumulate, METH_VARARGS, NULL},
	 { (char *)"AccumulateOp_SetOffset", _wrap_AccumulateOp_SetOffset, METH_VARARGS, NULL},
	 { (char *)"AccumulateOp_position_offset_set", _wrap_AccumulateOp_position_offset_set, METH_VARARGS, NULL},
	 { (char *)"AccumulateOp_position_offset_get", _wrap_AccumulateOp_position_offset_get, METH_VARARGS, NULL},
	 { (char *)"delete_AccumulateOp", _wrap_delete_AccumulateOp, METH_VARARGS, NULL},
	 { (char *)"AccumulateOp_swigregister", AccumulateOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"debug_set", _wrap_debug_set, METH_VARARGS, NULL},
	 { (char *)"delete_AssignmentFunction", _wrap_delete_AssignmentFunction, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_T_set", _wrap_AssignmentFunction_T_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_T_get", _wrap_AssignmentFunction_T_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_S_set", _wrap_AssignmentFunction_S_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_S_get", _wrap_AssignmentFunction_S_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction__i_set", _wrap_AssignmentFunction__i_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction__i_get", _wrap_AssignmentFunction__i_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction__j_set", _wrap_AssignmentFunction__j_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction__j_get", _wrap_AssignmentFunction__j_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_dstarget_set", _wrap_AssignmentFunction_dstarget_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_dstarget_get", _wrap_AssignmentFunction_dstarget_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_dssource_set", _wrap_AssignmentFunction_dssource_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_dssource_get", _wrap_AssignmentFunction_dssource_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_schtarget_set", _wrap_AssignmentFunction_schtarget_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_schtarget_get", _wrap_AssignmentFunction_schtarget_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_schsource_set", _wrap_AssignmentFunction_schsource_set, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_schsource_get", _wrap_AssignmentFunction_schsource_get, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_setEnvironment", _wrap_AssignmentFunction_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction___call__", _wrap_AssignmentFunction___call__, METH_VARARGS, NULL},
	 { (char *)"AssignmentFunction_swigregister", AssignmentFunction_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_AggregationFunction", _wrap_delete_AggregationFunction, METH_VARARGS, NULL},
	 { (char *)"AggregationFunction_setScheme", _wrap_AggregationFunction_setScheme, METH_VARARGS, NULL},
	 { (char *)"AggregationFunction_getOutScheme", _wrap_AggregationFunction_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"AggregationFunction___call__", _wrap_AggregationFunction___call__, METH_VARARGS, NULL},
	 { (char *)"AggregationFunction_swigregister", AggregationFunction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AggregateOp", _wrap_new_AggregateOp, METH_VARARGS, NULL},
	 { (char *)"AggregateOp_Aggregate", _wrap_AggregateOp_Aggregate, METH_VARARGS, NULL},
	 { (char *)"delete_AggregateOp", _wrap_delete_AggregateOp, METH_VARARGS, NULL},
	 { (char *)"AggregateOp_swigregister", AggregateOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"euclid", _wrap_euclid, METH_VARARGS, NULL},
	 { (char *)"euclid3D", _wrap_euclid3D, METH_VARARGS, NULL},
	 { (char *)"new_dotwo", _wrap_new_dotwo, METH_VARARGS, NULL},
	 { (char *)"dotwo___call__", _wrap_dotwo___call__, METH_VARARGS, NULL},
	 { (char *)"dotwo_mergeTuples", _wrap_dotwo_mergeTuples, METH_VARARGS, NULL},
	 { (char *)"dotwo_mergeSchemes", _wrap_dotwo_mergeSchemes, METH_VARARGS, NULL},
	 { (char *)"dotwo_getOutScheme", _wrap_dotwo_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_dotwo", _wrap_delete_dotwo, METH_VARARGS, NULL},
	 { (char *)"dotwo_swigregister", dotwo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Any", _wrap_new_Any, METH_VARARGS, NULL},
	 { (char *)"Any___call__", _wrap_Any___call__, METH_VARARGS, NULL},
	 { (char *)"Any_getOutScheme", _wrap_Any_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_Any", _wrap_delete_Any, METH_VARARGS, NULL},
	 { (char *)"Any_swigregister", Any_swigregister, METH_VARARGS, NULL},
	 { (char *)"Count___call__", _wrap_Count___call__, METH_VARARGS, NULL},
	 { (char *)"Count_getOutScheme", _wrap_Count_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"new_Count", _wrap_new_Count, METH_VARARGS, NULL},
	 { (char *)"delete_Count", _wrap_delete_Count, METH_VARARGS, NULL},
	 { (char *)"Count_swigregister", Count_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_area", _wrap_new_area, METH_VARARGS, NULL},
	 { (char *)"area___call__", _wrap_area___call__, METH_VARARGS, NULL},
	 { (char *)"area_getOutScheme", _wrap_area_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_area", _wrap_delete_area, METH_VARARGS, NULL},
	 { (char *)"area_swigregister", area_swigregister, METH_VARARGS, NULL},
	 { (char *)"mkvector_attr_set", _wrap_mkvector_attr_set, METH_VARARGS, NULL},
	 { (char *)"mkvector_attr_get", _wrap_mkvector_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_mkvector", _wrap_new_mkvector, METH_VARARGS, NULL},
	 { (char *)"mkvector___call__", _wrap_mkvector___call__, METH_VARARGS, NULL},
	 { (char *)"mkvector_getOutScheme", _wrap_mkvector_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_mkvector", _wrap_delete_mkvector, METH_VARARGS, NULL},
	 { (char *)"mkvector_swigregister", mkvector_swigregister, METH_VARARGS, NULL},
	 { (char *)"triweights___call__", _wrap_triweights___call__, METH_VARARGS, NULL},
	 { (char *)"triweights_getOutScheme", _wrap_triweights_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"new_triweights", _wrap_new_triweights, METH_VARARGS, NULL},
	 { (char *)"delete_triweights", _wrap_delete_triweights, METH_VARARGS, NULL},
	 { (char *)"triweights_swigregister", triweights_swigregister, METH_VARARGS, NULL},
	 { (char *)"interpolate3D_attrs_set", _wrap_interpolate3D_attrs_set, METH_VARARGS, NULL},
	 { (char *)"interpolate3D_attrs_get", _wrap_interpolate3D_attrs_get, METH_VARARGS, NULL},
	 { (char *)"new_interpolate3D", _wrap_new_interpolate3D, METH_VARARGS, NULL},
	 { (char *)"interpolate3D___call__", _wrap_interpolate3D___call__, METH_VARARGS, NULL},
	 { (char *)"interpolate3D_getOutScheme", _wrap_interpolate3D_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_interpolate3D", _wrap_delete_interpolate3D, METH_VARARGS, NULL},
	 { (char *)"interpolate3D_swigregister", interpolate3D_swigregister, METH_VARARGS, NULL},
	 { (char *)"interpolate2D_attr_set", _wrap_interpolate2D_attr_set, METH_VARARGS, NULL},
	 { (char *)"interpolate2D_attr_get", _wrap_interpolate2D_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_interpolate2D", _wrap_new_interpolate2D, METH_VARARGS, NULL},
	 { (char *)"interpolate2D___call__", _wrap_interpolate2D___call__, METH_VARARGS, NULL},
	 { (char *)"interpolate2D_getOutScheme", _wrap_interpolate2D_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_interpolate2D", _wrap_delete_interpolate2D, METH_VARARGS, NULL},
	 { (char *)"interpolate2D_swigregister", interpolate2D_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_first", _wrap_new_first, METH_VARARGS, NULL},
	 { (char *)"first___call__", _wrap_first___call__, METH_VARARGS, NULL},
	 { (char *)"first_getOutScheme", _wrap_first_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_first", _wrap_delete_first, METH_VARARGS, NULL},
	 { (char *)"first_swigregister", first_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_statistics", _wrap_new_statistics, METH_VARARGS, NULL},
	 { (char *)"statistics___call__", _wrap_statistics___call__, METH_VARARGS, NULL},
	 { (char *)"statistics_getOutScheme", _wrap_statistics_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_statistics", _wrap_delete_statistics, METH_VARARGS, NULL},
	 { (char *)"statistics_swigregister", statistics_swigregister, METH_VARARGS, NULL},
	 { (char *)"project_attrs_set", _wrap_project_attrs_set, METH_VARARGS, NULL},
	 { (char *)"project_attrs_get", _wrap_project_attrs_get, METH_VARARGS, NULL},
	 { (char *)"new_project", _wrap_new_project, METH_VARARGS, NULL},
	 { (char *)"project___call__", _wrap_project___call__, METH_VARARGS, NULL},
	 { (char *)"project_getOutScheme", _wrap_project_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_project", _wrap_delete_project, METH_VARARGS, NULL},
	 { (char *)"project_swigregister", project_swigregister, METH_VARARGS, NULL},
	 { (char *)"equal", _wrap_equal, METH_VARARGS, NULL},
	 { (char *)"TestCallback", _wrap_TestCallback, METH_VARARGS, NULL},
	 { (char *)"pnpoly", _wrap_pnpoly, METH_VARARGS, NULL},
	 { (char *)"Both_left_set", _wrap_Both_left_set, METH_VARARGS, NULL},
	 { (char *)"Both_left_get", _wrap_Both_left_get, METH_VARARGS, NULL},
	 { (char *)"Both_right_set", _wrap_Both_right_set, METH_VARARGS, NULL},
	 { (char *)"Both_right_get", _wrap_Both_right_get, METH_VARARGS, NULL},
	 { (char *)"new_Both", _wrap_new_Both, METH_VARARGS, NULL},
	 { (char *)"Both___call__", _wrap_Both___call__, METH_VARARGS, NULL},
	 { (char *)"Both_setEnvironment", _wrap_Both_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"delete_Both", _wrap_delete_Both, METH_VARARGS, NULL},
	 { (char *)"Both_swigregister", Both_swigregister, METH_VARARGS, NULL},
	 { (char *)"Either_left_set", _wrap_Either_left_set, METH_VARARGS, NULL},
	 { (char *)"Either_left_get", _wrap_Either_left_get, METH_VARARGS, NULL},
	 { (char *)"Either_right_set", _wrap_Either_right_set, METH_VARARGS, NULL},
	 { (char *)"Either_right_get", _wrap_Either_right_get, METH_VARARGS, NULL},
	 { (char *)"new_Either", _wrap_new_Either, METH_VARARGS, NULL},
	 { (char *)"Either___call__", _wrap_Either___call__, METH_VARARGS, NULL},
	 { (char *)"Either_setEnvironment", _wrap_Either_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"delete_Either", _wrap_delete_Either, METH_VARARGS, NULL},
	 { (char *)"Either_swigregister", Either_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IncidentTo", _wrap_new_IncidentTo, METH_VARARGS, NULL},
	 { (char *)"IncidentTo___call__", _wrap_IncidentTo___call__, METH_VARARGS, NULL},
	 { (char *)"delete_IncidentTo", _wrap_delete_IncidentTo, METH_VARARGS, NULL},
	 { (char *)"IncidentTo_swigregister", IncidentTo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Nodes", _wrap_new_Nodes, METH_VARARGS, NULL},
	 { (char *)"Nodes___call__", _wrap_Nodes___call__, METH_VARARGS, NULL},
	 { (char *)"delete_Nodes", _wrap_delete_Nodes, METH_VARARGS, NULL},
	 { (char *)"Nodes_swigregister", Nodes_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_adjacentNodes", _wrap_new_adjacentNodes, METH_VARARGS, NULL},
	 { (char *)"adjacentNodes_setEnvironment", _wrap_adjacentNodes_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"adjacentNodes___call__", _wrap_adjacentNodes___call__, METH_VARARGS, NULL},
	 { (char *)"delete_adjacentNodes", _wrap_delete_adjacentNodes, METH_VARARGS, NULL},
	 { (char *)"adjacentNodes_swigregister", adjacentNodes_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_adjacent", _wrap_new_adjacent, METH_VARARGS, NULL},
	 { (char *)"adjacent_setEnvironment", _wrap_adjacent_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"adjacent___call__", _wrap_adjacent___call__, METH_VARARGS, NULL},
	 { (char *)"delete_adjacent", _wrap_delete_adjacent, METH_VARARGS, NULL},
	 { (char *)"adjacent_swigregister", adjacent_swigregister, METH_VARARGS, NULL},
	 { (char *)"neighbors___call__", _wrap_neighbors___call__, METH_VARARGS, NULL},
	 { (char *)"new_neighbors", _wrap_new_neighbors, METH_VARARGS, NULL},
	 { (char *)"delete_neighbors", _wrap_delete_neighbors, METH_VARARGS, NULL},
	 { (char *)"neighbors_swigregister", neighbors_swigregister, METH_VARARGS, NULL},
	 { (char *)"intervalContains_rangeattr_set", _wrap_intervalContains_rangeattr_set, METH_VARARGS, NULL},
	 { (char *)"intervalContains_rangeattr_get", _wrap_intervalContains_rangeattr_get, METH_VARARGS, NULL},
	 { (char *)"intervalContains_valueattr_set", _wrap_intervalContains_valueattr_set, METH_VARARGS, NULL},
	 { (char *)"intervalContains_valueattr_get", _wrap_intervalContains_valueattr_get, METH_VARARGS, NULL},
	 { (char *)"intervalContains_pointattr_set", _wrap_intervalContains_pointattr_set, METH_VARARGS, NULL},
	 { (char *)"intervalContains_pointattr_get", _wrap_intervalContains_pointattr_get, METH_VARARGS, NULL},
	 { (char *)"new_intervalContains", _wrap_new_intervalContains, METH_VARARGS, NULL},
	 { (char *)"intervalContains___call__", _wrap_intervalContains___call__, METH_VARARGS, NULL},
	 { (char *)"delete_intervalContains", _wrap_delete_intervalContains, METH_VARARGS, NULL},
	 { (char *)"intervalContains_swigregister", intervalContains_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_byPointerSet", _wrap_new_byPointerSet, METH_VARARGS, NULL},
	 { (char *)"byPointerSet___call__", _wrap_byPointerSet___call__, METH_VARARGS, NULL},
	 { (char *)"delete_byPointerSet", _wrap_delete_byPointerSet, METH_VARARGS, NULL},
	 { (char *)"byPointerSet_swigregister", byPointerSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"nearest_a_set", _wrap_nearest_a_set, METH_VARARGS, NULL},
	 { (char *)"nearest_a_get", _wrap_nearest_a_get, METH_VARARGS, NULL},
	 { (char *)"nearest_b_set", _wrap_nearest_b_set, METH_VARARGS, NULL},
	 { (char *)"nearest_b_get", _wrap_nearest_b_get, METH_VARARGS, NULL},
	 { (char *)"new_nearest", _wrap_new_nearest, METH_VARARGS, NULL},
	 { (char *)"nearest___call__", _wrap_nearest___call__, METH_VARARGS, NULL},
	 { (char *)"delete_nearest", _wrap_delete_nearest, METH_VARARGS, NULL},
	 { (char *)"nearest_swigregister", nearest_swigregister, METH_VARARGS, NULL},
	 { (char *)"sortedmatch_setEnvironment", _wrap_sortedmatch_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"new_sortedmatch", _wrap_new_sortedmatch, METH_VARARGS, NULL},
	 { (char *)"sortedmatch___call__", _wrap_sortedmatch___call__, METH_VARARGS, NULL},
	 { (char *)"delete_sortedmatch", _wrap_delete_sortedmatch, METH_VARARGS, NULL},
	 { (char *)"sortedmatch_swigregister", sortedmatch_swigregister, METH_VARARGS, NULL},
	 { (char *)"match_Tattr_set", _wrap_match_Tattr_set, METH_VARARGS, NULL},
	 { (char *)"match_Tattr_get", _wrap_match_Tattr_get, METH_VARARGS, NULL},
	 { (char *)"match_Sattr_set", _wrap_match_Sattr_set, METH_VARARGS, NULL},
	 { (char *)"match_Sattr_get", _wrap_match_Sattr_get, METH_VARARGS, NULL},
	 { (char *)"new_match", _wrap_new_match, METH_VARARGS, NULL},
	 { (char *)"match___call__", _wrap_match___call__, METH_VARARGS, NULL},
	 { (char *)"delete_match", _wrap_delete_match, METH_VARARGS, NULL},
	 { (char *)"match_swigregister", match_swigregister, METH_VARARGS, NULL},
	 { (char *)"pointpoly2___call__", _wrap_pointpoly2___call__, METH_VARARGS, NULL},
	 { (char *)"new_pointpoly2", _wrap_new_pointpoly2, METH_VARARGS, NULL},
	 { (char *)"delete_pointpoly2", _wrap_delete_pointpoly2, METH_VARARGS, NULL},
	 { (char *)"pointpoly2_swigregister", pointpoly2_swigregister, METH_VARARGS, NULL},
	 { (char *)"containedby___call__", _wrap_containedby___call__, METH_VARARGS, NULL},
	 { (char *)"containedby_PointInCell", _wrap_containedby_PointInCell, METH_VARARGS, NULL},
	 { (char *)"new_containedby", _wrap_new_containedby, METH_VARARGS, NULL},
	 { (char *)"delete_containedby", _wrap_delete_containedby, METH_VARARGS, NULL},
	 { (char *)"containedby_swigregister", containedby_swigregister, METH_VARARGS, NULL},
	 { (char *)"fastcontainedby_setEnvironment", _wrap_fastcontainedby_setEnvironment, METH_VARARGS, NULL},
	 { (char *)"fastcontainedby___call__", _wrap_fastcontainedby___call__, METH_VARARGS, NULL},
	 { (char *)"new_fastcontainedby", _wrap_new_fastcontainedby, METH_VARARGS, NULL},
	 { (char *)"delete_fastcontainedby", _wrap_delete_fastcontainedby, METH_VARARGS, NULL},
	 { (char *)"fastcontainedby_swigregister", fastcontainedby_swigregister, METH_VARARGS, NULL},
	 { (char *)"contains___call__", _wrap_contains___call__, METH_VARARGS, NULL},
	 { (char *)"new_contains", _wrap_new_contains, METH_VARARGS, NULL},
	 { (char *)"delete_contains", _wrap_delete_contains, METH_VARARGS, NULL},
	 { (char *)"contains_swigregister", contains_swigregister, METH_VARARGS, NULL},
	 { (char *)"pointpoly_xs_set", _wrap_pointpoly_xs_set, METH_VARARGS, NULL},
	 { (char *)"pointpoly_xs_get", _wrap_pointpoly_xs_get, METH_VARARGS, NULL},
	 { (char *)"pointpoly_ys_set", _wrap_pointpoly_ys_set, METH_VARARGS, NULL},
	 { (char *)"pointpoly_ys_get", _wrap_pointpoly_ys_get, METH_VARARGS, NULL},
	 { (char *)"pointpoly___call__", _wrap_pointpoly___call__, METH_VARARGS, NULL},
	 { (char *)"new_pointpoly", _wrap_new_pointpoly, METH_VARARGS, NULL},
	 { (char *)"delete_pointpoly", _wrap_delete_pointpoly, METH_VARARGS, NULL},
	 { (char *)"pointpoly_swigregister", pointpoly_swigregister, METH_VARARGS, NULL},
	 { (char *)"inverse_pointer_attr_set", _wrap_inverse_pointer_attr_set, METH_VARARGS, NULL},
	 { (char *)"inverse_pointer_attr_get", _wrap_inverse_pointer_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_inverse_pointer", _wrap_new_inverse_pointer, METH_VARARGS, NULL},
	 { (char *)"inverse_pointer___call__", _wrap_inverse_pointer___call__, METH_VARARGS, NULL},
	 { (char *)"delete_inverse_pointer", _wrap_delete_inverse_pointer, METH_VARARGS, NULL},
	 { (char *)"inverse_pointer_swigregister", inverse_pointer_swigregister, METH_VARARGS, NULL},
	 { (char *)"bypointer_attr_set", _wrap_bypointer_attr_set, METH_VARARGS, NULL},
	 { (char *)"bypointer_attr_get", _wrap_bypointer_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_bypointer", _wrap_new_bypointer, METH_VARARGS, NULL},
	 { (char *)"bypointer___call__", _wrap_bypointer___call__, METH_VARARGS, NULL},
	 { (char *)"delete_bypointer", _wrap_delete_bypointer, METH_VARARGS, NULL},
	 { (char *)"bypointer_swigregister", bypointer_swigregister, METH_VARARGS, NULL},
	 { (char *)"unify___call__", _wrap_unify___call__, METH_VARARGS, NULL},
	 { (char *)"new_unify", _wrap_new_unify, METH_VARARGS, NULL},
	 { (char *)"delete_unify", _wrap_delete_unify, METH_VARARGS, NULL},
	 { (char *)"unify_swigregister", unify_swigregister, METH_VARARGS, NULL},
	 { (char *)"ident___call__", _wrap_ident___call__, METH_VARARGS, NULL},
	 { (char *)"new_ident", _wrap_new_ident, METH_VARARGS, NULL},
	 { (char *)"delete_ident", _wrap_delete_ident, METH_VARARGS, NULL},
	 { (char *)"ident_swigregister", ident_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_interpolate1Dint", _wrap_new_interpolate1Dint, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dint___call__", _wrap_interpolate1Dint___call__, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dint_interp", _wrap_interpolate1Dint_interp, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dint_getOutScheme", _wrap_interpolate1Dint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_interpolate1Dint", _wrap_delete_interpolate1Dint, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dint_swigregister", interpolate1Dint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_interpolate1Dfloat", _wrap_new_interpolate1Dfloat, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dfloat___call__", _wrap_interpolate1Dfloat___call__, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dfloat_interp", _wrap_interpolate1Dfloat_interp, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dfloat_getOutScheme", _wrap_interpolate1Dfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_interpolate1Dfloat", _wrap_delete_interpolate1Dfloat, METH_VARARGS, NULL},
	 { (char *)"interpolate1Dfloat_swigregister", interpolate1Dfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_avgint", _wrap_new_avgint, METH_VARARGS, NULL},
	 { (char *)"avgint___call__", _wrap_avgint___call__, METH_VARARGS, NULL},
	 { (char *)"avgint_average", _wrap_avgint_average, METH_VARARGS, NULL},
	 { (char *)"avgint_getOutScheme", _wrap_avgint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_avgint", _wrap_delete_avgint, METH_VARARGS, NULL},
	 { (char *)"avgint_swigregister", avgint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_avgfloat", _wrap_new_avgfloat, METH_VARARGS, NULL},
	 { (char *)"avgfloat___call__", _wrap_avgfloat___call__, METH_VARARGS, NULL},
	 { (char *)"avgfloat_average", _wrap_avgfloat_average, METH_VARARGS, NULL},
	 { (char *)"avgfloat_getOutScheme", _wrap_avgfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_avgfloat", _wrap_delete_avgfloat, METH_VARARGS, NULL},
	 { (char *)"avgfloat_swigregister", avgfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sumint", _wrap_new_sumint, METH_VARARGS, NULL},
	 { (char *)"sumint___call__", _wrap_sumint___call__, METH_VARARGS, NULL},
	 { (char *)"sumint_sum", _wrap_sumint_sum, METH_VARARGS, NULL},
	 { (char *)"sumint_getOutScheme", _wrap_sumint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_sumint", _wrap_delete_sumint, METH_VARARGS, NULL},
	 { (char *)"sumint_swigregister", sumint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sumfloat", _wrap_new_sumfloat, METH_VARARGS, NULL},
	 { (char *)"sumfloat___call__", _wrap_sumfloat___call__, METH_VARARGS, NULL},
	 { (char *)"sumfloat_sum", _wrap_sumfloat_sum, METH_VARARGS, NULL},
	 { (char *)"sumfloat_getOutScheme", _wrap_sumfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_sumfloat", _wrap_delete_sumfloat, METH_VARARGS, NULL},
	 { (char *)"sumfloat_swigregister", sumfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_trigradint", _wrap_new_trigradint, METH_VARARGS, NULL},
	 { (char *)"trigradint___call__", _wrap_trigradint___call__, METH_VARARGS, NULL},
	 { (char *)"trigradint_trigrad", _wrap_trigradint_trigrad, METH_VARARGS, NULL},
	 { (char *)"trigradint_getOutScheme", _wrap_trigradint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_trigradint", _wrap_delete_trigradint, METH_VARARGS, NULL},
	 { (char *)"trigradint_swigregister", trigradint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_trigradfloat", _wrap_new_trigradfloat, METH_VARARGS, NULL},
	 { (char *)"trigradfloat___call__", _wrap_trigradfloat___call__, METH_VARARGS, NULL},
	 { (char *)"trigradfloat_trigrad", _wrap_trigradfloat_trigrad, METH_VARARGS, NULL},
	 { (char *)"trigradfloat_getOutScheme", _wrap_trigradfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_trigradfloat", _wrap_delete_trigradfloat, METH_VARARGS, NULL},
	 { (char *)"trigradfloat_swigregister", trigradfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_grad3Dint", _wrap_new_grad3Dint, METH_VARARGS, NULL},
	 { (char *)"grad3Dint___call__", _wrap_grad3Dint___call__, METH_VARARGS, NULL},
	 { (char *)"grad3Dint_gradLeastSquares", _wrap_grad3Dint_gradLeastSquares, METH_VARARGS, NULL},
	 { (char *)"grad3Dint_getOutScheme", _wrap_grad3Dint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_grad3Dint", _wrap_delete_grad3Dint, METH_VARARGS, NULL},
	 { (char *)"grad3Dint_swigregister", grad3Dint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_grad3Dfloat", _wrap_new_grad3Dfloat, METH_VARARGS, NULL},
	 { (char *)"grad3Dfloat___call__", _wrap_grad3Dfloat___call__, METH_VARARGS, NULL},
	 { (char *)"grad3Dfloat_gradLeastSquares", _wrap_grad3Dfloat_gradLeastSquares, METH_VARARGS, NULL},
	 { (char *)"grad3Dfloat_getOutScheme", _wrap_grad3Dfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_grad3Dfloat", _wrap_delete_grad3Dfloat, METH_VARARGS, NULL},
	 { (char *)"grad3Dfloat_swigregister", grad3Dfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_gradint", _wrap_new_gradint, METH_VARARGS, NULL},
	 { (char *)"gradint___call__", _wrap_gradint___call__, METH_VARARGS, NULL},
	 { (char *)"gradint_gradLeastSquares", _wrap_gradint_gradLeastSquares, METH_VARARGS, NULL},
	 { (char *)"gradint_gradnorm", _wrap_gradint_gradnorm, METH_VARARGS, NULL},
	 { (char *)"gradint_getOutScheme", _wrap_gradint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_gradint", _wrap_delete_gradint, METH_VARARGS, NULL},
	 { (char *)"gradint_swigregister", gradint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_gradfloat", _wrap_new_gradfloat, METH_VARARGS, NULL},
	 { (char *)"gradfloat___call__", _wrap_gradfloat___call__, METH_VARARGS, NULL},
	 { (char *)"gradfloat_gradLeastSquares", _wrap_gradfloat_gradLeastSquares, METH_VARARGS, NULL},
	 { (char *)"gradfloat_gradnorm", _wrap_gradfloat_gradnorm, METH_VARARGS, NULL},
	 { (char *)"gradfloat_getOutScheme", _wrap_gradfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_gradfloat", _wrap_delete_gradfloat, METH_VARARGS, NULL},
	 { (char *)"gradfloat_swigregister", gradfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_minint", _wrap_new_minint, METH_VARARGS, NULL},
	 { (char *)"minint___call__", _wrap_minint___call__, METH_VARARGS, NULL},
	 { (char *)"minint_min", _wrap_minint_min, METH_VARARGS, NULL},
	 { (char *)"minint_getOutScheme", _wrap_minint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_minint", _wrap_delete_minint, METH_VARARGS, NULL},
	 { (char *)"minint_swigregister", minint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_minfloat", _wrap_new_minfloat, METH_VARARGS, NULL},
	 { (char *)"minfloat___call__", _wrap_minfloat___call__, METH_VARARGS, NULL},
	 { (char *)"minfloat_min", _wrap_minfloat_min, METH_VARARGS, NULL},
	 { (char *)"minfloat_getOutScheme", _wrap_minfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_minfloat", _wrap_delete_minfloat, METH_VARARGS, NULL},
	 { (char *)"minfloat_swigregister", minfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_maxint", _wrap_new_maxint, METH_VARARGS, NULL},
	 { (char *)"maxint___call__", _wrap_maxint___call__, METH_VARARGS, NULL},
	 { (char *)"maxint_max", _wrap_maxint_max, METH_VARARGS, NULL},
	 { (char *)"maxint_getOutScheme", _wrap_maxint_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_maxint", _wrap_delete_maxint, METH_VARARGS, NULL},
	 { (char *)"maxint_swigregister", maxint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_maxfloat", _wrap_new_maxfloat, METH_VARARGS, NULL},
	 { (char *)"maxfloat___call__", _wrap_maxfloat___call__, METH_VARARGS, NULL},
	 { (char *)"maxfloat_max", _wrap_maxfloat_max, METH_VARARGS, NULL},
	 { (char *)"maxfloat_getOutScheme", _wrap_maxfloat_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_maxfloat", _wrap_delete_maxfloat, METH_VARARGS, NULL},
	 { (char *)"maxfloat_swigregister", maxfloat_swigregister, METH_VARARGS, NULL},
	 { (char *)"intunion_vecattr_set", _wrap_intunion_vecattr_set, METH_VARARGS, NULL},
	 { (char *)"intunion_vecattr_get", _wrap_intunion_vecattr_get, METH_VARARGS, NULL},
	 { (char *)"intunion_valattr_set", _wrap_intunion_valattr_set, METH_VARARGS, NULL},
	 { (char *)"intunion_valattr_get", _wrap_intunion_valattr_get, METH_VARARGS, NULL},
	 { (char *)"intunion_type_set", _wrap_intunion_type_set, METH_VARARGS, NULL},
	 { (char *)"intunion_type_get", _wrap_intunion_type_get, METH_VARARGS, NULL},
	 { (char *)"new_intunion", _wrap_new_intunion, METH_VARARGS, NULL},
	 { (char *)"intunion___call__", _wrap_intunion___call__, METH_VARARGS, NULL},
	 { (char *)"intunion_getOutScheme", _wrap_intunion_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_intunion", _wrap_delete_intunion, METH_VARARGS, NULL},
	 { (char *)"intunion_swigregister", intunion_swigregister, METH_VARARGS, NULL},
	 { (char *)"floatunion_vecattr_set", _wrap_floatunion_vecattr_set, METH_VARARGS, NULL},
	 { (char *)"floatunion_vecattr_get", _wrap_floatunion_vecattr_get, METH_VARARGS, NULL},
	 { (char *)"floatunion_valattr_set", _wrap_floatunion_valattr_set, METH_VARARGS, NULL},
	 { (char *)"floatunion_valattr_get", _wrap_floatunion_valattr_get, METH_VARARGS, NULL},
	 { (char *)"floatunion_type_set", _wrap_floatunion_type_set, METH_VARARGS, NULL},
	 { (char *)"floatunion_type_get", _wrap_floatunion_type_get, METH_VARARGS, NULL},
	 { (char *)"new_floatunion", _wrap_new_floatunion, METH_VARARGS, NULL},
	 { (char *)"floatunion___call__", _wrap_floatunion___call__, METH_VARARGS, NULL},
	 { (char *)"floatunion_getOutScheme", _wrap_floatunion_getOutScheme, METH_VARARGS, NULL},
	 { (char *)"delete_floatunion", _wrap_delete_floatunion, METH_VARARGS, NULL},
	 { (char *)"floatunion_swigregister", floatunion_swigregister, METH_VARARGS, NULL},
	 { (char *)"intmember_item_attr_set", _wrap_intmember_item_attr_set, METH_VARARGS, NULL},
	 { (char *)"intmember_item_attr_get", _wrap_intmember_item_attr_get, METH_VARARGS, NULL},
	 { (char *)"intmember_set_attr_set", _wrap_intmember_set_attr_set, METH_VARARGS, NULL},
	 { (char *)"intmember_set_attr_get", _wrap_intmember_set_attr_get, METH_VARARGS, NULL},
	 { (char *)"intmember_set_value_attr_set", _wrap_intmember_set_value_attr_set, METH_VARARGS, NULL},
	 { (char *)"intmember_set_value_attr_get", _wrap_intmember_set_value_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_intmember", _wrap_new_intmember, METH_VARARGS, NULL},
	 { (char *)"intmember___call__", _wrap_intmember___call__, METH_VARARGS, NULL},
	 { (char *)"delete_intmember", _wrap_delete_intmember, METH_VARARGS, NULL},
	 { (char *)"intmember_swigregister", intmember_swigregister, METH_VARARGS, NULL},
	 { (char *)"floatmember_item_attr_set", _wrap_floatmember_item_attr_set, METH_VARARGS, NULL},
	 { (char *)"floatmember_item_attr_get", _wrap_floatmember_item_attr_get, METH_VARARGS, NULL},
	 { (char *)"floatmember_set_attr_set", _wrap_floatmember_set_attr_set, METH_VARARGS, NULL},
	 { (char *)"floatmember_set_attr_get", _wrap_floatmember_set_attr_get, METH_VARARGS, NULL},
	 { (char *)"floatmember_set_value_attr_set", _wrap_floatmember_set_value_attr_set, METH_VARARGS, NULL},
	 { (char *)"floatmember_set_value_attr_get", _wrap_floatmember_set_value_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_floatmember", _wrap_new_floatmember, METH_VARARGS, NULL},
	 { (char *)"floatmember___call__", _wrap_floatmember___call__, METH_VARARGS, NULL},
	 { (char *)"delete_floatmember", _wrap_delete_floatmember, METH_VARARGS, NULL},
	 { (char *)"floatmember_swigregister", floatmember_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MergeOp", _wrap_new_MergeOp, METH_VARARGS, NULL},
	 { (char *)"MergeOp_Execute", _wrap_MergeOp_Execute, METH_VARARGS, NULL},
	 { (char *)"MergeOp_Merge", _wrap_MergeOp_Merge, METH_VARARGS, NULL},
	 { (char *)"delete_MergeOp", _wrap_delete_MergeOp, METH_VARARGS, NULL},
	 { (char *)"MergeOp_swigregister", MergeOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SiftOp", _wrap_new_SiftOp, METH_VARARGS, NULL},
	 { (char *)"SiftOp_Execute", _wrap_SiftOp_Execute, METH_VARARGS, NULL},
	 { (char *)"SiftOp_Sift", _wrap_SiftOp_Sift, METH_VARARGS, NULL},
	 { (char *)"delete_SiftOp", _wrap_delete_SiftOp, METH_VARARGS, NULL},
	 { (char *)"SiftOp_swigregister", SiftOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"typeformat", _wrap_typeformat, METH_VARARGS, NULL},
	 { (char *)"typeval", _wrap_typeval, METH_VARARGS, NULL},
	 { (char *)"typesize", _wrap_typesize, METH_VARARGS, NULL},
	 { (char *)"plusplus", _wrap_plusplus, METH_VARARGS, NULL},
	 { (char *)"new_Scheme", _wrap_new_Scheme, METH_VARARGS, NULL},
	 { (char *)"Scheme_addAttribute", _wrap_Scheme_addAttribute, METH_VARARGS, NULL},
	 { (char *)"Scheme_removeAttribute", _wrap_Scheme_removeAttribute, METH_VARARGS, NULL},
	 { (char *)"Scheme_clear", _wrap_Scheme_clear, METH_VARARGS, NULL},
	 { (char *)"Scheme_Subsumes", _wrap_Scheme_Subsumes, METH_VARARGS, NULL},
	 { (char *)"Scheme_begin", _wrap_Scheme_begin, METH_VARARGS, NULL},
	 { (char *)"Scheme_end", _wrap_Scheme_end, METH_VARARGS, NULL},
	 { (char *)"Scheme_size", _wrap_Scheme_size, METH_VARARGS, NULL},
	 { (char *)"Scheme_bytesize", _wrap_Scheme_bytesize, METH_VARARGS, NULL},
	 { (char *)"Scheme_byteposition", _wrap_Scheme_byteposition, METH_VARARGS, NULL},
	 { (char *)"Scheme_getType", _wrap_Scheme_getType, METH_VARARGS, NULL},
	 { (char *)"Scheme_getPosition", _wrap_Scheme_getPosition, METH_VARARGS, NULL},
	 { (char *)"Scheme_getAttribute", _wrap_Scheme_getAttribute, METH_VARARGS, NULL},
	 { (char *)"Scheme_isAttribute", _wrap_Scheme_isAttribute, METH_VARARGS, NULL},
	 { (char *)"Scheme___eq__", _wrap_Scheme___eq__, METH_VARARGS, NULL},
	 { (char *)"Scheme___ge__", _wrap_Scheme___ge__, METH_VARARGS, NULL},
	 { (char *)"Scheme___le__", _wrap_Scheme___le__, METH_VARARGS, NULL},
	 { (char *)"Scheme_formatOf", _wrap_Scheme_formatOf, METH_VARARGS, NULL},
	 { (char *)"Scheme_asString", _wrap_Scheme_asString, METH_VARARGS, NULL},
	 { (char *)"Scheme_PrintTo", _wrap_Scheme_PrintTo, METH_VARARGS, NULL},
	 { (char *)"Scheme_show", _wrap_Scheme_show, METH_VARARGS, NULL},
	 { (char *)"delete_Scheme", _wrap_delete_Scheme, METH_VARARGS, NULL},
	 { (char *)"Scheme_swigregister", Scheme_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Tuple", _wrap_new_Tuple, METH_VARARGS, NULL},
	 { (char *)"Tuple_getScheme", _wrap_Tuple_getScheme, METH_VARARGS, NULL},
	 { (char *)"Tuple_get", _wrap_Tuple_get, METH_VARARGS, NULL},
	 { (char *)"Tuple_set", _wrap_Tuple_set, METH_VARARGS, NULL},
	 { (char *)"Tuple_getAttribute", _wrap_Tuple_getAttribute, METH_VARARGS, NULL},
	 { (char *)"Tuple_size", _wrap_Tuple_size, METH_VARARGS, NULL},
	 { (char *)"Tuple_asString", _wrap_Tuple_asString, METH_VARARGS, NULL},
	 { (char *)"Tuple_show", _wrap_Tuple_show, METH_VARARGS, NULL},
	 { (char *)"Tuple_PrintTo", _wrap_Tuple_PrintTo, METH_VARARGS, NULL},
	 { (char *)"Tuple_bytesize", _wrap_Tuple_bytesize, METH_VARARGS, NULL},
	 { (char *)"Tuple_Next", _wrap_Tuple_Next, METH_VARARGS, NULL},
	 { (char *)"Tuple_Allocate", _wrap_Tuple_Allocate, METH_VARARGS, NULL},
	 { (char *)"Tuple_assign", _wrap_Tuple_assign, METH_VARARGS, NULL},
	 { (char *)"Tuple_copy", _wrap_Tuple_copy, METH_VARARGS, NULL},
	 { (char *)"Tuple_isNull", _wrap_Tuple_isNull, METH_VARARGS, NULL},
	 { (char *)"Tuple_Read", _wrap_Tuple_Read, METH_VARARGS, NULL},
	 { (char *)"Tuple_Parse", _wrap_Tuple_Parse, METH_VARARGS, NULL},
	 { (char *)"Tuple_Covers", _wrap_Tuple_Covers, METH_VARARGS, NULL},
	 { (char *)"Tuple_CoveredBy", _wrap_Tuple_CoveredBy, METH_VARARGS, NULL},
	 { (char *)"delete_Tuple", _wrap_delete_Tuple, METH_VARARGS, NULL},
	 { (char *)"Tuple_swigregister", Tuple_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ProjectOp", _wrap_new_ProjectOp, METH_VARARGS, NULL},
	 { (char *)"ProjectOp_Execute", _wrap_ProjectOp_Execute, METH_VARARGS, NULL},
	 { (char *)"ProjectOp_Project", _wrap_ProjectOp_Project, METH_VARARGS, NULL},
	 { (char *)"delete_ProjectOp", _wrap_delete_ProjectOp, METH_VARARGS, NULL},
	 { (char *)"ProjectOp_swigregister", ProjectOp_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OneGrid", _wrap_new_OneGrid, METH_VARARGS, NULL},
	 { (char *)"delete_OneGrid", _wrap_delete_OneGrid, METH_VARARGS, NULL},
	 { (char *)"OneGrid_swigregister", OneGrid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ZeroGrid", _wrap_new_ZeroGrid, METH_VARARGS, NULL},
	 { (char *)"delete_ZeroGrid", _wrap_delete_ZeroGrid, METH_VARARGS, NULL},
	 { (char *)"ZeroGrid_swigregister", ZeroGrid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TupleFunction", _wrap_new_TupleFunction, METH_VARARGS, NULL},
	 { (char *)"delete_TupleFunction", _wrap_delete_TupleFunction, METH_VARARGS, NULL},
	 { (char *)"TupleFunction_Parse", _wrap_TupleFunction_Parse, METH_VARARGS, NULL},
	 { (char *)"TupleFunction_ReturnType", _wrap_TupleFunction_ReturnType, METH_VARARGS, NULL},
	 { (char *)"TupleFunction_InputType", _wrap_TupleFunction_InputType, METH_VARARGS, NULL},
	 { (char *)"TupleFunction_Eval", _wrap_TupleFunction_Eval, METH_VARARGS, NULL},
	 { (char *)"TupleFunction_swigregister", TupleFunction_swigregister, METH_VARARGS, NULL},
	 { (char *)"SpecializedTupleFunction_SpecializeFor", _wrap_SpecializedTupleFunction_SpecializeFor, METH_VARARGS, NULL},
	 { (char *)"SpecializedTupleFunction_Eval", _wrap_SpecializedTupleFunction_Eval, METH_VARARGS, NULL},
	 { (char *)"new_SpecializedTupleFunction", _wrap_new_SpecializedTupleFunction, METH_VARARGS, NULL},
	 { (char *)"delete_SpecializedTupleFunction", _wrap_delete_SpecializedTupleFunction, METH_VARARGS, NULL},
	 { (char *)"SpecializedTupleFunction_swigregister", SpecializedTupleFunction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_nullstream", _wrap_new_nullstream, METH_VARARGS, NULL},
	 { (char *)"delete_nullstream", _wrap_delete_nullstream, METH_VARARGS, NULL},
	 { (char *)"nullstream_swigregister", nullstream_swigregister, METH_VARARGS, NULL},
	 { (char *)"split", _wrap_split, METH_VARARGS, NULL},
	 { (char *)"remove_whitespace", _wrap_remove_whitespace, METH_VARARGS, NULL},
	 { (char *)"same", _wrap_same, METH_VARARGS, NULL},
	 { (char *)"Fatal", _wrap_Fatal, METH_VARARGS, NULL},
	 { (char *)"Warning", _wrap_Warning, METH_VARARGS, NULL},
	 { (char *)"tab", _wrap_tab, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_magic_set", _wrap_ElcircHeader_magic_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_magic_get", _wrap_ElcircHeader_magic_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_version_set", _wrap_ElcircHeader_version_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_version_get", _wrap_ElcircHeader_version_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_start_time_set", _wrap_ElcircHeader_start_time_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_start_time_get", _wrap_ElcircHeader_start_time_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_variable_nm_set", _wrap_ElcircHeader_variable_nm_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_variable_nm_get", _wrap_ElcircHeader_variable_nm_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_variable_dim_set", _wrap_ElcircHeader_variable_dim_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_variable_dim_get", _wrap_ElcircHeader_variable_dim_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_v_set", _wrap_ElcircHeader_v_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_v_get", _wrap_ElcircHeader_v_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_compress_set", _wrap_ElcircHeader_compress_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_compress_get", _wrap_ElcircHeader_compress_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_a_set", _wrap_ElcircHeader_a_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_a_get", _wrap_ElcircHeader_a_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_b_set", _wrap_ElcircHeader_b_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_b_get", _wrap_ElcircHeader_b_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_nsteps_set", _wrap_ElcircHeader_nsteps_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_nsteps_get", _wrap_ElcircHeader_nsteps_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_timestep_set", _wrap_ElcircHeader_timestep_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_timestep_get", _wrap_ElcircHeader_timestep_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_skip_set", _wrap_ElcircHeader_skip_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_skip_get", _wrap_ElcircHeader_skip_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ivs_set", _wrap_ElcircHeader_ivs_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ivs_get", _wrap_ElcircHeader_ivs_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_i23d_set", _wrap_ElcircHeader_i23d_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_i23d_get", _wrap_ElcircHeader_i23d_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_vpos_set", _wrap_ElcircHeader_vpos_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_vpos_get", _wrap_ElcircHeader_vpos_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_zmsl_set", _wrap_ElcircHeader_zmsl_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_zmsl_get", _wrap_ElcircHeader_zmsl_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ivcor_set", _wrap_ElcircHeader_ivcor_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ivcor_get", _wrap_ElcircHeader_ivcor_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_h0_set", _wrap_ElcircHeader_h0_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_h0_get", _wrap_ElcircHeader_h0_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_hs_set", _wrap_ElcircHeader_hs_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_hs_get", _wrap_ElcircHeader_hs_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_hc_set", _wrap_ElcircHeader_hc_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_hc_get", _wrap_ElcircHeader_hc_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_thetab_set", _wrap_ElcircHeader_thetab_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_thetab_get", _wrap_ElcircHeader_thetab_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_thetaf_set", _wrap_ElcircHeader_thetaf_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_thetaf_get", _wrap_ElcircHeader_thetaf_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_nvrt_set", _wrap_ElcircHeader_nvrt_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_nvrt_get", _wrap_ElcircHeader_nvrt_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_kz_set", _wrap_ElcircHeader_kz_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_kz_get", _wrap_ElcircHeader_kz_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ks_set", _wrap_ElcircHeader_ks_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ks_get", _wrap_ElcircHeader_ks_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_nitems_set", _wrap_ElcircHeader_nitems_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_nitems_get", _wrap_ElcircHeader_nitems_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_hsize_set", _wrap_ElcircHeader_hsize_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_hsize_get", _wrap_ElcircHeader_hsize_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ssize_set", _wrap_ElcircHeader_ssize_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ssize_get", _wrap_ElcircHeader_ssize_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_sigma_set", _wrap_ElcircHeader_sigma_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_sigma_get", _wrap_ElcircHeader_sigma_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_zcor_set", _wrap_ElcircHeader_zcor_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_zcor_get", _wrap_ElcircHeader_zcor_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_np_set", _wrap_ElcircHeader_np_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_np_get", _wrap_ElcircHeader_np_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ne_set", _wrap_ElcircHeader_ne_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_ne_get", _wrap_ElcircHeader_ne_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_x_set", _wrap_ElcircHeader_x_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_x_get", _wrap_ElcircHeader_x_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_y_set", _wrap_ElcircHeader_y_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_y_get", _wrap_ElcircHeader_y_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_d_set", _wrap_ElcircHeader_d_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_d_get", _wrap_ElcircHeader_d_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_bi_set", _wrap_ElcircHeader_bi_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_bi_get", _wrap_ElcircHeader_bi_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_no_set", _wrap_ElcircHeader_no_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_no_get", _wrap_ElcircHeader_no_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_etype_set", _wrap_ElcircHeader_etype_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_etype_get", _wrap_ElcircHeader_etype_get, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_icon_set", _wrap_ElcircHeader_icon_set, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_icon_get", _wrap_ElcircHeader_icon_get, METH_VARARGS, NULL},
	 { (char *)"new_ElcircHeader", _wrap_new_ElcircHeader, METH_VARARGS, NULL},
	 { (char *)"delete_ElcircHeader", _wrap_delete_ElcircHeader, METH_VARARGS, NULL},
	 { (char *)"ElcircHeader_swigregister", ElcircHeader_swigregister, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_t_set", _wrap_ElcircTimeStep_t_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_t_get", _wrap_ElcircTimeStep_t_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_it_set", _wrap_ElcircTimeStep_it_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_it_get", _wrap_ElcircTimeStep_it_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_surfind_set", _wrap_ElcircTimeStep_surfind_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_surfind_get", _wrap_ElcircTimeStep_surfind_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_e_set", _wrap_ElcircTimeStep_e_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_e_get", _wrap_ElcircTimeStep_e_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_d_set", _wrap_ElcircTimeStep_d_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_d_get", _wrap_ElcircTimeStep_d_get, METH_VARARGS, NULL},
	 { (char *)"new_ElcircTimeStep", _wrap_new_ElcircTimeStep, METH_VARARGS, NULL},
	 { (char *)"delete_ElcircTimeStep", _wrap_delete_ElcircTimeStep, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStep_swigregister", ElcircTimeStep_swigregister, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_t_set", _wrap_ElcircTimeStepAtNode_t_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_t_get", _wrap_ElcircTimeStepAtNode_t_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_it_set", _wrap_ElcircTimeStepAtNode_it_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_it_get", _wrap_ElcircTimeStepAtNode_it_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_istart_set", _wrap_ElcircTimeStepAtNode_istart_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_istart_get", _wrap_ElcircTimeStepAtNode_istart_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_istop_set", _wrap_ElcircTimeStepAtNode_istop_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_istop_get", _wrap_ElcircTimeStepAtNode_istop_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_npts_set", _wrap_ElcircTimeStepAtNode_npts_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_npts_get", _wrap_ElcircTimeStepAtNode_npts_get, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_d_set", _wrap_ElcircTimeStepAtNode_d_set, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_d_get", _wrap_ElcircTimeStepAtNode_d_get, METH_VARARGS, NULL},
	 { (char *)"new_ElcircTimeStepAtNode", _wrap_new_ElcircTimeStepAtNode, METH_VARARGS, NULL},
	 { (char *)"delete_ElcircTimeStepAtNode", _wrap_delete_ElcircTimeStepAtNode, METH_VARARGS, NULL},
	 { (char *)"ElcircTimeStepAtNode_swigregister", ElcircTimeStepAtNode_swigregister, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_ne_set", _wrap_ElioGrid_ne_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_ne_get", _wrap_ElioGrid_ne_get, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_np_set", _wrap_ElioGrid_np_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_np_get", _wrap_ElioGrid_np_get, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_x_set", _wrap_ElioGrid_x_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_x_get", _wrap_ElioGrid_x_get, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_y_set", _wrap_ElioGrid_y_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_y_get", _wrap_ElioGrid_y_get, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_d_set", _wrap_ElioGrid_d_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_d_get", _wrap_ElioGrid_d_get, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_etype_set", _wrap_ElioGrid_etype_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_etype_get", _wrap_ElioGrid_etype_get, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_icon_set", _wrap_ElioGrid_icon_set, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_icon_get", _wrap_ElioGrid_icon_get, METH_VARARGS, NULL},
	 { (char *)"new_ElioGrid", _wrap_new_ElioGrid, METH_VARARGS, NULL},
	 { (char *)"delete_ElioGrid", _wrap_delete_ElioGrid, METH_VARARGS, NULL},
	 { (char *)"ElioGrid_swigregister", ElioGrid_swigregister, METH_VARARGS, NULL},
	 { (char *)"ElioReadGrid", _wrap_ElioReadGrid, METH_VARARGS, NULL},
	 { (char *)"ElioFindElementInGrid", _wrap_ElioFindElementInGrid, METH_VARARGS, NULL},
	 { (char *)"ElioGetCoefficientsGrid", _wrap_ElioGetCoefficientsGrid, METH_VARARGS, NULL},
	 { (char *)"ElioGridFindNearestNode", _wrap_ElioGridFindNearestNode, METH_VARARGS, NULL},
	 { (char *)"ElioFindNearestNode", _wrap_ElioFindNearestNode, METH_VARARGS, NULL},
	 { (char *)"ElioGetGridElementCenter", _wrap_ElioGetGridElementCenter, METH_VARARGS, NULL},
	 { (char *)"ElioGetGridElementArea", _wrap_ElioGetGridElementArea, METH_VARARGS, NULL},
	 { (char *)"ElioGetHeader", _wrap_ElioGetHeader, METH_VARARGS, NULL},
	 { (char *)"ElioAllocateHeader", _wrap_ElioAllocateHeader, METH_VARARGS, NULL},
	 { (char *)"ElioFreeHeader", _wrap_ElioFreeHeader, METH_VARARGS, NULL},
	 { (char *)"ElioPrintHeader", _wrap_ElioPrintHeader, METH_VARARGS, NULL},
	 { (char *)"ElioGetNStepsInFile", _wrap_ElioGetNStepsInFile, METH_VARARGS, NULL},
	 { (char *)"ElioGetTimeStep", _wrap_ElioGetTimeStep, METH_VARARGS, NULL},
	 { (char *)"ElioFreeTimeStep", _wrap_ElioFreeTimeStep, METH_VARARGS, NULL},
	 { (char *)"ElioAllocateTimeStep", _wrap_ElioAllocateTimeStep, METH_VARARGS, NULL},
	 { (char *)"ElioGetNode", _wrap_ElioGetNode, METH_VARARGS, NULL},
	 { (char *)"ElioGetNodeOld", _wrap_ElioGetNodeOld, METH_VARARGS, NULL},
	 { (char *)"ElioExtractNode", _wrap_ElioExtractNode, METH_VARARGS, NULL},
	 { (char *)"ElioGetXYData", _wrap_ElioGetXYData, METH_VARARGS, NULL},
	 { (char *)"ElioGetXYData2", _wrap_ElioGetXYData2, METH_VARARGS, NULL},
	 { (char *)"ElioInterpTimeStep", _wrap_ElioInterpTimeStep, METH_VARARGS, NULL},
	 { (char *)"ElioGetPoint", _wrap_ElioGetPoint, METH_VARARGS, NULL},
	 { (char *)"ElioMakeScalarsOld", _wrap_ElioMakeScalarsOld, METH_VARARGS, NULL},
	 { (char *)"ElioMakeVectorsOld", _wrap_ElioMakeVectorsOld, METH_VARARGS, NULL},
	 { (char *)"ElioExtractGrid", _wrap_ElioExtractGrid, METH_VARARGS, NULL},
	 { (char *)"ElioExtractData", _wrap_ElioExtractData, METH_VARARGS, NULL},
	 { (char *)"ElioIntersectToLeft", _wrap_ElioIntersectToLeft, METH_VARARGS, NULL},
	 { (char *)"ElioInPolygon", _wrap_ElioInPolygon, METH_VARARGS, NULL},
	 { (char *)"ElioFindElementXY", _wrap_ElioFindElementXY, METH_VARARGS, NULL},
	 { (char *)"ElioInsideElement", _wrap_ElioInsideElement, METH_VARARGS, NULL},
	 { (char *)"ElioInsideElement4", _wrap_ElioInsideElement4, METH_VARARGS, NULL},
	 { (char *)"ElioEvalFlowXY", _wrap_ElioEvalFlowXY, METH_VARARGS, NULL},
	 { (char *)"ElioEvalScalarXY", _wrap_ElioEvalScalarXY, METH_VARARGS, NULL},
	 { (char *)"ElioEval", _wrap_ElioEval, METH_VARARGS, NULL},
	 { (char *)"ElioGetCoefficients", _wrap_ElioGetCoefficients, METH_VARARGS, NULL},
	 { (char *)"ibilinear", _wrap_ibilinear, METH_VARARGS, NULL},
	 { (char *)"ElioGetZPos", _wrap_ElioGetZPos, METH_VARARGS, NULL},
	 { (char *)"ElioGetSurfaceHeader", _wrap_ElioGetSurfaceHeader, METH_VARARGS, NULL},
	 { (char *)"ElioGetSurfaceStep", _wrap_ElioGetSurfaceStep, METH_VARARGS, NULL},
	 { (char *)"ElioGetBottomHeader", _wrap_ElioGetBottomHeader, METH_VARARGS, NULL},
	 { (char *)"ElioGetBottomStep", _wrap_ElioGetBottomStep, METH_VARARGS, NULL},
	 { (char *)"ElioGetTransectHeader", _wrap_ElioGetTransectHeader, METH_VARARGS, NULL},
	 { (char *)"ElioGetTransectStep", _wrap_ElioGetTransectStep, METH_VARARGS, NULL},
	 { (char *)"ElioGetLevelHeader", _wrap_ElioGetLevelHeader, METH_VARARGS, NULL},
	 { (char *)"ElioGetLevelStep", _wrap_ElioGetLevelStep, METH_VARARGS, NULL},
	 { (char *)"ElioGetZLevelHeader", _wrap_ElioGetZLevelHeader, METH_VARARGS, NULL},
	 { (char *)"ElioGetZLevelStep", _wrap_ElioGetZLevelStep, METH_VARARGS, NULL},
	 { (char *)"ElioPutHeader", _wrap_ElioPutHeader, METH_VARARGS, NULL},
	 { (char *)"ElioPutTimeStep", _wrap_ElioPutTimeStep, METH_VARARGS, NULL},
	 { (char *)"ElioPutHeaderOld", _wrap_ElioPutHeaderOld, METH_VARARGS, NULL},
	 { (char *)"ElioPutTimeStepOld", _wrap_ElioPutTimeStepOld, METH_VARARGS, NULL},
	 { (char *)"ElioGetFileType", _wrap_ElioGetFileType, METH_VARARGS, NULL},
	 { (char *)"ElioGetElementArea", _wrap_ElioGetElementArea, METH_VARARGS, NULL},
	 { (char *)"ElioMinMax", _wrap_ElioMinMax, METH_VARARGS, NULL},
	 { (char *)"ElioIntMin", _wrap_ElioIntMin, METH_VARARGS, NULL},
	 { (char *)"ElioIntMax", _wrap_ElioIntMax, METH_VARARGS, NULL},
	 { (char *)"ElioFindIndex", _wrap_ElioFindIndex, METH_VARARGS, NULL},
	 { (char *)"ElioInterpolateArray", _wrap_ElioInterpolateArray, METH_VARARGS, NULL},
	 { (char *)"ElioInterpolate", _wrap_ElioInterpolate, METH_VARARGS, NULL},
	 { (char *)"ElioInterpolateAtIndex", _wrap_ElioInterpolateAtIndex, METH_VARARGS, NULL},
	 { (char *)"ElioGetDay", _wrap_ElioGetDay, METH_VARARGS, NULL},
	 { (char *)"ElioGetYearDay", _wrap_ElioGetYearDay, METH_VARARGS, NULL},
	 { (char *)"ElioSetCorieTime", _wrap_ElioSetCorieTime, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ConstArrayTo_p_Array(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Array *)  ((ConstArray *) x));
}
static void *_p_ScanInternalTo_p_ScanOp(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ScanOp *)  ((ScanInternal *) x));
}
static void *_p_GridFieldTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *) (RankedDataset *) ((GridField *) x));
}
static void *_p_UnitGridFieldTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *) (RankedDataset *)(GridField *) ((UnitGridField *) x));
}
static void *_p_GridTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *)  ((Grid *) x));
}
static void *_p_UnitGridTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *) (Grid *) ((UnitGrid *) x));
}
static void *_p_ConstArrayTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *) (Array *) ((ConstArray *) x));
}
static void *_p_ZeroGridTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *) (Grid *) ((ZeroGrid *) x));
}
static void *_p_RankedDatasetTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *)  ((RankedDataset *) x));
}
static void *_p_ArrayTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *)  ((Array *) x));
}
static void *_p_OneGridTo_p_Object(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Object *) (Grid *) ((OneGrid *) x));
}
static void *_p_BindOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((BindOp *) x));
}
static void *_p_OutputNetCDFOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((OutputNetCDFOp *) x));
}
static void *_p_AccumulateOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((AccumulateOp *) x));
}
static void *_p_ApplyOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((ApplyOp *) x));
}
static void *_p_ProjectOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((ProjectOp *) x));
}
static void *_p_OutputOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((OutputOp *) x));
}
static void *_p_ScanInternalTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (ZeroaryGridFieldOperator *)(ScanOp *) ((ScanInternal *) x));
}
static void *_p_OutputNetCDFDimTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((OutputNetCDFDim *) x));
}
static void *_p_BindConstantOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((BindConstantOp *) x));
}
static void *_p_MergeOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (BinaryGridFieldOperator *) ((MergeOp *) x));
}
static void *_p_AggregateOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (BinaryGridFieldOperator *) ((AggregateOp *) x));
}
static void *_p_SiftOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((SiftOp *) x));
}
static void *_p_DataDumpOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((DataDumpOp *) x));
}
static void *_p_RestrictOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((RestrictOp *) x));
}
static void *_p_CrossOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (BinaryGridFieldOperator *) ((CrossOp *) x));
}
static void *_p_OutputNetCDFVarsTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (UnaryGridFieldOperator *) ((OutputNetCDFVars *) x));
}
static void *_p_UnitGridFieldTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (GridField *) ((UnitGridField *) x));
}
static void *_p_GridFieldTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *)  ((GridField *) x));
}
static void *_p_BinaryGridFieldOperatorTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *)  ((BinaryGridFieldOperator *) x));
}
static void *_p_UnaryGridFieldOperatorTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *)  ((UnaryGridFieldOperator *) x));
}
static void *_p_ZeroaryGridFieldOperatorTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *)  ((ZeroaryGridFieldOperator *) x));
}
static void *_p_ScanOpTo_p_GridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridFieldOperator *) (ZeroaryGridFieldOperator *) ((ScanOp *) x));
}
static void *_p_CrossOpTo_p_BinaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BinaryGridFieldOperator *)  ((CrossOp *) x));
}
static void *_p_AggregateOpTo_p_BinaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BinaryGridFieldOperator *)  ((AggregateOp *) x));
}
static void *_p_MergeOpTo_p_BinaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((BinaryGridFieldOperator *)  ((MergeOp *) x));
}
static void *_p_BindOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((BindOp *) x));
}
static void *_p_ProjectOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((ProjectOp *) x));
}
static void *_p_BindConstantOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((BindConstantOp *) x));
}
static void *_p_SiftOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((SiftOp *) x));
}
static void *_p_AccumulateOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((AccumulateOp *) x));
}
static void *_p_RestrictOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((RestrictOp *) x));
}
static void *_p_ApplyOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((ApplyOp *) x));
}
static void *_p_OutputOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((OutputOp *) x));
}
static void *_p_OutputNetCDFDimTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((OutputNetCDFDim *) x));
}
static void *_p_DataDumpOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((DataDumpOp *) x));
}
static void *_p_OutputNetCDFOpTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((OutputNetCDFOp *) x));
}
static void *_p_OutputNetCDFVarsTo_p_UnaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((UnaryGridFieldOperator *)  ((OutputNetCDFVars *) x));
}
static void *_p_ScanInternalTo_p_ZeroaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ZeroaryGridFieldOperator *) (ScanOp *) ((ScanInternal *) x));
}
static void *_p_ScanOpTo_p_ZeroaryGridFieldOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ZeroaryGridFieldOperator *)  ((ScanOp *) x));
}
static void *_p_CellArrayTo_p_AbstractCellArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractCellArray *)  ((CellArray *) x));
}
static void *_p_Implicit0CellsTo_p_AbstractCellArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AbstractCellArray *)  ((Implicit0Cells *) x));
}
static void *_p_GridFieldTo_p_RankedDataset(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RankedDataset *)  ((GridField *) x));
}
static void *_p_UnitGridFieldTo_p_RankedDataset(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((RankedDataset *) (GridField *) ((UnitGridField *) x));
}
static void *_p_FileArrayReaderTo_p_ArrayReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ArrayReader *)  ((FileArrayReader *) x));
}
static void *_p_ProjectArrayReaderTo_p_ArrayReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ArrayReader *) (FileArrayReader *) ((ProjectArrayReader *) x));
}
static void *_p_TextFileArrayReaderTo_p_ArrayReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ArrayReader *) (FileArrayReader *) ((TextFileArrayReader *) x));
}
static void *_p_ProjectArrayReaderTo_p_FileArrayReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FileArrayReader *)  ((ProjectArrayReader *) x));
}
static void *_p_TextFileArrayReaderTo_p_FileArrayReader(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FileArrayReader *)  ((TextFileArrayReader *) x));
}
static void *_p_UnitGridTo_p_Grid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Grid *)  ((UnitGrid *) x));
}
static void *_p_ZeroGridTo_p_Grid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Grid *)  ((ZeroGrid *) x));
}
static void *_p_OneGridTo_p_Grid(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Grid *)  ((OneGrid *) x));
}
static void *_p_Aggregate__interpolate2DTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::interpolate2D *) x));
}
static void *_p_Aggregate__mkvectorTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::mkvector *) x));
}
static void *_p_Aggregate__CountTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::Count *) x));
}
static void *_p_Aggregate__AnyTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::Any *) x));
}
static void *_p_Aggregate__interpolate1DT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::interpolate1D< float > *) x));
}
static void *_p_Aggregate___averageT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_average< float > *) x));
}
static void *_p_Aggregate___sumT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_sum< float > *) x));
}
static void *_p_Aggregate__triGradientT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::triGradient< float > *) x));
}
static void *_p_Aggregate__gradient3DT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::gradient3D< float > *) x));
}
static void *_p_Aggregate__gradientT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::gradient< float > *) x));
}
static void *_p_Aggregate___minT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_min< float > *) x));
}
static void *_p_Aggregate___maxT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_max< float > *) x));
}
static void *_p_Aggregate__setunionT_float_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::setunion< float > *) x));
}
static void *_p_Aggregate__statisticsTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::statistics *) x));
}
static void *_p_Aggregate__projectTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::project *) x));
}
static void *_p_Aggregate__firstTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::first *) x));
}
static void *_p_Aggregate__triweightsTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::triweights *) x));
}
static void *_p_Aggregate__dotwoTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::dotwo *) x));
}
static void *_p_Aggregate__areaTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::area *) x));
}
static void *_p_Aggregate___averageT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_average< int > *) x));
}
static void *_p_Aggregate__interpolate1DT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::interpolate1D< int > *) x));
}
static void *_p_Aggregate__interpolate3DTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::interpolate3D *) x));
}
static void *_p_Aggregate___sumT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_sum< int > *) x));
}
static void *_p_Aggregate__triGradientT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::triGradient< int > *) x));
}
static void *_p_Aggregate__gradient3DT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::gradient3D< int > *) x));
}
static void *_p_Aggregate__gradientT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::gradient< int > *) x));
}
static void *_p_Aggregate___minT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_min< int > *) x));
}
static void *_p_Aggregate___maxT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::_max< int > *) x));
}
static void *_p_Aggregate__setunionT_int_tTo_p_AggregationFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AggregationFunction *)  ((Aggregate::setunion< int > *) x));
}
static void *_p_Assign__byPointerSetTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::byPointerSet *) x));
}
static void *_p_Assign__unifyTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::unify *) x));
}
static void *_p_Assign__neighborsTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::neighbors *) x));
}
static void *_p_Assign__nearestTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::nearest *) x));
}
static void *_p_Assign__EitherTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::Either *) x));
}
static void *_p_Assign__memberofT_float_tTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::memberof< float > *) x));
}
static void *_p_Assign__sortedmatchTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::sortedmatch *) x));
}
static void *_p_Assign__containedbyTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::containedby *) x));
}
static void *_p_Assign__fastcontainedbyTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *) (Assign::containedby *) ((Assign::fastcontainedby *) x));
}
static void *_p_Assign__identTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::ident *) x));
}
static void *_p_Assign__adjacentTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::adjacent *) x));
}
static void *_p_Assign__pointpoly2To_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::pointpoly2 *) x));
}
static void *_p_Assign__NodesTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::Nodes *) x));
}
static void *_p_Assign__matchTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::match *) x));
}
static void *_p_Assign__pointpolyTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::pointpoly *) x));
}
static void *_p_Assign__IncidentToTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::IncidentTo *) x));
}
static void *_p_Assign__intervalContainsTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::intervalContains *) x));
}
static void *_p_Assign__adjacentNodesTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::adjacentNodes *) x));
}
static void *_p_Assign__containsTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::contains *) x));
}
static void *_p_Assign__inverse_pointerTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::inverse_pointer *) x));
}
static void *_p_Assign__bypointerTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::bypointer *) x));
}
static void *_p_Assign__memberofT_int_tTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::memberof< int > *) x));
}
static void *_p_Assign__BothTo_p_AssignmentFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((AssignmentFunction *)  ((Assign::Both *) x));
}
static void *_p_SpecializedTupleFunctionTo_p_TupleFunction(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TupleFunction *)  ((SpecializedTupleFunction *) x));
}
static void *_p_UnitGridFieldTo_p_GridField(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GridField *)  ((UnitGridField *) x));
}
static void *_p_Assign__fastcontainedbyTo_p_Assign__containedby(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Assign::containedby *)  ((Assign::fastcontainedby *) x));
}
static swig_type_info _swigt__p_AbstractCellArray = {"_p_AbstractCellArray", "AbstractCellArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AccumulateOp = {"_p_AccumulateOp", "AccumulateOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AggregateOp = {"_p_AggregateOp", "AggregateOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__Any = {"_p_Aggregate__Any", "Aggregate::Any *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__Count = {"_p_Aggregate__Count", "Aggregate::Count *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___averageT_float_t = {"_p_Aggregate___averageT_float_t", "Aggregate::_average< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___averageT_int_t = {"_p_Aggregate___averageT_int_t", "Aggregate::_average< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___maxT_float_t = {"_p_Aggregate___maxT_float_t", "Aggregate::_max< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___maxT_int_t = {"_p_Aggregate___maxT_int_t", "Aggregate::_max< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___minT_float_t = {"_p_Aggregate___minT_float_t", "Aggregate::_min< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___minT_int_t = {"_p_Aggregate___minT_int_t", "Aggregate::_min< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___sumT_float_t = {"_p_Aggregate___sumT_float_t", "Aggregate::_sum< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate___sumT_int_t = {"_p_Aggregate___sumT_int_t", "Aggregate::_sum< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__area = {"_p_Aggregate__area", "Aggregate::area *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__dotwo = {"_p_Aggregate__dotwo", "Aggregate::dotwo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__first = {"_p_Aggregate__first", "Aggregate::first *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__gradient3DT_float_t = {"_p_Aggregate__gradient3DT_float_t", "Aggregate::gradient3D< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__gradient3DT_int_t = {"_p_Aggregate__gradient3DT_int_t", "Aggregate::gradient3D< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__gradientT_float_t = {"_p_Aggregate__gradientT_float_t", "Aggregate::gradient< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__gradientT_int_t = {"_p_Aggregate__gradientT_int_t", "Aggregate::gradient< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__interpolate1DT_float_t = {"_p_Aggregate__interpolate1DT_float_t", "Aggregate::interpolate1D< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__interpolate1DT_int_t = {"_p_Aggregate__interpolate1DT_int_t", "Aggregate::interpolate1D< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__interpolate2D = {"_p_Aggregate__interpolate2D", "Aggregate::interpolate2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__interpolate3D = {"_p_Aggregate__interpolate3D", "Aggregate::interpolate3D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__mkvector = {"_p_Aggregate__mkvector", "Aggregate::mkvector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__project = {"_p_Aggregate__project", "Aggregate::project *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__setunionT_float_t = {"_p_Aggregate__setunionT_float_t", "Aggregate::setunion< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__setunionT_int_t = {"_p_Aggregate__setunionT_int_t", "Aggregate::setunion< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__statistics = {"_p_Aggregate__statistics", "Aggregate::statistics *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__triGradientT_float_t = {"_p_Aggregate__triGradientT_float_t", "Aggregate::triGradient< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__triGradientT_int_t = {"_p_Aggregate__triGradientT_int_t", "Aggregate::triGradient< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Aggregate__triweights = {"_p_Aggregate__triweights", "Aggregate::triweights *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AggregationFunction = {"_p_AggregationFunction", "AggregationFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ApplyOp = {"_p_ApplyOp", "ApplyOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Array = {"_p_Array", "Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayReader = {"_p_ArrayReader", "ArrayReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayWriter = {"_p_ArrayWriter", "ArrayWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__Both = {"_p_Assign__Both", "Assign::Both *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__Either = {"_p_Assign__Either", "Assign::Either *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__IncidentTo = {"_p_Assign__IncidentTo", "Assign::IncidentTo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__Nodes = {"_p_Assign__Nodes", "Assign::Nodes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__adjacent = {"_p_Assign__adjacent", "Assign::adjacent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__adjacentNodes = {"_p_Assign__adjacentNodes", "Assign::adjacentNodes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__byPointerSet = {"_p_Assign__byPointerSet", "Assign::byPointerSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__bypointer = {"_p_Assign__bypointer", "Assign::bypointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__containedby = {"_p_Assign__containedby", "Assign::containedby *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__contains = {"_p_Assign__contains", "Assign::contains *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__fastcontainedby = {"_p_Assign__fastcontainedby", "Assign::fastcontainedby *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__ident = {"_p_Assign__ident", "Assign::ident *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__intervalContains = {"_p_Assign__intervalContains", "Assign::intervalContains *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__inverse_pointer = {"_p_Assign__inverse_pointer", "Assign::inverse_pointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__match = {"_p_Assign__match", "Assign::match *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__memberofT_float_t = {"_p_Assign__memberofT_float_t", "Assign::memberof< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__memberofT_int_t = {"_p_Assign__memberofT_int_t", "Assign::memberof< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__nearest = {"_p_Assign__nearest", "Assign::nearest *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__neighbors = {"_p_Assign__neighbors", "Assign::neighbors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__pointpoly = {"_p_Assign__pointpoly", "Assign::pointpoly *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__pointpoly2 = {"_p_Assign__pointpoly2", "Assign::pointpoly2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__sortedmatch = {"_p_Assign__sortedmatch", "Assign::sortedmatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Assign__unify = {"_p_Assign__unify", "Assign::unify *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AssignmentFunction = {"_p_AssignmentFunction", "AssignmentFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BinaryGridFieldOperator = {"_p_BinaryGridFieldOperator", "BinaryGridFieldOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BindConstantOp = {"_p_BindConstantOp", "BindConstantOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BindOp = {"_p_BindOp", "BindOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cell = {"_p_Cell", "Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CellArray = {"_p_CellArray", "CellArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CellHash = {"_p_CellHash", "CellHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstArray = {"_p_ConstArray", "ConstArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CrossNodeMap = {"_p_CrossNodeMap", "CrossNodeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CrossOp = {"_p_CrossOp", "CrossOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataDumpOp = {"_p_DataDumpOp", "DataDumpOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Dataset = {"_p_Dataset", "Dataset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DatumIteratorT_float_t = {"_p_DatumIteratorT_float_t", "DatumIterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DatumIteratorT_int_t = {"_p_DatumIteratorT_int_t", "DatumIterator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElcircFile = {"_p_ElcircFile", "ElcircFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElcircHeader = {"_p_ElcircHeader", "ElcircHeader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElcircTimeStep = {"_p_ElcircTimeStep", "ElcircTimeStep *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElcircTimeStepAtNode = {"_p_ElcircTimeStepAtNode", "ElcircTimeStepAtNode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElioGrid = {"_p_ElioGrid", "ElioGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FieldIterator = {"_p_FieldIterator", "FieldIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FileArrayReader = {"_p_FileArrayReader", "FileArrayReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Grid = {"_p_Grid", "Grid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GridField = {"_p_GridField", "GridField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GridFieldOperator = {"_p_GridFieldOperator", "GridFieldOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Implicit0Cells = {"_p_Implicit0Cells", "Implicit0Cells *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncidenceIndex = {"_p_IncidenceIndex", "IncidenceIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InvertedCellIndex = {"_p_InvertedCellIndex", "InvertedCellIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MergeOp = {"_p_MergeOp", "MergeOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NcFile = {"_p_NcFile", "NcFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NcType = {"_p_NcType", "NcType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NetCDFAdaptor = {"_p_NetCDFAdaptor", "NetCDFAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NormNodeMap = {"_p_NormNodeMap", "NormNodeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Object = {"_p_Object", "Object *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OneGrid = {"_p_OneGrid", "OneGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OrdMap = {"_p_OrdMap", "OrdMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OutputNetCDFDim = {"_p_OutputNetCDFDim", "OutputNetCDFDim *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OutputNetCDFOp = {"_p_OutputNetCDFOp", "OutputNetCDFOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OutputNetCDFVars = {"_p_OutputNetCDFVars", "OutputNetCDFVars *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OutputOp = {"_p_OutputOp", "OutputOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProjectArrayReader = {"_p_ProjectArrayReader", "ProjectArrayReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ProjectOp = {"_p_ProjectOp", "ProjectOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PyStringObject = {"_p_PyStringObject", "PyStringObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RankedDataset = {"_p_RankedDataset", "RankedDataset *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RestrictOp = {"_p_RestrictOp", "RestrictOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScanInternal = {"_p_ScanInternal", "ScanInternal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ScanOp = {"_p_ScanOp", "ScanOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Scheme = {"_p_Scheme", "Scheme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SiftOp = {"_p_SiftOp", "SiftOp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimpleCellHash = {"_p_SimpleCellHash", "SimpleCellHash *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SortedCellIndex = {"_p_SortedCellIndex", "SortedCellIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpecializedTupleFunction = {"_p_SpecializedTupleFunction", "SpecializedTupleFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TextFileArrayReader = {"_p_TextFileArrayReader", "TextFileArrayReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Tuple = {"_p_Tuple", "Tuple *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TupleFunction = {"_p_TupleFunction", "TupleFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnaryGridFieldOperator = {"_p_UnaryGridFieldOperator", "UnaryGridFieldOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnaryNodeMap = {"_p_UnaryNodeMap", "UnaryNodeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnitGrid = {"_p_UnitGrid", "UnitGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_UnitGridField = {"_p_UnitGridField", "UnitGridField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZeroGrid = {"_p_ZeroGrid", "ZeroGrid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZeroaryGridFieldOperator = {"_p_ZeroaryGridFieldOperator", "ZeroaryGridFieldOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_Tag = {"_p_e_Tag", "enum e_Tag *|Tag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_e_Type = {"_p_e_Type", "Type *|enum e_Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_eqCell = {"_p_eqCell", "eqCell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|UnTypedVal *|Dataset::FloatIterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ifstream = {"_p_ifstream", "ifstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Dataset::IntIterator", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_istream = {"_p_istream", "istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ltCell = {"_p_ltCell", "ltCell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nullstream = {"_p_nullstream", "nullstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofstream = {"_p_ofstream", "ofstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_float = {"_p_p_float", "float **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_void = {"_p_p_p_void", "void ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "UnTypedPtr *|void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_setT_unsigned_int_t = {"_p_setT_unsigned_int_t", "set< Node > *|set< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_setT_unsigned_long_t = {"_p_setT_unsigned_long_t", "set< CellId > *|set< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Dim_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *|idx *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "string *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Cell_std__allocatorT_Cell_t_t = {"_p_std__vectorT_Cell_std__allocatorT_Cell_t_t", "std::vector< Cell,std::allocator< Cell > > *|std::vector< Cell > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t = {"_p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t", "std::vector< GridField *,std::allocator< GridField * > > *|std::vector< GridField * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t = {"_p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t", "std::vector< Tuple,std::allocator< Tuple > > *|std::vector< Tuple > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type = {"_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type = {"_p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator = {"_p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator", "std::vector< pair< std::string,Type >,std::allocator< pair< std::string,Type > > >::iterator *|Scheme::FieldIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *|std::vector< idx > *|std::vector< size_t > *|Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector< CellId > *|std::vector< unsigned long,std::allocator< unsigned long > > *|std::vector< unsigned long > *|CellVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|CellId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "UnTypedPtr|void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AbstractCellArray,
  &_swigt__p_AccumulateOp,
  &_swigt__p_AggregateOp,
  &_swigt__p_Aggregate__Any,
  &_swigt__p_Aggregate__Count,
  &_swigt__p_Aggregate___averageT_float_t,
  &_swigt__p_Aggregate___averageT_int_t,
  &_swigt__p_Aggregate___maxT_float_t,
  &_swigt__p_Aggregate___maxT_int_t,
  &_swigt__p_Aggregate___minT_float_t,
  &_swigt__p_Aggregate___minT_int_t,
  &_swigt__p_Aggregate___sumT_float_t,
  &_swigt__p_Aggregate___sumT_int_t,
  &_swigt__p_Aggregate__area,
  &_swigt__p_Aggregate__dotwo,
  &_swigt__p_Aggregate__first,
  &_swigt__p_Aggregate__gradient3DT_float_t,
  &_swigt__p_Aggregate__gradient3DT_int_t,
  &_swigt__p_Aggregate__gradientT_float_t,
  &_swigt__p_Aggregate__gradientT_int_t,
  &_swigt__p_Aggregate__interpolate1DT_float_t,
  &_swigt__p_Aggregate__interpolate1DT_int_t,
  &_swigt__p_Aggregate__interpolate2D,
  &_swigt__p_Aggregate__interpolate3D,
  &_swigt__p_Aggregate__mkvector,
  &_swigt__p_Aggregate__project,
  &_swigt__p_Aggregate__setunionT_float_t,
  &_swigt__p_Aggregate__setunionT_int_t,
  &_swigt__p_Aggregate__statistics,
  &_swigt__p_Aggregate__triGradientT_float_t,
  &_swigt__p_Aggregate__triGradientT_int_t,
  &_swigt__p_Aggregate__triweights,
  &_swigt__p_AggregationFunction,
  &_swigt__p_ApplyOp,
  &_swigt__p_Array,
  &_swigt__p_ArrayReader,
  &_swigt__p_ArrayWriter,
  &_swigt__p_Assign__Both,
  &_swigt__p_Assign__Either,
  &_swigt__p_Assign__IncidentTo,
  &_swigt__p_Assign__Nodes,
  &_swigt__p_Assign__adjacent,
  &_swigt__p_Assign__adjacentNodes,
  &_swigt__p_Assign__byPointerSet,
  &_swigt__p_Assign__bypointer,
  &_swigt__p_Assign__containedby,
  &_swigt__p_Assign__contains,
  &_swigt__p_Assign__fastcontainedby,
  &_swigt__p_Assign__ident,
  &_swigt__p_Assign__intervalContains,
  &_swigt__p_Assign__inverse_pointer,
  &_swigt__p_Assign__match,
  &_swigt__p_Assign__memberofT_float_t,
  &_swigt__p_Assign__memberofT_int_t,
  &_swigt__p_Assign__nearest,
  &_swigt__p_Assign__neighbors,
  &_swigt__p_Assign__pointpoly,
  &_swigt__p_Assign__pointpoly2,
  &_swigt__p_Assign__sortedmatch,
  &_swigt__p_Assign__unify,
  &_swigt__p_AssignmentFunction,
  &_swigt__p_BinaryGridFieldOperator,
  &_swigt__p_BindConstantOp,
  &_swigt__p_BindOp,
  &_swigt__p_Cell,
  &_swigt__p_CellArray,
  &_swigt__p_CellHash,
  &_swigt__p_ConstArray,
  &_swigt__p_CrossNodeMap,
  &_swigt__p_CrossOp,
  &_swigt__p_DataDumpOp,
  &_swigt__p_Dataset,
  &_swigt__p_DatumIteratorT_float_t,
  &_swigt__p_DatumIteratorT_int_t,
  &_swigt__p_ElcircFile,
  &_swigt__p_ElcircHeader,
  &_swigt__p_ElcircTimeStep,
  &_swigt__p_ElcircTimeStepAtNode,
  &_swigt__p_ElioGrid,
  &_swigt__p_FILE,
  &_swigt__p_FieldIterator,
  &_swigt__p_FileArrayReader,
  &_swigt__p_Grid,
  &_swigt__p_GridField,
  &_swigt__p_GridFieldOperator,
  &_swigt__p_Implicit0Cells,
  &_swigt__p_IncidenceIndex,
  &_swigt__p_InvertedCellIndex,
  &_swigt__p_MergeOp,
  &_swigt__p_NcFile,
  &_swigt__p_NcType,
  &_swigt__p_NetCDFAdaptor,
  &_swigt__p_NormNodeMap,
  &_swigt__p_Object,
  &_swigt__p_OneGrid,
  &_swigt__p_OrdMap,
  &_swigt__p_OutputNetCDFDim,
  &_swigt__p_OutputNetCDFOp,
  &_swigt__p_OutputNetCDFVars,
  &_swigt__p_OutputOp,
  &_swigt__p_ProjectArrayReader,
  &_swigt__p_ProjectOp,
  &_swigt__p_PyStringObject,
  &_swigt__p_RankedDataset,
  &_swigt__p_RestrictOp,
  &_swigt__p_ScanInternal,
  &_swigt__p_ScanOp,
  &_swigt__p_Scheme,
  &_swigt__p_SiftOp,
  &_swigt__p_SimpleCellHash,
  &_swigt__p_SortedCellIndex,
  &_swigt__p_SpecializedTupleFunction,
  &_swigt__p_TextFileArrayReader,
  &_swigt__p_Tuple,
  &_swigt__p_TupleFunction,
  &_swigt__p_UnaryGridFieldOperator,
  &_swigt__p_UnaryNodeMap,
  &_swigt__p_UnitGrid,
  &_swigt__p_UnitGridField,
  &_swigt__p_ZeroGrid,
  &_swigt__p_ZeroaryGridFieldOperator,
  &_swigt__p_allocator_type,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_e_Tag,
  &_swigt__p_e_Type,
  &_swigt__p_eqCell,
  &_swigt__p_float,
  &_swigt__p_ifstream,
  &_swigt__p_int,
  &_swigt__p_istream,
  &_swigt__p_ltCell,
  &_swigt__p_nullstream,
  &_swigt__p_ofstream,
  &_swigt__p_ostream,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_float,
  &_swigt__p_p_int,
  &_swigt__p_p_p_void,
  &_swigt__p_p_void,
  &_swigt__p_setT_unsigned_int_t,
  &_swigt__p_setT_unsigned_long_t,
  &_swigt__p_short,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_Cell_std__allocatorT_Cell_t_t,
  &_swigt__p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t,
  &_swigt__p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  &_swigt__p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  &_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_AbstractCellArray[] = {  {&_swigt__p_AbstractCellArray, 0, 0, 0},  {&_swigt__p_CellArray, _p_CellArrayTo_p_AbstractCellArray, 0, 0},  {&_swigt__p_Implicit0Cells, _p_Implicit0CellsTo_p_AbstractCellArray, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AccumulateOp[] = {  {&_swigt__p_AccumulateOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AggregateOp[] = {  {&_swigt__p_AggregateOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__Any[] = {  {&_swigt__p_Aggregate__Any, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__Count[] = {  {&_swigt__p_Aggregate__Count, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___averageT_float_t[] = {  {&_swigt__p_Aggregate___averageT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___averageT_int_t[] = {  {&_swigt__p_Aggregate___averageT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___maxT_float_t[] = {  {&_swigt__p_Aggregate___maxT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___maxT_int_t[] = {  {&_swigt__p_Aggregate___maxT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___minT_float_t[] = {  {&_swigt__p_Aggregate___minT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___minT_int_t[] = {  {&_swigt__p_Aggregate___minT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___sumT_float_t[] = {  {&_swigt__p_Aggregate___sumT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate___sumT_int_t[] = {  {&_swigt__p_Aggregate___sumT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__area[] = {  {&_swigt__p_Aggregate__area, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__dotwo[] = {  {&_swigt__p_Aggregate__dotwo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__first[] = {  {&_swigt__p_Aggregate__first, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__gradient3DT_float_t[] = {  {&_swigt__p_Aggregate__gradient3DT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__gradient3DT_int_t[] = {  {&_swigt__p_Aggregate__gradient3DT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__gradientT_float_t[] = {  {&_swigt__p_Aggregate__gradientT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__gradientT_int_t[] = {  {&_swigt__p_Aggregate__gradientT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__interpolate1DT_float_t[] = {  {&_swigt__p_Aggregate__interpolate1DT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__interpolate1DT_int_t[] = {  {&_swigt__p_Aggregate__interpolate1DT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__interpolate2D[] = {  {&_swigt__p_Aggregate__interpolate2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__interpolate3D[] = {  {&_swigt__p_Aggregate__interpolate3D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__mkvector[] = {  {&_swigt__p_Aggregate__mkvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__project[] = {  {&_swigt__p_Aggregate__project, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__setunionT_float_t[] = {  {&_swigt__p_Aggregate__setunionT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__setunionT_int_t[] = {  {&_swigt__p_Aggregate__setunionT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__statistics[] = {  {&_swigt__p_Aggregate__statistics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__triGradientT_float_t[] = {  {&_swigt__p_Aggregate__triGradientT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__triGradientT_int_t[] = {  {&_swigt__p_Aggregate__triGradientT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Aggregate__triweights[] = {  {&_swigt__p_Aggregate__triweights, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AggregationFunction[] = {  {&_swigt__p_Aggregate__interpolate2D, _p_Aggregate__interpolate2DTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__mkvector, _p_Aggregate__mkvectorTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__Count, _p_Aggregate__CountTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__area, _p_Aggregate__areaTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__statistics, _p_Aggregate__statisticsTo_p_AggregationFunction, 0, 0},  {&_swigt__p_AggregationFunction, 0, 0, 0},  {&_swigt__p_Aggregate__project, _p_Aggregate__projectTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__triweights, _p_Aggregate__triweightsTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__Any, _p_Aggregate__AnyTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__first, _p_Aggregate__firstTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__dotwo, _p_Aggregate__dotwoTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___sumT_int_t, _p_Aggregate___sumT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__interpolate1DT_int_t, _p_Aggregate__interpolate1DT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___averageT_int_t, _p_Aggregate___averageT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__triGradientT_int_t, _p_Aggregate__triGradientT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__gradient3DT_int_t, _p_Aggregate__gradient3DT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__gradientT_int_t, _p_Aggregate__gradientT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___minT_int_t, _p_Aggregate___minT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___maxT_int_t, _p_Aggregate___maxT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__setunionT_int_t, _p_Aggregate__setunionT_int_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__interpolate3D, _p_Aggregate__interpolate3DTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__setunionT_float_t, _p_Aggregate__setunionT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___maxT_float_t, _p_Aggregate___maxT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___minT_float_t, _p_Aggregate___minT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__gradientT_float_t, _p_Aggregate__gradientT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__gradient3DT_float_t, _p_Aggregate__gradient3DT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__triGradientT_float_t, _p_Aggregate__triGradientT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___sumT_float_t, _p_Aggregate___sumT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate___averageT_float_t, _p_Aggregate___averageT_float_tTo_p_AggregationFunction, 0, 0},  {&_swigt__p_Aggregate__interpolate1DT_float_t, _p_Aggregate__interpolate1DT_float_tTo_p_AggregationFunction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ApplyOp[] = {  {&_swigt__p_ApplyOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Array[] = {  {&_swigt__p_ConstArray, _p_ConstArrayTo_p_Array, 0, 0},  {&_swigt__p_Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayReader[] = {  {&_swigt__p_ArrayReader, 0, 0, 0},  {&_swigt__p_FileArrayReader, _p_FileArrayReaderTo_p_ArrayReader, 0, 0},  {&_swigt__p_ProjectArrayReader, _p_ProjectArrayReaderTo_p_ArrayReader, 0, 0},  {&_swigt__p_TextFileArrayReader, _p_TextFileArrayReaderTo_p_ArrayReader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayWriter[] = {  {&_swigt__p_ArrayWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__Both[] = {  {&_swigt__p_Assign__Both, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__Either[] = {  {&_swigt__p_Assign__Either, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__IncidentTo[] = {  {&_swigt__p_Assign__IncidentTo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__Nodes[] = {  {&_swigt__p_Assign__Nodes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__adjacent[] = {  {&_swigt__p_Assign__adjacent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__adjacentNodes[] = {  {&_swigt__p_Assign__adjacentNodes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__byPointerSet[] = {  {&_swigt__p_Assign__byPointerSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__bypointer[] = {  {&_swigt__p_Assign__bypointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__containedby[] = {  {&_swigt__p_Assign__containedby, 0, 0, 0},  {&_swigt__p_Assign__fastcontainedby, _p_Assign__fastcontainedbyTo_p_Assign__containedby, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__contains[] = {  {&_swigt__p_Assign__contains, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__fastcontainedby[] = {  {&_swigt__p_Assign__fastcontainedby, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__ident[] = {  {&_swigt__p_Assign__ident, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__intervalContains[] = {  {&_swigt__p_Assign__intervalContains, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__inverse_pointer[] = {  {&_swigt__p_Assign__inverse_pointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__match[] = {  {&_swigt__p_Assign__match, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__memberofT_float_t[] = {  {&_swigt__p_Assign__memberofT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__memberofT_int_t[] = {  {&_swigt__p_Assign__memberofT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__nearest[] = {  {&_swigt__p_Assign__nearest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__neighbors[] = {  {&_swigt__p_Assign__neighbors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__pointpoly[] = {  {&_swigt__p_Assign__pointpoly, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__pointpoly2[] = {  {&_swigt__p_Assign__pointpoly2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__sortedmatch[] = {  {&_swigt__p_Assign__sortedmatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Assign__unify[] = {  {&_swigt__p_Assign__unify, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AssignmentFunction[] = {  {&_swigt__p_Assign__byPointerSet, _p_Assign__byPointerSetTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__unify, _p_Assign__unifyTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__neighbors, _p_Assign__neighborsTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__nearest, _p_Assign__nearestTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__sortedmatch, _p_Assign__sortedmatchTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__containedby, _p_Assign__containedbyTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__fastcontainedby, _p_Assign__fastcontainedbyTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__adjacent, _p_Assign__adjacentTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__ident, _p_Assign__identTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_AssignmentFunction, 0, 0, 0},  {&_swigt__p_Assign__pointpoly2, _p_Assign__pointpoly2To_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__Nodes, _p_Assign__NodesTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__Both, _p_Assign__BothTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__match, _p_Assign__matchTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__pointpoly, _p_Assign__pointpolyTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__memberofT_int_t, _p_Assign__memberofT_int_tTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__IncidentTo, _p_Assign__IncidentToTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__intervalContains, _p_Assign__intervalContainsTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__adjacentNodes, _p_Assign__adjacentNodesTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__contains, _p_Assign__containsTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__inverse_pointer, _p_Assign__inverse_pointerTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__bypointer, _p_Assign__bypointerTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__Either, _p_Assign__EitherTo_p_AssignmentFunction, 0, 0},  {&_swigt__p_Assign__memberofT_float_t, _p_Assign__memberofT_float_tTo_p_AssignmentFunction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BinaryGridFieldOperator[] = {  {&_swigt__p_CrossOp, _p_CrossOpTo_p_BinaryGridFieldOperator, 0, 0},  {&_swigt__p_AggregateOp, _p_AggregateOpTo_p_BinaryGridFieldOperator, 0, 0},  {&_swigt__p_MergeOp, _p_MergeOpTo_p_BinaryGridFieldOperator, 0, 0},  {&_swigt__p_BinaryGridFieldOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BindConstantOp[] = {  {&_swigt__p_BindConstantOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BindOp[] = {  {&_swigt__p_BindOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cell[] = {  {&_swigt__p_Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CellArray[] = {  {&_swigt__p_CellArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CellHash[] = {  {&_swigt__p_CellHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstArray[] = {  {&_swigt__p_ConstArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CrossNodeMap[] = {  {&_swigt__p_CrossNodeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CrossOp[] = {  {&_swigt__p_CrossOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataDumpOp[] = {  {&_swigt__p_DataDumpOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Dataset[] = {  {&_swigt__p_Dataset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DatumIteratorT_float_t[] = {  {&_swigt__p_DatumIteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DatumIteratorT_int_t[] = {  {&_swigt__p_DatumIteratorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElcircFile[] = {  {&_swigt__p_ElcircFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElcircHeader[] = {  {&_swigt__p_ElcircHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElcircTimeStep[] = {  {&_swigt__p_ElcircTimeStep, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElcircTimeStepAtNode[] = {  {&_swigt__p_ElcircTimeStepAtNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElioGrid[] = {  {&_swigt__p_ElioGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FieldIterator[] = {  {&_swigt__p_FieldIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FileArrayReader[] = {  {&_swigt__p_FileArrayReader, 0, 0, 0},  {&_swigt__p_ProjectArrayReader, _p_ProjectArrayReaderTo_p_FileArrayReader, 0, 0},  {&_swigt__p_TextFileArrayReader, _p_TextFileArrayReaderTo_p_FileArrayReader, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Grid[] = {  {&_swigt__p_UnitGrid, _p_UnitGridTo_p_Grid, 0, 0},  {&_swigt__p_ZeroGrid, _p_ZeroGridTo_p_Grid, 0, 0},  {&_swigt__p_OneGrid, _p_OneGridTo_p_Grid, 0, 0},  {&_swigt__p_Grid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GridField[] = {  {&_swigt__p_GridField, 0, 0, 0},  {&_swigt__p_UnitGridField, _p_UnitGridFieldTo_p_GridField, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GridFieldOperator[] = {  {&_swigt__p_OutputNetCDFOp, _p_OutputNetCDFOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_AccumulateOp, _p_AccumulateOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_ApplyOp, _p_ApplyOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_ProjectOp, _p_ProjectOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_OutputOp, _p_OutputOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_ScanInternal, _p_ScanInternalTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_SiftOp, _p_SiftOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_OutputNetCDFDim, _p_OutputNetCDFDimTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_MergeOp, _p_MergeOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_BindConstantOp, _p_BindConstantOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_AggregateOp, _p_AggregateOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_DataDumpOp, _p_DataDumpOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_RestrictOp, _p_RestrictOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_ScanOp, _p_ScanOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_CrossOp, _p_CrossOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_OutputNetCDFVars, _p_OutputNetCDFVarsTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_BindOp, _p_BindOpTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_UnitGridField, _p_UnitGridFieldTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_GridField, _p_GridFieldTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_GridFieldOperator, 0, 0, 0},  {&_swigt__p_BinaryGridFieldOperator, _p_BinaryGridFieldOperatorTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_UnaryGridFieldOperator, _p_UnaryGridFieldOperatorTo_p_GridFieldOperator, 0, 0},  {&_swigt__p_ZeroaryGridFieldOperator, _p_ZeroaryGridFieldOperatorTo_p_GridFieldOperator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Implicit0Cells[] = {  {&_swigt__p_Implicit0Cells, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncidenceIndex[] = {  {&_swigt__p_IncidenceIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InvertedCellIndex[] = {  {&_swigt__p_InvertedCellIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MergeOp[] = {  {&_swigt__p_MergeOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NcFile[] = {  {&_swigt__p_NcFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NcType[] = {  {&_swigt__p_NcType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NetCDFAdaptor[] = {  {&_swigt__p_NetCDFAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NormNodeMap[] = {  {&_swigt__p_NormNodeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Object[] = {  {&_swigt__p_GridField, _p_GridFieldTo_p_Object, 0, 0},  {&_swigt__p_UnitGridField, _p_UnitGridFieldTo_p_Object, 0, 0},  {&_swigt__p_UnitGrid, _p_UnitGridTo_p_Object, 0, 0},  {&_swigt__p_ConstArray, _p_ConstArrayTo_p_Object, 0, 0},  {&_swigt__p_Object, 0, 0, 0},  {&_swigt__p_ZeroGrid, _p_ZeroGridTo_p_Object, 0, 0},  {&_swigt__p_Array, _p_ArrayTo_p_Object, 0, 0},  {&_swigt__p_RankedDataset, _p_RankedDatasetTo_p_Object, 0, 0},  {&_swigt__p_OneGrid, _p_OneGridTo_p_Object, 0, 0},  {&_swigt__p_Grid, _p_GridTo_p_Object, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OneGrid[] = {  {&_swigt__p_OneGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OrdMap[] = {  {&_swigt__p_OrdMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OutputNetCDFDim[] = {  {&_swigt__p_OutputNetCDFDim, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OutputNetCDFOp[] = {  {&_swigt__p_OutputNetCDFOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OutputNetCDFVars[] = {  {&_swigt__p_OutputNetCDFVars, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OutputOp[] = {  {&_swigt__p_OutputOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProjectArrayReader[] = {  {&_swigt__p_ProjectArrayReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ProjectOp[] = {  {&_swigt__p_ProjectOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PyStringObject[] = {  {&_swigt__p_PyStringObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RankedDataset[] = {  {&_swigt__p_GridField, _p_GridFieldTo_p_RankedDataset, 0, 0},  {&_swigt__p_UnitGridField, _p_UnitGridFieldTo_p_RankedDataset, 0, 0},  {&_swigt__p_RankedDataset, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RestrictOp[] = {  {&_swigt__p_RestrictOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScanInternal[] = {  {&_swigt__p_ScanInternal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ScanOp[] = {  {&_swigt__p_ScanInternal, _p_ScanInternalTo_p_ScanOp, 0, 0},  {&_swigt__p_ScanOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Scheme[] = {  {&_swigt__p_Scheme, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SiftOp[] = {  {&_swigt__p_SiftOp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimpleCellHash[] = {  {&_swigt__p_SimpleCellHash, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SortedCellIndex[] = {  {&_swigt__p_SortedCellIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpecializedTupleFunction[] = {  {&_swigt__p_SpecializedTupleFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextFileArrayReader[] = {  {&_swigt__p_TextFileArrayReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Tuple[] = {  {&_swigt__p_Tuple, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TupleFunction[] = {  {&_swigt__p_TupleFunction, 0, 0, 0},  {&_swigt__p_SpecializedTupleFunction, _p_SpecializedTupleFunctionTo_p_TupleFunction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnaryGridFieldOperator[] = {  {&_swigt__p_ProjectOp, _p_ProjectOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_BindOp, _p_BindOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_BindConstantOp, _p_BindConstantOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_UnaryGridFieldOperator, 0, 0, 0},  {&_swigt__p_SiftOp, _p_SiftOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_AccumulateOp, _p_AccumulateOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_RestrictOp, _p_RestrictOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_ApplyOp, _p_ApplyOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_OutputOp, _p_OutputOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_OutputNetCDFDim, _p_OutputNetCDFDimTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_DataDumpOp, _p_DataDumpOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_OutputNetCDFOp, _p_OutputNetCDFOpTo_p_UnaryGridFieldOperator, 0, 0},  {&_swigt__p_OutputNetCDFVars, _p_OutputNetCDFVarsTo_p_UnaryGridFieldOperator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnaryNodeMap[] = {  {&_swigt__p_UnaryNodeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitGrid[] = {  {&_swigt__p_UnitGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UnitGridField[] = {  {&_swigt__p_UnitGridField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZeroGrid[] = {  {&_swigt__p_ZeroGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZeroaryGridFieldOperator[] = {  {&_swigt__p_ScanInternal, _p_ScanInternalTo_p_ZeroaryGridFieldOperator, 0, 0},  {&_swigt__p_ZeroaryGridFieldOperator, 0, 0, 0},  {&_swigt__p_ScanOp, _p_ScanOpTo_p_ZeroaryGridFieldOperator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_Tag[] = {  {&_swigt__p_e_Tag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_e_Type[] = {  {&_swigt__p_e_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eqCell[] = {  {&_swigt__p_eqCell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ifstream[] = {  {&_swigt__p_ifstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_istream[] = {  {&_swigt__p_istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ltCell[] = {  {&_swigt__p_ltCell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nullstream[] = {  {&_swigt__p_nullstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofstream[] = {  {&_swigt__p_ofstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_float[] = {  {&_swigt__p_p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_void[] = {  {&_swigt__p_p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_setT_unsigned_int_t[] = {  {&_swigt__p_setT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_setT_unsigned_long_t[] = {  {&_swigt__p_setT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Cell_std__allocatorT_Cell_t_t[] = {  {&_swigt__p_std__vectorT_Cell_std__allocatorT_Cell_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t[] = {  {&_swigt__p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t[] = {  {&_swigt__p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator[] = {  {&_swigt__p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AbstractCellArray,
  _swigc__p_AccumulateOp,
  _swigc__p_AggregateOp,
  _swigc__p_Aggregate__Any,
  _swigc__p_Aggregate__Count,
  _swigc__p_Aggregate___averageT_float_t,
  _swigc__p_Aggregate___averageT_int_t,
  _swigc__p_Aggregate___maxT_float_t,
  _swigc__p_Aggregate___maxT_int_t,
  _swigc__p_Aggregate___minT_float_t,
  _swigc__p_Aggregate___minT_int_t,
  _swigc__p_Aggregate___sumT_float_t,
  _swigc__p_Aggregate___sumT_int_t,
  _swigc__p_Aggregate__area,
  _swigc__p_Aggregate__dotwo,
  _swigc__p_Aggregate__first,
  _swigc__p_Aggregate__gradient3DT_float_t,
  _swigc__p_Aggregate__gradient3DT_int_t,
  _swigc__p_Aggregate__gradientT_float_t,
  _swigc__p_Aggregate__gradientT_int_t,
  _swigc__p_Aggregate__interpolate1DT_float_t,
  _swigc__p_Aggregate__interpolate1DT_int_t,
  _swigc__p_Aggregate__interpolate2D,
  _swigc__p_Aggregate__interpolate3D,
  _swigc__p_Aggregate__mkvector,
  _swigc__p_Aggregate__project,
  _swigc__p_Aggregate__setunionT_float_t,
  _swigc__p_Aggregate__setunionT_int_t,
  _swigc__p_Aggregate__statistics,
  _swigc__p_Aggregate__triGradientT_float_t,
  _swigc__p_Aggregate__triGradientT_int_t,
  _swigc__p_Aggregate__triweights,
  _swigc__p_AggregationFunction,
  _swigc__p_ApplyOp,
  _swigc__p_Array,
  _swigc__p_ArrayReader,
  _swigc__p_ArrayWriter,
  _swigc__p_Assign__Both,
  _swigc__p_Assign__Either,
  _swigc__p_Assign__IncidentTo,
  _swigc__p_Assign__Nodes,
  _swigc__p_Assign__adjacent,
  _swigc__p_Assign__adjacentNodes,
  _swigc__p_Assign__byPointerSet,
  _swigc__p_Assign__bypointer,
  _swigc__p_Assign__containedby,
  _swigc__p_Assign__contains,
  _swigc__p_Assign__fastcontainedby,
  _swigc__p_Assign__ident,
  _swigc__p_Assign__intervalContains,
  _swigc__p_Assign__inverse_pointer,
  _swigc__p_Assign__match,
  _swigc__p_Assign__memberofT_float_t,
  _swigc__p_Assign__memberofT_int_t,
  _swigc__p_Assign__nearest,
  _swigc__p_Assign__neighbors,
  _swigc__p_Assign__pointpoly,
  _swigc__p_Assign__pointpoly2,
  _swigc__p_Assign__sortedmatch,
  _swigc__p_Assign__unify,
  _swigc__p_AssignmentFunction,
  _swigc__p_BinaryGridFieldOperator,
  _swigc__p_BindConstantOp,
  _swigc__p_BindOp,
  _swigc__p_Cell,
  _swigc__p_CellArray,
  _swigc__p_CellHash,
  _swigc__p_ConstArray,
  _swigc__p_CrossNodeMap,
  _swigc__p_CrossOp,
  _swigc__p_DataDumpOp,
  _swigc__p_Dataset,
  _swigc__p_DatumIteratorT_float_t,
  _swigc__p_DatumIteratorT_int_t,
  _swigc__p_ElcircFile,
  _swigc__p_ElcircHeader,
  _swigc__p_ElcircTimeStep,
  _swigc__p_ElcircTimeStepAtNode,
  _swigc__p_ElioGrid,
  _swigc__p_FILE,
  _swigc__p_FieldIterator,
  _swigc__p_FileArrayReader,
  _swigc__p_Grid,
  _swigc__p_GridField,
  _swigc__p_GridFieldOperator,
  _swigc__p_Implicit0Cells,
  _swigc__p_IncidenceIndex,
  _swigc__p_InvertedCellIndex,
  _swigc__p_MergeOp,
  _swigc__p_NcFile,
  _swigc__p_NcType,
  _swigc__p_NetCDFAdaptor,
  _swigc__p_NormNodeMap,
  _swigc__p_Object,
  _swigc__p_OneGrid,
  _swigc__p_OrdMap,
  _swigc__p_OutputNetCDFDim,
  _swigc__p_OutputNetCDFOp,
  _swigc__p_OutputNetCDFVars,
  _swigc__p_OutputOp,
  _swigc__p_ProjectArrayReader,
  _swigc__p_ProjectOp,
  _swigc__p_PyStringObject,
  _swigc__p_RankedDataset,
  _swigc__p_RestrictOp,
  _swigc__p_ScanInternal,
  _swigc__p_ScanOp,
  _swigc__p_Scheme,
  _swigc__p_SiftOp,
  _swigc__p_SimpleCellHash,
  _swigc__p_SortedCellIndex,
  _swigc__p_SpecializedTupleFunction,
  _swigc__p_TextFileArrayReader,
  _swigc__p_Tuple,
  _swigc__p_TupleFunction,
  _swigc__p_UnaryGridFieldOperator,
  _swigc__p_UnaryNodeMap,
  _swigc__p_UnitGrid,
  _swigc__p_UnitGridField,
  _swigc__p_ZeroGrid,
  _swigc__p_ZeroaryGridFieldOperator,
  _swigc__p_allocator_type,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_e_Tag,
  _swigc__p_e_Type,
  _swigc__p_eqCell,
  _swigc__p_float,
  _swigc__p_ifstream,
  _swigc__p_int,
  _swigc__p_istream,
  _swigc__p_ltCell,
  _swigc__p_nullstream,
  _swigc__p_ofstream,
  _swigc__p_ostream,
  _swigc__p_p_PyObject,
  _swigc__p_p_float,
  _swigc__p_p_int,
  _swigc__p_p_p_void,
  _swigc__p_p_void,
  _swigc__p_setT_unsigned_int_t,
  _swigc__p_setT_unsigned_long_t,
  _swigc__p_short,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_Cell_std__allocatorT_Cell_t_t,
  _swigc__p_std__vectorT_GridField_p_std__allocatorT_GridField_p_t_t,
  _swigc__p_std__vectorT_Tuple_std__allocatorT_Tuple_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t__allocator_type,
  _swigc__p_std__vectorT_pairT_std__string_Type_t_std__allocatorT_pairT_std__string_Type_t_t_t__iterator,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  SWIG_Python_SetConstant(d, "BLOCKSIZ",SWIG_From_int(static_cast< int >(100)));
  SWIG_Python_SetConstant(d, "DIGITS",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "TOLERANCE",SWIG_From_double(static_cast< double >(1e-5)));
  SWIG_Python_SetConstant(d, "NULL_VALUE",SWIG_From_int(static_cast< int >(-999)));
  SWIG_Python_SetConstant(d, "VAR",SWIG_From_int(static_cast< int >(VAR)));
  SWIG_Python_SetConstant(d, "VAL",SWIG_From_int(static_cast< int >(VAL)));
  SWIG_Python_SetConstant(d, "INT",SWIG_From_int(static_cast< int >(INT)));
  SWIG_Python_SetConstant(d, "FLOAT",SWIG_From_int(static_cast< int >(FLOAT)));
  SWIG_Python_SetConstant(d, "OBJ",SWIG_From_int(static_cast< int >(OBJ)));
  SWIG_Python_SetConstant(d, "TUPLE",SWIG_From_int(static_cast< int >(TUPLE)));
  SWIG_Python_SetConstant(d, "GRIDFIELD",SWIG_From_int(static_cast< int >(GRIDFIELD)));
  SWIG_Python_SetConstant(d, "ELIO_OK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "ELIO_ERR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ELIO_FOPEN_ERR",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "ELIO_FSEEK_ERR",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "ELIO_FREAD_ERR",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "ELIO_FWRITE_ERR",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "ELIO_FCLOSE_ERR",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "ELIO_FTELL_ERR",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "COMPRESS_NONE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "COMPRESS_C16",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "ZLEVEL",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "SIGMA_S0",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "SIGMA_S1",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "SIGMA_S2",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "SIGMA_S3",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "SIGMA_S4",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "MISSING_DATA",SWIG_From_int(static_cast< int >(-32767)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

