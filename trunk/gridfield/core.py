# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _core
import new
new_instancemethod = new.instancemethod
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class PySwigIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return apply(_core.PySwigIterator_value, args)
    def incr(*args): return apply(_core.PySwigIterator_incr, args)
    def decr(*args): return apply(_core.PySwigIterator_decr, args)
    def distance(*args): return apply(_core.PySwigIterator_distance, args)
    def equal(*args): return apply(_core.PySwigIterator_equal, args)
    def copy(*args): return apply(_core.PySwigIterator_copy, args)
    def next(*args): return apply(_core.PySwigIterator_next, args)
    def previous(*args): return apply(_core.PySwigIterator_previous, args)
    def advance(*args): return apply(_core.PySwigIterator_advance, args)
    def __eq__(*args): return apply(_core.PySwigIterator___eq__, args)
    def __ne__(*args): return apply(_core.PySwigIterator___ne__, args)
    def __iadd__(*args): return apply(_core.PySwigIterator___iadd__, args)
    def __isub__(*args): return apply(_core.PySwigIterator___isub__, args)
    def __add__(*args): return apply(_core.PySwigIterator___add__, args)
    def __sub__(*args): return apply(_core.PySwigIterator___sub__, args)
    def __iter__(self): return self
PySwigIterator_swigregister = _core.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class vectori:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_core.vectori_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_core.vectori___nonzero__, args)
    def __len__(*args): return apply(_core.vectori___len__, args)
    def pop(*args): return apply(_core.vectori_pop, args)
    def __getslice__(*args): return apply(_core.vectori___getslice__, args)
    def __setslice__(*args): return apply(_core.vectori___setslice__, args)
    def __delslice__(*args): return apply(_core.vectori___delslice__, args)
    def __delitem__(*args): return apply(_core.vectori___delitem__, args)
    def __getitem__(*args): return apply(_core.vectori___getitem__, args)
    def __setitem__(*args): return apply(_core.vectori___setitem__, args)
    def append(*args): return apply(_core.vectori_append, args)
    def empty(*args): return apply(_core.vectori_empty, args)
    def size(*args): return apply(_core.vectori_size, args)
    def clear(*args): return apply(_core.vectori_clear, args)
    def swap(*args): return apply(_core.vectori_swap, args)
    def get_allocator(*args): return apply(_core.vectori_get_allocator, args)
    def begin(*args): return apply(_core.vectori_begin, args)
    def end(*args): return apply(_core.vectori_end, args)
    def rbegin(*args): return apply(_core.vectori_rbegin, args)
    def rend(*args): return apply(_core.vectori_rend, args)
    def pop_back(*args): return apply(_core.vectori_pop_back, args)
    def erase(*args): return apply(_core.vectori_erase, args)
    def __init__(self, *args): 
        this = apply(_core.new_vectori, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_core.vectori_push_back, args)
    def front(*args): return apply(_core.vectori_front, args)
    def back(*args): return apply(_core.vectori_back, args)
    def assign(*args): return apply(_core.vectori_assign, args)
    def resize(*args): return apply(_core.vectori_resize, args)
    def insert(*args): return apply(_core.vectori_insert, args)
    def reserve(*args): return apply(_core.vectori_reserve, args)
    def capacity(*args): return apply(_core.vectori_capacity, args)
    __swig_destroy__ = _core.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _core.vectori_swigregister
vectori_swigregister(vectori)

class vectord:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_core.vectord_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_core.vectord___nonzero__, args)
    def __len__(*args): return apply(_core.vectord___len__, args)
    def pop(*args): return apply(_core.vectord_pop, args)
    def __getslice__(*args): return apply(_core.vectord___getslice__, args)
    def __setslice__(*args): return apply(_core.vectord___setslice__, args)
    def __delslice__(*args): return apply(_core.vectord___delslice__, args)
    def __delitem__(*args): return apply(_core.vectord___delitem__, args)
    def __getitem__(*args): return apply(_core.vectord___getitem__, args)
    def __setitem__(*args): return apply(_core.vectord___setitem__, args)
    def append(*args): return apply(_core.vectord_append, args)
    def empty(*args): return apply(_core.vectord_empty, args)
    def size(*args): return apply(_core.vectord_size, args)
    def clear(*args): return apply(_core.vectord_clear, args)
    def swap(*args): return apply(_core.vectord_swap, args)
    def get_allocator(*args): return apply(_core.vectord_get_allocator, args)
    def begin(*args): return apply(_core.vectord_begin, args)
    def end(*args): return apply(_core.vectord_end, args)
    def rbegin(*args): return apply(_core.vectord_rbegin, args)
    def rend(*args): return apply(_core.vectord_rend, args)
    def pop_back(*args): return apply(_core.vectord_pop_back, args)
    def erase(*args): return apply(_core.vectord_erase, args)
    def __init__(self, *args): 
        this = apply(_core.new_vectord, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_core.vectord_push_back, args)
    def front(*args): return apply(_core.vectord_front, args)
    def back(*args): return apply(_core.vectord_back, args)
    def assign(*args): return apply(_core.vectord_assign, args)
    def resize(*args): return apply(_core.vectord_resize, args)
    def insert(*args): return apply(_core.vectord_insert, args)
    def reserve(*args): return apply(_core.vectord_reserve, args)
    def capacity(*args): return apply(_core.vectord_capacity, args)
    __swig_destroy__ = _core.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _core.vectord_swigregister
vectord_swigregister(vectord)

class vectorS:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorS, name)
    __repr__ = _swig_repr
    def iterator(*args): return apply(_core.vectorS_iterator, args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return apply(_core.vectorS___nonzero__, args)
    def __len__(*args): return apply(_core.vectorS___len__, args)
    def pop(*args): return apply(_core.vectorS_pop, args)
    def __getslice__(*args): return apply(_core.vectorS___getslice__, args)
    def __setslice__(*args): return apply(_core.vectorS___setslice__, args)
    def __delslice__(*args): return apply(_core.vectorS___delslice__, args)
    def __delitem__(*args): return apply(_core.vectorS___delitem__, args)
    def __getitem__(*args): return apply(_core.vectorS___getitem__, args)
    def __setitem__(*args): return apply(_core.vectorS___setitem__, args)
    def append(*args): return apply(_core.vectorS_append, args)
    def empty(*args): return apply(_core.vectorS_empty, args)
    def size(*args): return apply(_core.vectorS_size, args)
    def clear(*args): return apply(_core.vectorS_clear, args)
    def swap(*args): return apply(_core.vectorS_swap, args)
    def get_allocator(*args): return apply(_core.vectorS_get_allocator, args)
    def begin(*args): return apply(_core.vectorS_begin, args)
    def end(*args): return apply(_core.vectorS_end, args)
    def rbegin(*args): return apply(_core.vectorS_rbegin, args)
    def rend(*args): return apply(_core.vectorS_rend, args)
    def pop_back(*args): return apply(_core.vectorS_pop_back, args)
    def erase(*args): return apply(_core.vectorS_erase, args)
    def __init__(self, *args): 
        this = apply(_core.new_vectorS, args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return apply(_core.vectorS_push_back, args)
    def front(*args): return apply(_core.vectorS_front, args)
    def back(*args): return apply(_core.vectorS_back, args)
    def assign(*args): return apply(_core.vectorS_assign, args)
    def resize(*args): return apply(_core.vectorS_resize, args)
    def insert(*args): return apply(_core.vectorS_insert, args)
    def reserve(*args): return apply(_core.vectorS_reserve, args)
    def capacity(*args): return apply(_core.vectorS_capacity, args)
    __swig_destroy__ = _core.delete_vectorS
    __del__ = lambda self : None;
vectorS_swigregister = _core.vectorS_swigregister
vectorS_swigregister(vectorS)

derefFloat = _core.derefFloat
derefInt = _core.derefInt
derefPyObject = _core.derefPyObject
derefPyString = _core.derefPyString
derefString = _core.derefString
asPyObject = _core.asPyObject
asPyString = _core.asPyString
asUnTypedPtr = _core.asUnTypedPtr
print_array = _core.print_array
testsign = _core.testsign
class Object:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Object, args)
        try: self.this.append(this)
        except: self.this = this
    def ref(*args): return apply(_core.Object_ref, args)
    def norefs(*args): return apply(_core.Object_norefs, args)
    def unref(*args): return apply(_core.Object_unref, args)
    __swig_setmethods__["refcount"] = _core.Object_refcount_set
    __swig_getmethods__["refcount"] = _core.Object_refcount_get
    __swig_destroy__ = _core.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _core.Object_swigregister
Object_swigregister(Object)

class GridFieldOperator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridFieldOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridFieldOperator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_GridFieldOperator
    __del__ = lambda self : None;
    def getResult(*args): return apply(_core.GridFieldOperator_getResult, args)
    def Execute(*args): return apply(_core.GridFieldOperator_Execute, args)
    def Update(*args): return apply(_core.GridFieldOperator_Update, args)
    def clearResult(*args): return apply(_core.GridFieldOperator_clearResult, args)
    def Updated(*args): return apply(_core.GridFieldOperator_Updated, args)
    def getModTime(*args): return apply(_core.GridFieldOperator_getModTime, args)
GridFieldOperator_swigregister = _core.GridFieldOperator_swigregister
GridFieldOperator_swigregister(GridFieldOperator)

class ZeroaryGridFieldOperator(GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroaryGridFieldOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroaryGridFieldOperator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Updated(*args): return apply(_core.ZeroaryGridFieldOperator_Updated, args)
    __swig_destroy__ = _core.delete_ZeroaryGridFieldOperator
    __del__ = lambda self : None;
ZeroaryGridFieldOperator_swigregister = _core.ZeroaryGridFieldOperator_swigregister
ZeroaryGridFieldOperator_swigregister(ZeroaryGridFieldOperator)

class UnaryGridFieldOperator(GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryGridFieldOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryGridFieldOperator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Updated(*args): return apply(_core.UnaryGridFieldOperator_Updated, args)
    def GetPrevious(*args): return apply(_core.UnaryGridFieldOperator_GetPrevious, args)
    def SetPrevious(*args): return apply(_core.UnaryGridFieldOperator_SetPrevious, args)
    __swig_destroy__ = _core.delete_UnaryGridFieldOperator
    __del__ = lambda self : None;
UnaryGridFieldOperator_swigregister = _core.UnaryGridFieldOperator_swigregister
UnaryGridFieldOperator_swigregister(UnaryGridFieldOperator)

class BinaryGridFieldOperator(GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryGridFieldOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryGridFieldOperator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Updated(*args): return apply(_core.BinaryGridFieldOperator_Updated, args)
    def GetLeft(*args): return apply(_core.BinaryGridFieldOperator_GetLeft, args)
    def SetLeft(*args): return apply(_core.BinaryGridFieldOperator_SetLeft, args)
    def GetRight(*args): return apply(_core.BinaryGridFieldOperator_GetRight, args)
    def SetRight(*args): return apply(_core.BinaryGridFieldOperator_SetRight, args)
    __swig_destroy__ = _core.delete_BinaryGridFieldOperator
    __del__ = lambda self : None;
BinaryGridFieldOperator_swigregister = _core.BinaryGridFieldOperator_swigregister
BinaryGridFieldOperator_swigregister(BinaryGridFieldOperator)

class RankedDataset(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RankedDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RankedDataset, name)
    __repr__ = _swig_repr
    def SetShape(*args): return apply(_core.RankedDataset_SetShape, args)
    def __init__(self, *args): 
        this = apply(_core.new_RankedDataset, args)
        try: self.this.append(this)
        except: self.this = this
    def Dim(*args): return apply(_core.RankedDataset_Dim, args)
    def GetVoidPointer(*args): return apply(_core.RankedDataset_GetVoidPointer, args)
    def BeginInt(*args): return apply(_core.RankedDataset_BeginInt, args)
    def EndInt(*args): return apply(_core.RankedDataset_EndInt, args)
    def BeginFloat(*args): return apply(_core.RankedDataset_BeginFloat, args)
    def EndFloat(*args): return apply(_core.RankedDataset_EndFloat, args)
    def Clear(*args): return apply(_core.RankedDataset_Clear, args)
    def CoerceScheme(*args): return apply(_core.RankedDataset_CoerceScheme, args)
    def AddAttribute(*args): return apply(_core.RankedDataset_AddAttribute, args)
    def Bind(*args): return apply(_core.RankedDataset_Bind, args)
    def unBind(*args): return apply(_core.RankedDataset_unBind, args)
    def unref(*args): return apply(_core.RankedDataset_unref, args)
    def GetScheme(*args): return apply(_core.RankedDataset_GetScheme, args)
    def IsAttribute(*args): return apply(_core.RankedDataset_IsAttribute, args)
    def GetAttribute(*args): return apply(_core.RankedDataset_GetAttribute, args)
    def RemoveAttribute(*args): return apply(_core.RankedDataset_RemoveAttribute, args)
    def GetAttributeValue(*args): return apply(_core.RankedDataset_GetAttributeValue, args)
    def GetFloatAttributeValue(*args): return apply(_core.RankedDataset_GetFloatAttributeValue, args)
    def GetIntAttributeValue(*args): return apply(_core.RankedDataset_GetIntAttributeValue, args)
    def Arity(*args): return apply(_core.RankedDataset_Arity, args)
    def Size(*args): return apply(_core.RankedDataset_Size, args)
    def MaxRank(*args): return apply(_core.RankedDataset_MaxRank, args)
    def Apply(*args): return apply(_core.RankedDataset_Apply, args)
    def GetDataset(*args): return apply(_core.RankedDataset_GetDataset, args)
    def Zip(*args): return apply(_core.RankedDataset_Zip, args)
    def PrintTo(*args): return apply(_core.RankedDataset_PrintTo, args)
    __swig_destroy__ = _core.delete_RankedDataset
    __del__ = lambda self : None;
RankedDataset_swigregister = _core.RankedDataset_swigregister
RankedDataset_swigregister(RankedDataset)

class Dataset:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Dataset, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Dataset
    __del__ = lambda self : None;
    def AddAttribute(*args): return apply(_core.Dataset_AddAttribute, args)
    def RemoveAttribute(*args): return apply(_core.Dataset_RemoveAttribute, args)
    def Zip(*args): return apply(_core.Dataset_Zip, args)
    def Clear(*args): return apply(_core.Dataset_Clear, args)
    def CoerceScheme(*args): return apply(_core.Dataset_CoerceScheme, args)
    def Apply(*args): return apply(_core.Dataset_Apply, args)
    def recordOrdinals(*args): return apply(_core.Dataset_recordOrdinals, args)
    def FilterBy(*args): return apply(_core.Dataset_FilterBy, args)
    def BeginInt(*args): return apply(_core.Dataset_BeginInt, args)
    def EndInt(*args): return apply(_core.Dataset_EndInt, args)
    def BeginFloat(*args): return apply(_core.Dataset_BeginFloat, args)
    def EndFloat(*args): return apply(_core.Dataset_EndFloat, args)
    def IsEmpty(*args): return apply(_core.Dataset_IsEmpty, args)
    def IsAttribute(*args): return apply(_core.Dataset_IsAttribute, args)
    def GetAttribute(*args): return apply(_core.Dataset_GetAttribute, args)
    def GetVoidPointer(*args): return apply(_core.Dataset_GetVoidPointer, args)
    def GetAttributeVal(*args): return apply(_core.Dataset_GetAttributeVal, args)
    def FastBindTuple(*args): return apply(_core.Dataset_FastBindTuple, args)
    def BindTuple(*args): return apply(_core.Dataset_BindTuple, args)
    def Size(*args): return apply(_core.Dataset_Size, args)
    def Arity(*args): return apply(_core.Dataset_Arity, args)
    def GetScheme(*args): return apply(_core.Dataset_GetScheme, args)
    def PrintTo(*args): return apply(_core.Dataset_PrintTo, args)
    def show(*args): return apply(_core.Dataset_show, args)
    def nearest(*args): return apply(_core.Dataset_nearest, args)
    def lookupFloat(*args): return apply(_core.Dataset_lookupFloat, args)
    def lookupInt(*args): return apply(_core.Dataset_lookupInt, args)
Dataset_swigregister = _core.Dataset_swigregister
Dataset_swigregister(Dataset)

class GridField(RankedDataset,GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [RankedDataset,GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridField, name, value)
    __swig_getmethods__ = {}
    for _s in [RankedDataset,GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_GridField, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_GridField
    __del__ = lambda self : None;
    def setGrid(*args): return apply(_core.GridField_setGrid, args)
    def nearest(*args): return apply(_core.GridField_nearest, args)
    def lookupInt(*args): return apply(_core.GridField_lookupInt, args)
    def lookupFloat(*args): return apply(_core.GridField_lookupFloat, args)
    def Clear(*args): return apply(_core.GridField_Clear, args)
    def getKCell(*args): return apply(_core.GridField_getKCell, args)
    def unref(*args): return apply(_core.GridField_unref, args)
    def notValid(*args): return apply(_core.GridField_notValid, args)
    def RestrictAll(*args): return apply(_core.GridField_RestrictAll, args)
    def RangeRestrict(*args): return apply(_core.GridField_RangeRestrict, args)
    def show(*args): return apply(_core.GridField_show, args)
    def PrintTo(*args): return apply(_core.GridField_PrintTo, args)
    def PrepareForExecution(*args): return apply(_core.GridField_PrepareForExecution, args)
    def Updated(*args): return apply(_core.GridField_Updated, args)
    def Execute(*args): return apply(_core.GridField_Execute, args)
    def Dim(*args): return apply(_core.GridField_Dim, args)
    def Card(*args): return apply(_core.GridField_Card, args)
    def GetGrid(*args): return apply(_core.GridField_GetGrid, args)
    def ref(*args): return apply(_core.GridField_ref, args)
GridField_swigregister = _core.GridField_swigregister
GridField_swigregister(GridField)

class UnitGridField(GridField):
    __swig_setmethods__ = {}
    for _s in [GridField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitGridField, name, value)
    __swig_getmethods__ = {}
    for _s in [GridField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitGridField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_UnitGridField, args)
        try: self.this.append(this)
        except: self.this = this
    def Bind(*args): return apply(_core.UnitGridField_Bind, args)
    __swig_destroy__ = _core.delete_UnitGridField
    __del__ = lambda self : None;
UnitGridField_swigregister = _core.UnitGridField_swigregister
UnitGridField_swigregister(UnitGridField)

class Array(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Array, args)
        try: self.this.append(this)
        except: self.this = this
    def unref(*args): return apply(_core.Array_unref, args)
    def ref(*args): return apply(_core.Array_ref, args)
    __swig_destroy__ = _core.delete_Array
    __del__ = lambda self : None;
    def fill(*args): return apply(_core.Array_fill, args)
    def copyAndFilter(*args): return apply(_core.Array_copyAndFilter, args)
    def copy(*args): return apply(_core.Array_copy, args)
    def copyIntData(*args): return apply(_core.Array_copyIntData, args)
    def shareIntData(*args): return apply(_core.Array_shareIntData, args)
    def copyFloatData(*args): return apply(_core.Array_copyFloatData, args)
    def shareFloatData(*args): return apply(_core.Array_shareFloatData, args)
    def copyObjData(*args): return apply(_core.Array_copyObjData, args)
    def shareObjData(*args): return apply(_core.Array_shareObjData, args)
    def getData(*args): return apply(_core.Array_getData, args)
    def set(*args): return apply(_core.Array_set, args)
    def size(*args): return apply(_core.Array_size, args)
    def gettype(*args): return apply(_core.Array_gettype, args)
    def sname(*args): return apply(_core.Array_sname, args)
    def setVals(*args): return apply(_core.Array_setVals, args)
    def getVals(*args): return apply(_core.Array_getVals, args)
    def getValPtr(*args): return apply(_core.Array_getValPtr, args)
    def next(*args): return apply(_core.Array_next, args)
    def expand(*args): return apply(_core.Array_expand, args)
    def repeat(*args): return apply(_core.Array_repeat, args)
    def cast(*args): return apply(_core.Array_cast, args)
    def UnSafeCast(*args): return apply(_core.Array_UnSafeCast, args)
    def show(*args): return apply(_core.Array_show, args)
    def getName(*args): return apply(_core.Array_getName, args)
    def deleteName(*args): return apply(_core.Array_deleteName, args)
    def clear(*args): return apply(_core.Array_clear, args)
    __swig_setmethods__["type"] = _core.Array_type_set
    __swig_getmethods__["type"] = _core.Array_type_get
    def getScheme(*args): return apply(_core.Array_getScheme, args)
Array_swigregister = _core.Array_swigregister
Array_swigregister(Array)

class ConstArray(Array):
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ConstArray, args)
        try: self.this.append(this)
        except: self.this = this
    def copyAndFilter(*args): return apply(_core.ConstArray_copyAndFilter, args)
    def copy(*args): return apply(_core.ConstArray_copy, args)
    def copyData(*args): return apply(_core.ConstArray_copyData, args)
    def shareData(*args): return apply(_core.ConstArray_shareData, args)
    def getData(*args): return apply(_core.ConstArray_getData, args)
    def setVals(*args): return apply(_core.ConstArray_setVals, args)
    def getVals(*args): return apply(_core.ConstArray_getVals, args)
    def getValPtr(*args): return apply(_core.ConstArray_getValPtr, args)
    def next(*args): return apply(_core.ConstArray_next, args)
    def getConst(*args): return apply(_core.ConstArray_getConst, args)
    def setConst(*args): return apply(_core.ConstArray_setConst, args)
    def expand(*args): return apply(_core.ConstArray_expand, args)
    def repeat(*args): return apply(_core.ConstArray_repeat, args)
    def resize(*args): return apply(_core.ConstArray_resize, args)
    def cast(*args): return apply(_core.ConstArray_cast, args)
    def show(*args): return apply(_core.ConstArray_show, args)
    def clear(*args): return apply(_core.ConstArray_clear, args)
    def SetConst(*args): return apply(_core.ConstArray_SetConst, args)
    __swig_destroy__ = _core.delete_ConstArray
    __del__ = lambda self : None;
ConstArray_swigregister = _core.ConstArray_swigregister
ConstArray_swigregister(ConstArray)

class Cell:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Cell, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Cell
    __del__ = lambda self : None;
    def Cross(*args): return apply(_core.Cell_Cross, args)
    def Cross2(*args): return apply(_core.Cell_Cross2, args)
    def mapNodes(*args): return apply(_core.Cell_mapNodes, args)
    def setNode(*args): return apply(_core.Cell_setNode, args)
    def eq(*args): return apply(_core.Cell_eq, args)
    def __eq__(*args): return apply(_core.Cell___eq__, args)
    def __lt__(*args): return apply(_core.Cell___lt__, args)
    def show(*args): return apply(_core.Cell_show, args)
    def hasNode(*args): return apply(_core.Cell_hasNode, args)
    def IncidentTo(*args): return apply(_core.Cell_IncidentTo, args)
    def setsize(*args): return apply(_core.Cell_setsize, args)
    def setnodes(*args): return apply(_core.Cell_setnodes, args)
    def getsize(*args): return apply(_core.Cell_getsize, args)
    def getnodes(*args): return apply(_core.Cell_getnodes, args)
    def getnode(*args): return apply(_core.Cell_getnode, args)
Cell_swigregister = _core.Cell_swigregister
Cell_swigregister(Cell)

class eqCell:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eqCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eqCell, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.eqCell___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_eqCell, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_eqCell
    __del__ = lambda self : None;
eqCell_swigregister = _core.eqCell_swigregister
eqCell_swigregister(eqCell)

class ltCell:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ltCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ltCell, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.ltCell___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_ltCell, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ltCell
    __del__ = lambda self : None;
ltCell_swigregister = _core.ltCell_swigregister
ltCell_swigregister(ltCell)

class SimpleCellHash:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleCellHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleCellHash, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.SimpleCellHash___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_SimpleCellHash, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_SimpleCellHash
    __del__ = lambda self : None;
SimpleCellHash_swigregister = _core.SimpleCellHash_swigregister
SimpleCellHash_swigregister(SimpleCellHash)

class CellHash:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellHash, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.CellHash___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_CellHash, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_CellHash
    __del__ = lambda self : None;
CellHash_swigregister = _core.CellHash_swigregister
CellHash_swigregister(CellHash)

class CellArray:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellArray, name)
    __repr__ = _swig_repr
    def whoami(*args): return apply(_core.CellArray_whoami, args)
    def __init__(self, *args): 
        this = apply(_core.new_CellArray, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_CellArray
    __del__ = lambda self : None;
    def getsize(*args): return apply(_core.CellArray_getsize, args)
    def addCell(*args): return apply(_core.CellArray_addCell, args)
    def addCellNodes(*args): return apply(_core.CellArray_addCellNodes, args)
    def getCell(*args): return apply(_core.CellArray_getCell, args)
    def getCellCopy(*args): return apply(_core.CellArray_getCellCopy, args)
    def getCellNodes(*args): return apply(_core.CellArray_getCellNodes, args)
    def contains(*args): return apply(_core.CellArray_contains, args)
    def getOrd(*args): return apply(_core.CellArray_getOrd, args)
    def bytes(*args): return apply(_core.CellArray_bytes, args)
    def ref(*args): return apply(_core.CellArray_ref, args)
    def unref(*args): return apply(_core.CellArray_unref, args)
    def setNodeArray(*args): return apply(_core.CellArray_setNodeArray, args)
    def getIncidentCells(*args): return apply(_core.CellArray_getIncidentCells, args)
    def getAdjacentCells(*args): return apply(_core.CellArray_getAdjacentCells, args)
    def getNodeCount(*args): return apply(_core.CellArray_getNodeCount, args)
    def show(*args): return apply(_core.CellArray_show, args)
    def toNodeSet(*args): return apply(_core.CellArray_toNodeSet, args)
    def Intersection(*args): return apply(_core.CellArray_Intersection, args)
    def Cross(*args): return apply(_core.CellArray_Cross, args)
    def Append(*args): return apply(_core.CellArray_Append, args)
    def mapNodes(*args): return apply(_core.CellArray_mapNodes, args)
    def makeCrossNodeMap(*args): return apply(_core.CellArray_makeCrossNodeMap, args)
    def buildInvertedIndex(*args): return apply(_core.CellArray_buildInvertedIndex, args)
    def buildIncidenceIndex(*args): return apply(_core.CellArray_buildIncidenceIndex, args)
    def buildAdjacencyIndex(*args): return apply(_core.CellArray_buildAdjacencyIndex, args)
    def getCellVector(*args): return apply(_core.CellArray_getCellVector, args)
    __swig_setmethods__["cleanup_node_array"] = _core.CellArray_cleanup_node_array_set
    __swig_getmethods__["cleanup_node_array"] = _core.CellArray_cleanup_node_array_get
CellArray_swigregister = _core.CellArray_swigregister
CellArray_swigregister(CellArray)

testString = _core.testString
class Grid(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _core.Grid_name_set
    __swig_getmethods__["name"] = _core.Grid_name_get
    def __init__(self, *args): 
        this = apply(_core.new_Grid, args)
        try: self.this.append(this)
        except: self.this = this
    def ref(*args): return apply(_core.Grid_ref, args)
    def unref(*args): return apply(_core.Grid_unref, args)
    __swig_destroy__ = _core.delete_Grid
    __del__ = lambda self : None;
    def getName(*args): return apply(_core.Grid_getName, args)
    def init(*args): return apply(_core.Grid_init, args)
    def getdim(*args): return apply(_core.Grid_getdim, args)
    def Size(*args): return apply(_core.Grid_Size, args)
    def setKCells(*args): return apply(_core.Grid_setKCells, args)
    def getKCells(*args): return apply(_core.Grid_getKCells, args)
    def setImplicit0Cells(*args): return apply(_core.Grid_setImplicit0Cells, args)
    def countKCells(*args): return apply(_core.Grid_countKCells, args)
    def empty(*args): return apply(_core.Grid_empty, args)
    def shareCells(*args): return apply(_core.Grid_shareCells, args)
    def copyCells(*args): return apply(_core.Grid_copyCells, args)
    def nodeFilter(*args): return apply(_core.Grid_nodeFilter, args)
    def checkWellFormed(*args): return apply(_core.Grid_checkWellFormed, args)
    def cellCount(*args): return apply(_core.Grid_cellCount, args)
    def IncidentTo(*args): return apply(_core.Grid_IncidentTo, args)
    def normalize(*args): return apply(_core.Grid_normalize, args)
    def mapNodes(*args): return apply(_core.Grid_mapNodes, args)
    def setReferent(*args): return apply(_core.Grid_setReferent, args)
    def Intersection(*args): return apply(_core.Grid_Intersection, args)
    def Cross(*args): return apply(_core.Grid_Cross, args)
    def show(*args): return apply(_core.Grid_show, args)
    __swig_setmethods__["ordmap"] = _core.Grid_ordmap_set
    __swig_getmethods__["ordmap"] = _core.Grid_ordmap_get
Grid_swigregister = _core.Grid_swigregister
Grid_swigregister(Grid)

class UnitGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_UnitGrid, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_UnitGrid
    __del__ = lambda self : None;
UnitGrid_swigregister = _core.UnitGrid_swigregister
UnitGrid_swigregister(UnitGrid)

BLOCKSIZ = _core.BLOCKSIZ
DIGITS = _core.DIGITS
class Implicit0Cells:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Implicit0Cells, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Implicit0Cells, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Implicit0Cells, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Implicit0Cells
    __del__ = lambda self : None;
    def getsize(*args): return apply(_core.Implicit0Cells_getsize, args)
    def getCell(*args): return apply(_core.Implicit0Cells_getCell, args)
    def getCellCopy(*args): return apply(_core.Implicit0Cells_getCellCopy, args)
    def getCellNodes(*args): return apply(_core.Implicit0Cells_getCellNodes, args)
    def whoami(*args): return apply(_core.Implicit0Cells_whoami, args)
    def contains(*args): return apply(_core.Implicit0Cells_contains, args)
    def getOrd(*args): return apply(_core.Implicit0Cells_getOrd, args)
    def getIncidentCells(*args): return apply(_core.Implicit0Cells_getIncidentCells, args)
    def getAdjacentCells(*args): return apply(_core.Implicit0Cells_getAdjacentCells, args)
    def getNodeCount(*args): return apply(_core.Implicit0Cells_getNodeCount, args)
    def mapNodes(*args): return apply(_core.Implicit0Cells_mapNodes, args)
    def buildInvertedIndex(*args): return apply(_core.Implicit0Cells_buildInvertedIndex, args)
    def buildAdjacentIndex(*args): return apply(_core.Implicit0Cells_buildAdjacentIndex, args)
    def show(*args): return apply(_core.Implicit0Cells_show, args)
    def implicit(*args): return apply(_core.Implicit0Cells_implicit, args)
    def bytes(*args): return apply(_core.Implicit0Cells_bytes, args)
    def unref(*args): return apply(_core.Implicit0Cells_unref, args)
    def ref(*args): return apply(_core.Implicit0Cells_ref, args)
    def asCellArray(*args): return apply(_core.Implicit0Cells_asCellArray, args)
    def getCellVector(*args): return apply(_core.Implicit0Cells_getCellVector, args)
    def toNodeSet(*args): return apply(_core.Implicit0Cells_toNodeSet, args)
    def Intersection(*args): return apply(_core.Implicit0Cells_Intersection, args)
    def Cross(*args): return apply(_core.Implicit0Cells_Cross, args)
    def makeCrossNodeMap(*args): return apply(_core.Implicit0Cells_makeCrossNodeMap, args)
Implicit0Cells_swigregister = _core.Implicit0Cells_swigregister
Implicit0Cells_swigregister(Implicit0Cells)

class ArrayReader:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ArrayReader
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = apply(_core.new_ArrayReader, args)
        try: self.this.append(this)
        except: self.this = this
    def ReadTuples(*args): return apply(_core.ArrayReader_ReadTuples, args)
    def ReadPrimitives(*args): return apply(_core.ArrayReader_ReadPrimitives, args)
    def Read(*args): return apply(_core.ArrayReader_Read, args)
    def getOffset(*args): return apply(_core.ArrayReader_getOffset, args)
    def setOffset(*args): return apply(_core.ArrayReader_setOffset, args)
    def setPatternAttribute(*args): return apply(_core.ArrayReader_setPatternAttribute, args)
    def setStream(*args): return apply(_core.ArrayReader_setStream, args)
ArrayReader_swigregister = _core.ArrayReader_swigregister
ArrayReader_swigregister(ArrayReader)

class FileArrayReader(ArrayReader):
    __swig_setmethods__ = {}
    for _s in [ArrayReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileArrayReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_FileArrayReader, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_FileArrayReader
    __del__ = lambda self : None;
FileArrayReader_swigregister = _core.FileArrayReader_swigregister
FileArrayReader_swigregister(FileArrayReader)

class ProjectArrayReader(FileArrayReader):
    __swig_setmethods__ = {}
    for _s in [FileArrayReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [FileArrayReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectArrayReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ProjectArrayReader, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ProjectArrayReader
    __del__ = lambda self : None;
    def GetScheme(*args): return apply(_core.ProjectArrayReader_GetScheme, args)
    def SetScheme(*args): return apply(_core.ProjectArrayReader_SetScheme, args)
    def ReadPrimitives(*args): return apply(_core.ProjectArrayReader_ReadPrimitives, args)
    def ReadTuples(*args): return apply(_core.ProjectArrayReader_ReadTuples, args)
ProjectArrayReader_swigregister = _core.ProjectArrayReader_swigregister
ProjectArrayReader_swigregister(ProjectArrayReader)

class TextFileArrayReader(FileArrayReader):
    __swig_setmethods__ = {}
    for _s in [FileArrayReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFileArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [FileArrayReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextFileArrayReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_TextFileArrayReader, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_TextFileArrayReader
    __del__ = lambda self : None;
TextFileArrayReader_swigregister = _core.TextFileArrayReader_swigregister
TextFileArrayReader_swigregister(TextFileArrayReader)

class ArrayWriter:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ArrayWriter, args)
        try: self.this.append(this)
        except: self.this = this
    def Write(*args): return apply(_core.ArrayWriter_Write, args)
    __swig_destroy__ = _core.delete_ArrayWriter
    __del__ = lambda self : None;
ArrayWriter_swigregister = _core.ArrayWriter_swigregister
ArrayWriter_swigregister(ArrayWriter)

class ElcircFile:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ElcircFile, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircFile
    __del__ = lambda self : None;
    def getVarScheme(*args): return apply(_core.ElcircFile_getVarScheme, args)
    def getSurfReader(*args): return apply(_core.ElcircFile_getSurfReader, args)
    def getVariableReader(*args): return apply(_core.ElcircFile_getVariableReader, args)
    def getSurfOffset(*args): return apply(_core.ElcircFile_getSurfOffset, args)
    def getVariableOffset(*args): return apply(_core.ElcircFile_getVariableOffset, args)
    def getTimestepSize(*args): return apply(_core.ElcircFile_getTimestepSize, args)
    def getHeaderSize(*args): return apply(_core.ElcircFile_getHeaderSize, args)
    def readHGrid(*args): return apply(_core.ElcircFile_readHGrid, args)
    def readDGrid(*args): return apply(_core.ElcircFile_readDGrid, args)
    def readVGrid(*args): return apply(_core.ElcircFile_readVGrid, args)
    def readTGrid(*args): return apply(_core.ElcircFile_readTGrid, args)
    def Valid(*args): return apply(_core.ElcircFile_Valid, args)
    def makeHeader(*args): return apply(_core.ElcircFile_makeHeader, args)
    __swig_setmethods__["h"] = _core.ElcircFile_h_set
    __swig_getmethods__["h"] = _core.ElcircFile_h_get
    def i23d(*args): return apply(_core.ElcircFile_i23d, args)
ElcircFile_swigregister = _core.ElcircFile_swigregister
ElcircFile_swigregister(ElcircFile)

class CrossOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_CrossOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.CrossOp_Execute, args)
    __swig_getmethods__["Cross"] = lambda x: _core.CrossOp_Cross
    __swig_destroy__ = _core.delete_CrossOp
    __del__ = lambda self : None;
CrossOp_swigregister = _core.CrossOp_swigregister
CrossOp_swigregister(CrossOp)
CrossOp_Cross = _core.CrossOp_Cross

class RestrictOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RestrictOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RestrictOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_RestrictOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.RestrictOp_Execute, args)
    __swig_getmethods__["Restrict"] = lambda x: _core.RestrictOp_Restrict
    __swig_destroy__ = _core.delete_RestrictOp
    __del__ = lambda self : None;
RestrictOp_swigregister = _core.RestrictOp_swigregister
RestrictOp_swigregister(RestrictOp)
RestrictOp_Restrict = _core.RestrictOp_Restrict

class ApplyOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplyOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplyOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ApplyOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.ApplyOp_Execute, args)
    __swig_getmethods__["Apply"] = lambda x: _core.ApplyOp_Apply
    def SetExpression(*args): return apply(_core.ApplyOp_SetExpression, args)
    def SetRank(*args): return apply(_core.ApplyOp_SetRank, args)
    __swig_destroy__ = _core.delete_ApplyOp
    __del__ = lambda self : None;
ApplyOp_swigregister = _core.ApplyOp_swigregister
ApplyOp_swigregister(ApplyOp)
ApplyOp_Apply = _core.ApplyOp_Apply

class BindOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BindOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BindOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_BindOp, args)
        try: self.this.append(this)
        except: self.this = this
    def setArrayReader(*args): return apply(_core.BindOp_setArrayReader, args)
    def setOffset(*args): return apply(_core.BindOp_setOffset, args)
    def setOffsetInt(*args): return apply(_core.BindOp_setOffsetInt, args)
    def Execute(*args): return apply(_core.BindOp_Execute, args)
    __swig_getmethods__["Bind"] = lambda x: _core.BindOp_Bind
    __swig_destroy__ = _core.delete_BindOp
    __del__ = lambda self : None;
BindOp_swigregister = _core.BindOp_swigregister
BindOp_swigregister(BindOp)
BindOp_Bind = _core.BindOp_Bind

class BindConstantOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BindConstantOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BindConstantOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_BindConstantOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.BindConstantOp_Execute, args)
    def setAttributeVal(*args): return apply(_core.BindConstantOp_setAttributeVal, args)
    __swig_getmethods__["BindConstant"] = lambda x: _core.BindConstantOp_BindConstant
    __swig_destroy__ = _core.delete_BindConstantOp
    __del__ = lambda self : None;
BindConstantOp_swigregister = _core.BindConstantOp_swigregister
BindConstantOp_swigregister(BindConstantOp)
BindConstantOp_BindConstant = _core.BindConstantOp_BindConstant

class IterateOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IterateOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IterateOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_IterateOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.IterateOp_Execute, args)
    __swig_destroy__ = _core.delete_IterateOp
    __del__ = lambda self : None;
IterateOp_swigregister = _core.IterateOp_swigregister
IterateOp_swigregister(IterateOp)

class StateOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_StateOp, args)
        try: self.this.append(this)
        except: self.this = this
    def SetState(*args): return apply(_core.StateOp_SetState, args)
    def Execute(*args): return apply(_core.StateOp_Execute, args)
    __swig_destroy__ = _core.delete_StateOp
    __del__ = lambda self : None;
StateOp_swigregister = _core.StateOp_swigregister
StateOp_swigregister(StateOp)

class TagOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TagOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_TagOp, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_TagOp
    __del__ = lambda self : None;
    def Execute(*args): return apply(_core.TagOp_Execute, args)
    def Tag(*args): return apply(_core.TagOp_Tag, args)
TagOp_swigregister = _core.TagOp_swigregister
TagOp_swigregister(TagOp)

class DataDumpOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataDumpOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataDumpOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_DataDumpOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.DataDumpOp_Execute, args)
    __swig_getmethods__["DataDump"] = lambda x: _core.DataDumpOp_DataDump
    __swig_destroy__ = _core.delete_DataDumpOp
    __del__ = lambda self : None;
DataDumpOp_swigregister = _core.DataDumpOp_swigregister
DataDumpOp_swigregister(DataDumpOp)
DataDumpOp_DataDump = _core.DataDumpOp_DataDump

class OutputOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_OutputOp, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["offset"] = _core.OutputOp_offset_set
    __swig_getmethods__["offset"] = _core.OutputOp_offset_get
    __swig_setmethods__["filename"] = _core.OutputOp_filename_set
    __swig_getmethods__["filename"] = _core.OutputOp_filename_get
    def Execute(*args): return apply(_core.OutputOp_Execute, args)
    def setFileName(*args): return apply(_core.OutputOp_setFileName, args)
    def Output(*args): return apply(_core.OutputOp_Output, args)
    __swig_destroy__ = _core.delete_OutputOp
    __del__ = lambda self : None;
OutputOp_swigregister = _core.OutputOp_swigregister
OutputOp_swigregister(OutputOp)

class StuebeNetCDFOp:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StuebeNetCDFOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StuebeNetCDFOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_StuebeNetCDFOp, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["filename"] = _core.StuebeNetCDFOp_filename_set
    __swig_getmethods__["filename"] = _core.StuebeNetCDFOp_filename_get
    def setFileName(*args): return apply(_core.StuebeNetCDFOp_setFileName, args)
    def WriteSELFENetCDF(*args): return apply(_core.StuebeNetCDFOp_WriteSELFENetCDF, args)
    def SetDate(*args): return apply(_core.StuebeNetCDFOp_SetDate, args)
    def Write3DTimestep(*args): return apply(_core.StuebeNetCDFOp_Write3DTimestep, args)
    __swig_destroy__ = _core.delete_StuebeNetCDFOp
    __del__ = lambda self : None;
StuebeNetCDFOp_swigregister = _core.StuebeNetCDFOp_swigregister
StuebeNetCDFOp_swigregister(StuebeNetCDFOp)

class OutputNetCDFOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNetCDFOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNetCDFOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_OutputNetCDFOp, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["filename"] = _core.OutputNetCDFOp_filename_set
    __swig_getmethods__["filename"] = _core.OutputNetCDFOp_filename_get
    def Execute(*args): return apply(_core.OutputNetCDFOp_Execute, args)
    def setFileName(*args): return apply(_core.OutputNetCDFOp_setFileName, args)
    def WriteNetCDF(*args): return apply(_core.OutputNetCDFOp_WriteNetCDF, args)
    def WriteTimeVars(*args): return apply(_core.OutputNetCDFOp_WriteTimeVars, args)
    def SetDate(*args): return apply(_core.OutputNetCDFOp_SetDate, args)
    __swig_destroy__ = _core.delete_OutputNetCDFOp
    __del__ = lambda self : None;
OutputNetCDFOp_swigregister = _core.OutputNetCDFOp_swigregister
OutputNetCDFOp_swigregister(OutputNetCDFOp)

class OutputNetCDFDim(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNetCDFDim, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNetCDFDim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_OutputNetCDFDim, args)
        try: self.this.append(this)
        except: self.this = this
    def WriteCells(*args): return apply(_core.OutputNetCDFDim_WriteCells, args)
    def Execute(*args): return apply(_core.OutputNetCDFDim_Execute, args)
    def SetDate(*args): return apply(_core.OutputNetCDFDim_SetDate, args)
    __swig_destroy__ = _core.delete_OutputNetCDFDim
    __del__ = lambda self : None;
OutputNetCDFDim_swigregister = _core.OutputNetCDFDim_swigregister
OutputNetCDFDim_swigregister(OutputNetCDFDim)

class OutputNetCDFVars(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNetCDFVars, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNetCDFVars, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_OutputNetCDFVars, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.OutputNetCDFVars_Execute, args)
    def SetDate(*args): return apply(_core.OutputNetCDFVars_SetDate, args)
    __swig_destroy__ = _core.delete_OutputNetCDFVars
    __del__ = lambda self : None;
OutputNetCDFVars_swigregister = _core.OutputNetCDFVars_swigregister
OutputNetCDFVars_swigregister(OutputNetCDFVars)

mapType = _core.mapType
HasDim = _core.HasDim
HasVar = _core.HasVar
HasAttr = _core.HasAttr
class NetCDFAdaptor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetCDFAdaptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetCDFAdaptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_NetCDFAdaptor, args)
        try: self.this.append(this)
        except: self.this = this
    def Open(*args): return apply(_core.NetCDFAdaptor_Open, args)
    def Close(*args): return apply(_core.NetCDFAdaptor_Close, args)
    def setFileName(*args): return apply(_core.NetCDFAdaptor_setFileName, args)
    def NodesFromDim(*args): return apply(_core.NetCDFAdaptor_NodesFromDim, args)
    def WellSupportedPolygonsFromVars(*args): return apply(_core.NetCDFAdaptor_WellSupportedPolygonsFromVars, args)
    def HomogeneousCellsFromVar(*args): return apply(_core.NetCDFAdaptor_HomogeneousCellsFromVar, args)
    def AttributeFromVar(*args): return apply(_core.NetCDFAdaptor_AttributeFromVar, args)
    def CreateDim(*args): return apply(_core.NetCDFAdaptor_CreateDim, args)
    def DimFromDim(*args): return apply(_core.NetCDFAdaptor_DimFromDim, args)
    def VarFromAttribute(*args): return apply(_core.NetCDFAdaptor_VarFromAttribute, args)
    def VarFromIncidence(*args): return apply(_core.NetCDFAdaptor_VarFromIncidence, args)
    __swig_getmethods__["mapType"] = lambda x: _core.NetCDFAdaptor_mapType
    __swig_getmethods__["HasDim"] = lambda x: _core.NetCDFAdaptor_HasDim
    __swig_getmethods__["HasVar"] = lambda x: _core.NetCDFAdaptor_HasVar
    __swig_getmethods__["HasAttr"] = lambda x: _core.NetCDFAdaptor_HasAttr
    __swig_destroy__ = _core.delete_NetCDFAdaptor
    __del__ = lambda self : None;
NetCDFAdaptor_swigregister = _core.NetCDFAdaptor_swigregister
NetCDFAdaptor_swigregister(NetCDFAdaptor)
NetCDFAdaptor_mapType = _core.NetCDFAdaptor_mapType
NetCDFAdaptor_HasDim = _core.NetCDFAdaptor_HasDim
NetCDFAdaptor_HasVar = _core.NetCDFAdaptor_HasVar
NetCDFAdaptor_HasAttr = _core.NetCDFAdaptor_HasAttr

class ScanOp(ZeroaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [ZeroaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScanOp, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScanOp, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _core.ScanOp_filename_set
    __swig_getmethods__["filename"] = _core.ScanOp_filename_get
    __swig_setmethods__["offset"] = _core.ScanOp_offset_set
    __swig_getmethods__["offset"] = _core.ScanOp_offset_get
    __swig_destroy__ = _core.delete_ScanOp
    __del__ = lambda self : None;
ScanOp_swigregister = _core.ScanOp_swigregister
ScanOp_swigregister(ScanOp)

class ScanInternal(ScanOp):
    __swig_setmethods__ = {}
    for _s in [ScanOp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScanInternal, name, value)
    __swig_getmethods__ = {}
    for _s in [ScanOp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScanInternal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ScanInternal, args)
        try: self.this.append(this)
        except: self.this = this
    def setFileName(*args): return apply(_core.ScanInternal_setFileName, args)
    def setRawBytes(*args): return apply(_core.ScanInternal_setRawBytes, args)
    def Execute(*args): return apply(_core.ScanInternal_Execute, args)
    __swig_getmethods__["Scan"] = lambda x: _core.ScanInternal_Scan
    __swig_destroy__ = _core.delete_ScanInternal
    __del__ = lambda self : None;
ScanInternal_swigregister = _core.ScanInternal_swigregister
ScanInternal_swigregister(ScanInternal)
ScanInternal_Scan = _core.ScanInternal_Scan

class AccumulateOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccumulateOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccumulateOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_AccumulateOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.AccumulateOp_Execute, args)
    __swig_getmethods__["Accumulate"] = lambda x: _core.AccumulateOp_Accumulate
    def SetOffset(*args): return apply(_core.AccumulateOp_SetOffset, args)
    __swig_setmethods__["position_offset"] = _core.AccumulateOp_position_offset_set
    __swig_getmethods__["position_offset"] = _core.AccumulateOp_position_offset_get
    __swig_destroy__ = _core.delete_AccumulateOp
    __del__ = lambda self : None;
AccumulateOp_swigregister = _core.AccumulateOp_swigregister
AccumulateOp_swigregister(AccumulateOp)
AccumulateOp_Accumulate = _core.AccumulateOp_Accumulate

debug_set = _core.debug_set
class AssignmentFunction:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentFunction, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AssignmentFunction
    __del__ = lambda self : None;
    __swig_setmethods__["T"] = _core.AssignmentFunction_T_set
    __swig_getmethods__["T"] = _core.AssignmentFunction_T_get
    __swig_setmethods__["S"] = _core.AssignmentFunction_S_set
    __swig_getmethods__["S"] = _core.AssignmentFunction_S_get
    __swig_setmethods__["_i"] = _core.AssignmentFunction__i_set
    __swig_getmethods__["_i"] = _core.AssignmentFunction__i_get
    __swig_setmethods__["_j"] = _core.AssignmentFunction__j_set
    __swig_getmethods__["_j"] = _core.AssignmentFunction__j_get
    __swig_setmethods__["dstarget"] = _core.AssignmentFunction_dstarget_set
    __swig_getmethods__["dstarget"] = _core.AssignmentFunction_dstarget_get
    __swig_setmethods__["dssource"] = _core.AssignmentFunction_dssource_set
    __swig_getmethods__["dssource"] = _core.AssignmentFunction_dssource_get
    __swig_setmethods__["schtarget"] = _core.AssignmentFunction_schtarget_set
    __swig_getmethods__["schtarget"] = _core.AssignmentFunction_schtarget_get
    __swig_setmethods__["schsource"] = _core.AssignmentFunction_schsource_set
    __swig_getmethods__["schsource"] = _core.AssignmentFunction_schsource_get
    def setEnvironment(*args): return apply(_core.AssignmentFunction_setEnvironment, args)
    def __call__(*args): return apply(_core.AssignmentFunction___call__, args)
AssignmentFunction_swigregister = _core.AssignmentFunction_swigregister
AssignmentFunction_swigregister(AssignmentFunction)

class AggregationFunction:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregationFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AggregationFunction, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AggregationFunction
    __del__ = lambda self : None;
    def setScheme(*args): return apply(_core.AggregationFunction_setScheme, args)
    def getOutScheme(*args): return apply(_core.AggregationFunction_getOutScheme, args)
    def __call__(*args): return apply(_core.AggregationFunction___call__, args)
AggregationFunction_swigregister = _core.AggregationFunction_swigregister
AggregationFunction_swigregister(AggregationFunction)

class AggregateOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregateOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AggregateOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_AggregateOp, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Aggregate"] = lambda x: _core.AggregateOp_Aggregate
    __swig_destroy__ = _core.delete_AggregateOp
    __del__ = lambda self : None;
AggregateOp_swigregister = _core.AggregateOp_swigregister
AggregateOp_swigregister(AggregateOp)
AggregateOp_Aggregate = _core.AggregateOp_Aggregate

TOLERANCE = _core.TOLERANCE
NULL_VALUE = _core.NULL_VALUE
euclid = _core.euclid
euclid3D = _core.euclid3D
class dotwo(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, dotwo, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, dotwo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_dotwo, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.dotwo___call__, args)
    def mergeTuples(*args): return apply(_core.dotwo_mergeTuples, args)
    def mergeSchemes(*args): return apply(_core.dotwo_mergeSchemes, args)
    def getOutScheme(*args): return apply(_core.dotwo_getOutScheme, args)
    __swig_destroy__ = _core.delete_dotwo
    __del__ = lambda self : None;
dotwo_swigregister = _core.dotwo_swigregister
dotwo_swigregister(dotwo)

class Any(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Any, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Any, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Any, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.Any___call__, args)
    def getOutScheme(*args): return apply(_core.Any_getOutScheme, args)
    __swig_destroy__ = _core.delete_Any
    __del__ = lambda self : None;
Any_swigregister = _core.Any_swigregister
Any_swigregister(Any)

class Count(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Count, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Count, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.Count___call__, args)
    def getOutScheme(*args): return apply(_core.Count_getOutScheme, args)
    def __init__(self, *args): 
        this = apply(_core.new_Count, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Count
    __del__ = lambda self : None;
Count_swigregister = _core.Count_swigregister
Count_swigregister(Count)

class area(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, area, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, area, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_area, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.area___call__, args)
    def getOutScheme(*args): return apply(_core.area_getOutScheme, args)
    __swig_destroy__ = _core.delete_area
    __del__ = lambda self : None;
area_swigregister = _core.area_swigregister
area_swigregister(area)

class mkvector(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, mkvector, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, mkvector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.mkvector_attr_set
    __swig_getmethods__["attr"] = _core.mkvector_attr_get
    def __init__(self, *args): 
        this = apply(_core.new_mkvector, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.mkvector___call__, args)
    def getOutScheme(*args): return apply(_core.mkvector_getOutScheme, args)
    __swig_destroy__ = _core.delete_mkvector
    __del__ = lambda self : None;
mkvector_swigregister = _core.mkvector_swigregister
mkvector_swigregister(mkvector)

class triweights(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, triweights, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, triweights, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.triweights___call__, args)
    def getOutScheme(*args): return apply(_core.triweights_getOutScheme, args)
    def __init__(self, *args): 
        this = apply(_core.new_triweights, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_triweights
    __del__ = lambda self : None;
triweights_swigregister = _core.triweights_swigregister
triweights_swigregister(triweights)

class interpolate3D(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate3D, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attrs"] = _core.interpolate3D_attrs_set
    __swig_getmethods__["attrs"] = _core.interpolate3D_attrs_get
    def __init__(self, *args): 
        this = apply(_core.new_interpolate3D, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.interpolate3D___call__, args)
    def getOutScheme(*args): return apply(_core.interpolate3D_getOutScheme, args)
    __swig_destroy__ = _core.delete_interpolate3D
    __del__ = lambda self : None;
interpolate3D_swigregister = _core.interpolate3D_swigregister
interpolate3D_swigregister(interpolate3D)

class interpolate2D(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate2D, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.interpolate2D_attr_set
    __swig_getmethods__["attr"] = _core.interpolate2D_attr_get
    def __init__(self, *args): 
        this = apply(_core.new_interpolate2D, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.interpolate2D___call__, args)
    def getOutScheme(*args): return apply(_core.interpolate2D_getOutScheme, args)
    __swig_destroy__ = _core.delete_interpolate2D
    __del__ = lambda self : None;
interpolate2D_swigregister = _core.interpolate2D_swigregister
interpolate2D_swigregister(interpolate2D)

class first(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, first, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, first, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_first, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.first___call__, args)
    def getOutScheme(*args): return apply(_core.first_getOutScheme, args)
    __swig_destroy__ = _core.delete_first
    __del__ = lambda self : None;
first_swigregister = _core.first_swigregister
first_swigregister(first)

class statistics(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, statistics, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, statistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_statistics, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.statistics___call__, args)
    def getOutScheme(*args): return apply(_core.statistics_getOutScheme, args)
    __swig_destroy__ = _core.delete_statistics
    __del__ = lambda self : None;
statistics_swigregister = _core.statistics_swigregister
statistics_swigregister(statistics)

class project(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, project, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, project, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attrs"] = _core.project_attrs_set
    __swig_getmethods__["attrs"] = _core.project_attrs_get
    def __init__(self, *args): 
        this = apply(_core.new_project, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.project___call__, args)
    def getOutScheme(*args): return apply(_core.project_getOutScheme, args)
    __swig_destroy__ = _core.delete_project
    __del__ = lambda self : None;
project_swigregister = _core.project_swigregister
project_swigregister(project)

equal = _core.equal
TestCallback = _core.TestCallback
pnpoly = _core.pnpoly
class Both(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Both, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Both, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _core.Both_left_set
    __swig_getmethods__["left"] = _core.Both_left_get
    __swig_setmethods__["right"] = _core.Both_right_set
    __swig_getmethods__["right"] = _core.Both_right_get
    def __init__(self, *args): 
        this = apply(_core.new_Both, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.Both___call__, args)
    def setEnvironment(*args): return apply(_core.Both_setEnvironment, args)
    __swig_destroy__ = _core.delete_Both
    __del__ = lambda self : None;
Both_swigregister = _core.Both_swigregister
Both_swigregister(Both)

class Either(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Either, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Either, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _core.Either_left_set
    __swig_getmethods__["left"] = _core.Either_left_get
    __swig_setmethods__["right"] = _core.Either_right_set
    __swig_getmethods__["right"] = _core.Either_right_get
    def __init__(self, *args): 
        this = apply(_core.new_Either, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.Either___call__, args)
    def setEnvironment(*args): return apply(_core.Either_setEnvironment, args)
    __swig_destroy__ = _core.delete_Either
    __del__ = lambda self : None;
Either_swigregister = _core.Either_swigregister
Either_swigregister(Either)

class IncidentTo(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncidentTo, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncidentTo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_IncidentTo, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.IncidentTo___call__, args)
    __swig_destroy__ = _core.delete_IncidentTo
    __del__ = lambda self : None;
IncidentTo_swigregister = _core.IncidentTo_swigregister
IncidentTo_swigregister(IncidentTo)

class Nodes(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nodes, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nodes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Nodes, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.Nodes___call__, args)
    __swig_destroy__ = _core.delete_Nodes
    __del__ = lambda self : None;
Nodes_swigregister = _core.Nodes_swigregister
Nodes_swigregister(Nodes)

class adjacentNodes(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, adjacentNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, adjacentNodes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_adjacentNodes, args)
        try: self.this.append(this)
        except: self.this = this
    def setEnvironment(*args): return apply(_core.adjacentNodes_setEnvironment, args)
    def __call__(*args): return apply(_core.adjacentNodes___call__, args)
    __swig_destroy__ = _core.delete_adjacentNodes
    __del__ = lambda self : None;
adjacentNodes_swigregister = _core.adjacentNodes_swigregister
adjacentNodes_swigregister(adjacentNodes)

class adjacent(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, adjacent, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, adjacent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_adjacent, args)
        try: self.this.append(this)
        except: self.this = this
    def setEnvironment(*args): return apply(_core.adjacent_setEnvironment, args)
    def __call__(*args): return apply(_core.adjacent___call__, args)
    __swig_destroy__ = _core.delete_adjacent
    __del__ = lambda self : None;
adjacent_swigregister = _core.adjacent_swigregister
adjacent_swigregister(adjacent)

class neighbors(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, neighbors, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, neighbors, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.neighbors___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_neighbors, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_neighbors
    __del__ = lambda self : None;
neighbors_swigregister = _core.neighbors_swigregister
neighbors_swigregister(neighbors)

class intervalContains(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, intervalContains, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, intervalContains, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rangeattr"] = _core.intervalContains_rangeattr_set
    __swig_getmethods__["rangeattr"] = _core.intervalContains_rangeattr_get
    __swig_setmethods__["valueattr"] = _core.intervalContains_valueattr_set
    __swig_getmethods__["valueattr"] = _core.intervalContains_valueattr_get
    __swig_setmethods__["pointattr"] = _core.intervalContains_pointattr_set
    __swig_getmethods__["pointattr"] = _core.intervalContains_pointattr_get
    def __init__(self, *args): 
        this = apply(_core.new_intervalContains, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.intervalContains___call__, args)
    __swig_destroy__ = _core.delete_intervalContains
    __del__ = lambda self : None;
intervalContains_swigregister = _core.intervalContains_swigregister
intervalContains_swigregister(intervalContains)

class byPointerSet(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, byPointerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, byPointerSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_byPointerSet, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.byPointerSet___call__, args)
    __swig_destroy__ = _core.delete_byPointerSet
    __del__ = lambda self : None;
byPointerSet_swigregister = _core.byPointerSet_swigregister
byPointerSet_swigregister(byPointerSet)

class nearest(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nearest, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, nearest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _core.nearest_a_set
    __swig_getmethods__["a"] = _core.nearest_a_get
    __swig_setmethods__["b"] = _core.nearest_b_set
    __swig_getmethods__["b"] = _core.nearest_b_get
    def __init__(self, *args): 
        this = apply(_core.new_nearest, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.nearest___call__, args)
    __swig_destroy__ = _core.delete_nearest
    __del__ = lambda self : None;
nearest_swigregister = _core.nearest_swigregister
nearest_swigregister(nearest)

class sortedmatch(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sortedmatch, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sortedmatch, name)
    __repr__ = _swig_repr
    def setEnvironment(*args): return apply(_core.sortedmatch_setEnvironment, args)
    def __init__(self, *args): 
        this = apply(_core.new_sortedmatch, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.sortedmatch___call__, args)
    __swig_destroy__ = _core.delete_sortedmatch
    __del__ = lambda self : None;
sortedmatch_swigregister = _core.sortedmatch_swigregister
sortedmatch_swigregister(sortedmatch)

class match(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, match, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tattr"] = _core.match_Tattr_set
    __swig_getmethods__["Tattr"] = _core.match_Tattr_get
    __swig_setmethods__["Sattr"] = _core.match_Sattr_set
    __swig_getmethods__["Sattr"] = _core.match_Sattr_get
    def __init__(self, *args): 
        this = apply(_core.new_match, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.match___call__, args)
    __swig_destroy__ = _core.delete_match
    __del__ = lambda self : None;
match_swigregister = _core.match_swigregister
match_swigregister(match)

class pointpoly2(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointpoly2, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, pointpoly2, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.pointpoly2___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_pointpoly2, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_pointpoly2
    __del__ = lambda self : None;
pointpoly2_swigregister = _core.pointpoly2_swigregister
pointpoly2_swigregister(pointpoly2)

class containedby(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, containedby, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, containedby, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.containedby___call__, args)
    def PointInCell(*args): return apply(_core.containedby_PointInCell, args)
    def __init__(self, *args): 
        this = apply(_core.new_containedby, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_containedby
    __del__ = lambda self : None;
containedby_swigregister = _core.containedby_swigregister
containedby_swigregister(containedby)

class fastcontainedby(containedby):
    __swig_setmethods__ = {}
    for _s in [containedby]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastcontainedby, name, value)
    __swig_getmethods__ = {}
    for _s in [containedby]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fastcontainedby, name)
    __repr__ = _swig_repr
    def setEnvironment(*args): return apply(_core.fastcontainedby_setEnvironment, args)
    def __call__(*args): return apply(_core.fastcontainedby___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_fastcontainedby, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_fastcontainedby
    __del__ = lambda self : None;
fastcontainedby_swigregister = _core.fastcontainedby_swigregister
fastcontainedby_swigregister(fastcontainedby)

class contains(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, contains, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, contains, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.contains___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_contains, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_contains
    __del__ = lambda self : None;
contains_swigregister = _core.contains_swigregister
contains_swigregister(contains)

class pointpoly(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointpoly, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, pointpoly, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xs"] = _core.pointpoly_xs_set
    __swig_getmethods__["xs"] = _core.pointpoly_xs_get
    __swig_setmethods__["ys"] = _core.pointpoly_ys_set
    __swig_getmethods__["ys"] = _core.pointpoly_ys_get
    def __call__(*args): return apply(_core.pointpoly___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_pointpoly, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_pointpoly
    __del__ = lambda self : None;
pointpoly_swigregister = _core.pointpoly_swigregister
pointpoly_swigregister(pointpoly)

class inverse_pointer(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, inverse_pointer, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, inverse_pointer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.inverse_pointer_attr_set
    __swig_getmethods__["attr"] = _core.inverse_pointer_attr_get
    def __init__(self, *args): 
        this = apply(_core.new_inverse_pointer, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.inverse_pointer___call__, args)
    __swig_destroy__ = _core.delete_inverse_pointer
    __del__ = lambda self : None;
inverse_pointer_swigregister = _core.inverse_pointer_swigregister
inverse_pointer_swigregister(inverse_pointer)

class bypointer(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bypointer, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, bypointer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.bypointer_attr_set
    __swig_getmethods__["attr"] = _core.bypointer_attr_get
    def __init__(self, *args): 
        this = apply(_core.new_bypointer, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.bypointer___call__, args)
    __swig_destroy__ = _core.delete_bypointer
    __del__ = lambda self : None;
bypointer_swigregister = _core.bypointer_swigregister
bypointer_swigregister(bypointer)

class unify(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unify, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unify, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.unify___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_unify, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_unify
    __del__ = lambda self : None;
unify_swigregister = _core.unify_swigregister
unify_swigregister(unify)

class ident(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ident, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ident, name)
    __repr__ = _swig_repr
    def __call__(*args): return apply(_core.ident___call__, args)
    def __init__(self, *args): 
        this = apply(_core.new_ident, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ident
    __del__ = lambda self : None;
ident_swigregister = _core.ident_swigregister
ident_swigregister(ident)

class interpolate1Dint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate1Dint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate1Dint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_interpolate1Dint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.interpolate1Dint___call__, args)
    def interp(*args): return apply(_core.interpolate1Dint_interp, args)
    def getOutScheme(*args): return apply(_core.interpolate1Dint_getOutScheme, args)
    __swig_destroy__ = _core.delete_interpolate1Dint
    __del__ = lambda self : None;
interpolate1Dint_swigregister = _core.interpolate1Dint_swigregister
interpolate1Dint_swigregister(interpolate1Dint)

class interpolate1Dfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate1Dfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate1Dfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_interpolate1Dfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.interpolate1Dfloat___call__, args)
    def interp(*args): return apply(_core.interpolate1Dfloat_interp, args)
    def getOutScheme(*args): return apply(_core.interpolate1Dfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_interpolate1Dfloat
    __del__ = lambda self : None;
interpolate1Dfloat_swigregister = _core.interpolate1Dfloat_swigregister
interpolate1Dfloat_swigregister(interpolate1Dfloat)

class avgint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, avgint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, avgint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_avgint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.avgint___call__, args)
    def average(*args): return apply(_core.avgint_average, args)
    def getOutScheme(*args): return apply(_core.avgint_getOutScheme, args)
    __swig_destroy__ = _core.delete_avgint
    __del__ = lambda self : None;
avgint_swigregister = _core.avgint_swigregister
avgint_swigregister(avgint)

class avgfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, avgfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, avgfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_avgfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.avgfloat___call__, args)
    def average(*args): return apply(_core.avgfloat_average, args)
    def getOutScheme(*args): return apply(_core.avgfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_avgfloat
    __del__ = lambda self : None;
avgfloat_swigregister = _core.avgfloat_swigregister
avgfloat_swigregister(avgfloat)

class sumint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sumint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sumint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_sumint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.sumint___call__, args)
    def sum(*args): return apply(_core.sumint_sum, args)
    def getOutScheme(*args): return apply(_core.sumint_getOutScheme, args)
    __swig_destroy__ = _core.delete_sumint
    __del__ = lambda self : None;
sumint_swigregister = _core.sumint_swigregister
sumint_swigregister(sumint)

class sumfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sumfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sumfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_sumfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.sumfloat___call__, args)
    def sum(*args): return apply(_core.sumfloat_sum, args)
    def getOutScheme(*args): return apply(_core.sumfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_sumfloat
    __del__ = lambda self : None;
sumfloat_swigregister = _core.sumfloat_swigregister
sumfloat_swigregister(sumfloat)

class trigradint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigradint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, trigradint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_trigradint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.trigradint___call__, args)
    def trigrad(*args): return apply(_core.trigradint_trigrad, args)
    def getOutScheme(*args): return apply(_core.trigradint_getOutScheme, args)
    __swig_destroy__ = _core.delete_trigradint
    __del__ = lambda self : None;
trigradint_swigregister = _core.trigradint_swigregister
trigradint_swigregister(trigradint)

class trigradfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigradfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, trigradfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_trigradfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.trigradfloat___call__, args)
    def trigrad(*args): return apply(_core.trigradfloat_trigrad, args)
    def getOutScheme(*args): return apply(_core.trigradfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_trigradfloat
    __del__ = lambda self : None;
trigradfloat_swigregister = _core.trigradfloat_swigregister
trigradfloat_swigregister(trigradfloat)

class grad3Dint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, grad3Dint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, grad3Dint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_grad3Dint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.grad3Dint___call__, args)
    def gradLeastSquares(*args): return apply(_core.grad3Dint_gradLeastSquares, args)
    def getOutScheme(*args): return apply(_core.grad3Dint_getOutScheme, args)
    __swig_destroy__ = _core.delete_grad3Dint
    __del__ = lambda self : None;
grad3Dint_swigregister = _core.grad3Dint_swigregister
grad3Dint_swigregister(grad3Dint)

class grad3Dfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, grad3Dfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, grad3Dfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_grad3Dfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.grad3Dfloat___call__, args)
    def gradLeastSquares(*args): return apply(_core.grad3Dfloat_gradLeastSquares, args)
    def getOutScheme(*args): return apply(_core.grad3Dfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_grad3Dfloat
    __del__ = lambda self : None;
grad3Dfloat_swigregister = _core.grad3Dfloat_swigregister
grad3Dfloat_swigregister(grad3Dfloat)

class gradint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gradint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gradint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_gradint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.gradint___call__, args)
    def gradLeastSquares(*args): return apply(_core.gradint_gradLeastSquares, args)
    def gradnorm(*args): return apply(_core.gradint_gradnorm, args)
    def getOutScheme(*args): return apply(_core.gradint_getOutScheme, args)
    __swig_destroy__ = _core.delete_gradint
    __del__ = lambda self : None;
gradint_swigregister = _core.gradint_swigregister
gradint_swigregister(gradint)

class gradfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gradfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gradfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_gradfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.gradfloat___call__, args)
    def gradLeastSquares(*args): return apply(_core.gradfloat_gradLeastSquares, args)
    def gradnorm(*args): return apply(_core.gradfloat_gradnorm, args)
    def getOutScheme(*args): return apply(_core.gradfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_gradfloat
    __del__ = lambda self : None;
gradfloat_swigregister = _core.gradfloat_swigregister
gradfloat_swigregister(gradfloat)

class minint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, minint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, minint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_minint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.minint___call__, args)
    def min(*args): return apply(_core.minint_min, args)
    def getOutScheme(*args): return apply(_core.minint_getOutScheme, args)
    __swig_destroy__ = _core.delete_minint
    __del__ = lambda self : None;
minint_swigregister = _core.minint_swigregister
minint_swigregister(minint)

class minfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, minfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, minfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_minfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.minfloat___call__, args)
    def min(*args): return apply(_core.minfloat_min, args)
    def getOutScheme(*args): return apply(_core.minfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_minfloat
    __del__ = lambda self : None;
minfloat_swigregister = _core.minfloat_swigregister
minfloat_swigregister(minfloat)

class maxint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, maxint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, maxint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_maxint, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.maxint___call__, args)
    def max(*args): return apply(_core.maxint_max, args)
    def getOutScheme(*args): return apply(_core.maxint_getOutScheme, args)
    __swig_destroy__ = _core.delete_maxint
    __del__ = lambda self : None;
maxint_swigregister = _core.maxint_swigregister
maxint_swigregister(maxint)

class maxfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, maxfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, maxfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_maxfloat, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.maxfloat___call__, args)
    def max(*args): return apply(_core.maxfloat_max, args)
    def getOutScheme(*args): return apply(_core.maxfloat_getOutScheme, args)
    __swig_destroy__ = _core.delete_maxfloat
    __del__ = lambda self : None;
maxfloat_swigregister = _core.maxfloat_swigregister
maxfloat_swigregister(maxfloat)

class intunion(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, intunion, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, intunion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vecattr"] = _core.intunion_vecattr_set
    __swig_getmethods__["vecattr"] = _core.intunion_vecattr_get
    __swig_setmethods__["valattr"] = _core.intunion_valattr_set
    __swig_getmethods__["valattr"] = _core.intunion_valattr_get
    __swig_setmethods__["type"] = _core.intunion_type_set
    __swig_getmethods__["type"] = _core.intunion_type_get
    def __init__(self, *args): 
        this = apply(_core.new_intunion, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.intunion___call__, args)
    def getOutScheme(*args): return apply(_core.intunion_getOutScheme, args)
    __swig_destroy__ = _core.delete_intunion
    __del__ = lambda self : None;
intunion_swigregister = _core.intunion_swigregister
intunion_swigregister(intunion)

class floatunion(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatunion, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, floatunion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vecattr"] = _core.floatunion_vecattr_set
    __swig_getmethods__["vecattr"] = _core.floatunion_vecattr_get
    __swig_setmethods__["valattr"] = _core.floatunion_valattr_set
    __swig_getmethods__["valattr"] = _core.floatunion_valattr_get
    __swig_setmethods__["type"] = _core.floatunion_type_set
    __swig_getmethods__["type"] = _core.floatunion_type_get
    def __init__(self, *args): 
        this = apply(_core.new_floatunion, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.floatunion___call__, args)
    def getOutScheme(*args): return apply(_core.floatunion_getOutScheme, args)
    __swig_destroy__ = _core.delete_floatunion
    __del__ = lambda self : None;
floatunion_swigregister = _core.floatunion_swigregister
floatunion_swigregister(floatunion)

class intmember(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, intmember, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, intmember, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item_attr"] = _core.intmember_item_attr_set
    __swig_getmethods__["item_attr"] = _core.intmember_item_attr_get
    __swig_setmethods__["set_attr"] = _core.intmember_set_attr_set
    __swig_getmethods__["set_attr"] = _core.intmember_set_attr_get
    __swig_setmethods__["set_value_attr"] = _core.intmember_set_value_attr_set
    __swig_getmethods__["set_value_attr"] = _core.intmember_set_value_attr_get
    def __init__(self, *args): 
        this = apply(_core.new_intmember, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.intmember___call__, args)
    __swig_destroy__ = _core.delete_intmember
    __del__ = lambda self : None;
intmember_swigregister = _core.intmember_swigregister
intmember_swigregister(intmember)

class floatmember(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatmember, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, floatmember, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item_attr"] = _core.floatmember_item_attr_set
    __swig_getmethods__["item_attr"] = _core.floatmember_item_attr_get
    __swig_setmethods__["set_attr"] = _core.floatmember_set_attr_set
    __swig_getmethods__["set_attr"] = _core.floatmember_set_attr_get
    __swig_setmethods__["set_value_attr"] = _core.floatmember_set_value_attr_set
    __swig_getmethods__["set_value_attr"] = _core.floatmember_set_value_attr_get
    def __init__(self, *args): 
        this = apply(_core.new_floatmember, args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(*args): return apply(_core.floatmember___call__, args)
    __swig_destroy__ = _core.delete_floatmember
    __del__ = lambda self : None;
floatmember_swigregister = _core.floatmember_swigregister
floatmember_swigregister(floatmember)

class MergeOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MergeOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_MergeOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.MergeOp_Execute, args)
    __swig_getmethods__["Merge"] = lambda x: _core.MergeOp_Merge
    __swig_destroy__ = _core.delete_MergeOp
    __del__ = lambda self : None;
MergeOp_swigregister = _core.MergeOp_swigregister
MergeOp_swigregister(MergeOp)
MergeOp_Merge = _core.MergeOp_Merge

class SiftOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiftOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiftOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_SiftOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.SiftOp_Execute, args)
    __swig_getmethods__["Sift"] = lambda x: _core.SiftOp_Sift
    __swig_destroy__ = _core.delete_SiftOp
    __del__ = lambda self : None;
SiftOp_swigregister = _core.SiftOp_swigregister
SiftOp_swigregister(SiftOp)
SiftOp_Sift = _core.SiftOp_Sift

VAR = _core.VAR
VAL = _core.VAL
INT = _core.INT
FLOAT = _core.FLOAT
OBJ = _core.OBJ
TUPLE = _core.TUPLE
GRIDFIELD = _core.GRIDFIELD
typeformat = _core.typeformat
typeval = _core.typeval
typesize = _core.typesize
plusplus = _core.plusplus
class Scheme:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scheme, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Scheme, args)
        try: self.this.append(this)
        except: self.this = this
    def addAttribute(*args): return apply(_core.Scheme_addAttribute, args)
    def removeAttribute(*args): return apply(_core.Scheme_removeAttribute, args)
    def clear(*args): return apply(_core.Scheme_clear, args)
    def Subsumes(*args): return apply(_core.Scheme_Subsumes, args)
    def begin(*args): return apply(_core.Scheme_begin, args)
    def end(*args): return apply(_core.Scheme_end, args)
    def size(*args): return apply(_core.Scheme_size, args)
    def bytesize(*args): return apply(_core.Scheme_bytesize, args)
    def byteposition(*args): return apply(_core.Scheme_byteposition, args)
    def getType(*args): return apply(_core.Scheme_getType, args)
    def getPosition(*args): return apply(_core.Scheme_getPosition, args)
    def getAttribute(*args): return apply(_core.Scheme_getAttribute, args)
    def isAttribute(*args): return apply(_core.Scheme_isAttribute, args)
    def __eq__(*args): return apply(_core.Scheme___eq__, args)
    def __ge__(*args): return apply(_core.Scheme___ge__, args)
    def __le__(*args): return apply(_core.Scheme___le__, args)
    def formatOf(*args): return apply(_core.Scheme_formatOf, args)
    def asString(*args): return apply(_core.Scheme_asString, args)
    def PrintTo(*args): return apply(_core.Scheme_PrintTo, args)
    def show(*args): return apply(_core.Scheme_show, args)
    __swig_destroy__ = _core.delete_Scheme
    __del__ = lambda self : None;
Scheme_swigregister = _core.Scheme_swigregister
Scheme_swigregister(Scheme)

class Tuple:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_Tuple, args)
        try: self.this.append(this)
        except: self.this = this
    def getScheme(*args): return apply(_core.Tuple_getScheme, args)
    def get(*args): return apply(_core.Tuple_get, args)
    def set(*args): return apply(_core.Tuple_set, args)
    def getAttribute(*args): return apply(_core.Tuple_getAttribute, args)
    def size(*args): return apply(_core.Tuple_size, args)
    def asString(*args): return apply(_core.Tuple_asString, args)
    def show(*args): return apply(_core.Tuple_show, args)
    def PrintTo(*args): return apply(_core.Tuple_PrintTo, args)
    def bytesize(*args): return apply(_core.Tuple_bytesize, args)
    def Next(*args): return apply(_core.Tuple_Next, args)
    def Allocate(*args): return apply(_core.Tuple_Allocate, args)
    def assign(*args): return apply(_core.Tuple_assign, args)
    def copy(*args): return apply(_core.Tuple_copy, args)
    def isNull(*args): return apply(_core.Tuple_isNull, args)
    def Read(*args): return apply(_core.Tuple_Read, args)
    def Parse(*args): return apply(_core.Tuple_Parse, args)
    def Covers(*args): return apply(_core.Tuple_Covers, args)
    def CoveredBy(*args): return apply(_core.Tuple_CoveredBy, args)
    __swig_destroy__ = _core.delete_Tuple
    __del__ = lambda self : None;
Tuple_swigregister = _core.Tuple_swigregister
Tuple_swigregister(Tuple)

class ProjectOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ProjectOp, args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(*args): return apply(_core.ProjectOp_Execute, args)
    __swig_getmethods__["Project"] = lambda x: _core.ProjectOp_Project
    __swig_destroy__ = _core.delete_ProjectOp
    __del__ = lambda self : None;
ProjectOp_swigregister = _core.ProjectOp_swigregister
ProjectOp_swigregister(ProjectOp)
ProjectOp_Project = _core.ProjectOp_Project

class OneGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_OneGrid, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_OneGrid
    __del__ = lambda self : None;
OneGrid_swigregister = _core.OneGrid_swigregister
OneGrid_swigregister(OneGrid)

class ZeroGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_ZeroGrid, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ZeroGrid
    __del__ = lambda self : None;
ZeroGrid_swigregister = _core.ZeroGrid_swigregister
ZeroGrid_swigregister(ZeroGrid)

class TupleFunction:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TupleFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TupleFunction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_TupleFunction, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_TupleFunction
    __del__ = lambda self : None;
    def Parse(*args): return apply(_core.TupleFunction_Parse, args)
    def ReturnType(*args): return apply(_core.TupleFunction_ReturnType, args)
    def InputType(*args): return apply(_core.TupleFunction_InputType, args)
    def Eval(*args): return apply(_core.TupleFunction_Eval, args)
TupleFunction_swigregister = _core.TupleFunction_swigregister
TupleFunction_swigregister(TupleFunction)

class SpecializedTupleFunction(TupleFunction):
    __swig_setmethods__ = {}
    for _s in [TupleFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecializedTupleFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [TupleFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecializedTupleFunction, name)
    __repr__ = _swig_repr
    def SpecializeFor(*args): return apply(_core.SpecializedTupleFunction_SpecializeFor, args)
    def Eval(*args): return apply(_core.SpecializedTupleFunction_Eval, args)
    def __init__(self, *args): 
        this = apply(_core.new_SpecializedTupleFunction, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_SpecializedTupleFunction
    __del__ = lambda self : None;
SpecializedTupleFunction_swigregister = _core.SpecializedTupleFunction_swigregister
SpecializedTupleFunction_swigregister(SpecializedTupleFunction)

class nullstream:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nullstream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nullstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = apply(_core.new_nullstream, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_nullstream
    __del__ = lambda self : None;
nullstream_swigregister = _core.nullstream_swigregister
nullstream_swigregister(nullstream)

split = _core.split
remove_whitespace = _core.remove_whitespace
same = _core.same
Fatal = _core.Fatal
Warning = _core.Warning
tab = _core.tab
ELIO_OK = _core.ELIO_OK
ELIO_ERR = _core.ELIO_ERR
ELIO_FOPEN_ERR = _core.ELIO_FOPEN_ERR
ELIO_FSEEK_ERR = _core.ELIO_FSEEK_ERR
ELIO_FREAD_ERR = _core.ELIO_FREAD_ERR
ELIO_FWRITE_ERR = _core.ELIO_FWRITE_ERR
ELIO_FCLOSE_ERR = _core.ELIO_FCLOSE_ERR
ELIO_FTELL_ERR = _core.ELIO_FTELL_ERR
COMPRESS_NONE = _core.COMPRESS_NONE
COMPRESS_C16 = _core.COMPRESS_C16
ZLEVEL = _core.ZLEVEL
SIGMA_S0 = _core.SIGMA_S0
SIGMA_S1 = _core.SIGMA_S1
SIGMA_S2 = _core.SIGMA_S2
SIGMA_S3 = _core.SIGMA_S3
SIGMA_S4 = _core.SIGMA_S4
MISSING_DATA = _core.MISSING_DATA
class ElcircHeader:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _core.ElcircHeader_magic_set
    __swig_getmethods__["magic"] = _core.ElcircHeader_magic_get
    __swig_setmethods__["version"] = _core.ElcircHeader_version_set
    __swig_getmethods__["version"] = _core.ElcircHeader_version_get
    __swig_setmethods__["start_time"] = _core.ElcircHeader_start_time_set
    __swig_getmethods__["start_time"] = _core.ElcircHeader_start_time_get
    __swig_setmethods__["variable_nm"] = _core.ElcircHeader_variable_nm_set
    __swig_getmethods__["variable_nm"] = _core.ElcircHeader_variable_nm_get
    __swig_setmethods__["variable_dim"] = _core.ElcircHeader_variable_dim_set
    __swig_getmethods__["variable_dim"] = _core.ElcircHeader_variable_dim_get
    __swig_setmethods__["v"] = _core.ElcircHeader_v_set
    __swig_getmethods__["v"] = _core.ElcircHeader_v_get
    __swig_setmethods__["compress"] = _core.ElcircHeader_compress_set
    __swig_getmethods__["compress"] = _core.ElcircHeader_compress_get
    __swig_setmethods__["a"] = _core.ElcircHeader_a_set
    __swig_getmethods__["a"] = _core.ElcircHeader_a_get
    __swig_setmethods__["b"] = _core.ElcircHeader_b_set
    __swig_getmethods__["b"] = _core.ElcircHeader_b_get
    __swig_setmethods__["nsteps"] = _core.ElcircHeader_nsteps_set
    __swig_getmethods__["nsteps"] = _core.ElcircHeader_nsteps_get
    __swig_setmethods__["timestep"] = _core.ElcircHeader_timestep_set
    __swig_getmethods__["timestep"] = _core.ElcircHeader_timestep_get
    __swig_setmethods__["skip"] = _core.ElcircHeader_skip_set
    __swig_getmethods__["skip"] = _core.ElcircHeader_skip_get
    __swig_setmethods__["ivs"] = _core.ElcircHeader_ivs_set
    __swig_getmethods__["ivs"] = _core.ElcircHeader_ivs_get
    __swig_setmethods__["i23d"] = _core.ElcircHeader_i23d_set
    __swig_getmethods__["i23d"] = _core.ElcircHeader_i23d_get
    __swig_setmethods__["vpos"] = _core.ElcircHeader_vpos_set
    __swig_getmethods__["vpos"] = _core.ElcircHeader_vpos_get
    __swig_setmethods__["zmsl"] = _core.ElcircHeader_zmsl_set
    __swig_getmethods__["zmsl"] = _core.ElcircHeader_zmsl_get
    __swig_setmethods__["ivcor"] = _core.ElcircHeader_ivcor_set
    __swig_getmethods__["ivcor"] = _core.ElcircHeader_ivcor_get
    __swig_setmethods__["h0"] = _core.ElcircHeader_h0_set
    __swig_getmethods__["h0"] = _core.ElcircHeader_h0_get
    __swig_setmethods__["hs"] = _core.ElcircHeader_hs_set
    __swig_getmethods__["hs"] = _core.ElcircHeader_hs_get
    __swig_setmethods__["hc"] = _core.ElcircHeader_hc_set
    __swig_getmethods__["hc"] = _core.ElcircHeader_hc_get
    __swig_setmethods__["thetab"] = _core.ElcircHeader_thetab_set
    __swig_getmethods__["thetab"] = _core.ElcircHeader_thetab_get
    __swig_setmethods__["thetaf"] = _core.ElcircHeader_thetaf_set
    __swig_getmethods__["thetaf"] = _core.ElcircHeader_thetaf_get
    __swig_setmethods__["nvrt"] = _core.ElcircHeader_nvrt_set
    __swig_getmethods__["nvrt"] = _core.ElcircHeader_nvrt_get
    __swig_setmethods__["kz"] = _core.ElcircHeader_kz_set
    __swig_getmethods__["kz"] = _core.ElcircHeader_kz_get
    __swig_setmethods__["ks"] = _core.ElcircHeader_ks_set
    __swig_getmethods__["ks"] = _core.ElcircHeader_ks_get
    __swig_setmethods__["nitems"] = _core.ElcircHeader_nitems_set
    __swig_getmethods__["nitems"] = _core.ElcircHeader_nitems_get
    __swig_setmethods__["hsize"] = _core.ElcircHeader_hsize_set
    __swig_getmethods__["hsize"] = _core.ElcircHeader_hsize_get
    __swig_setmethods__["ssize"] = _core.ElcircHeader_ssize_set
    __swig_getmethods__["ssize"] = _core.ElcircHeader_ssize_get
    __swig_setmethods__["sigma"] = _core.ElcircHeader_sigma_set
    __swig_getmethods__["sigma"] = _core.ElcircHeader_sigma_get
    __swig_setmethods__["zcor"] = _core.ElcircHeader_zcor_set
    __swig_getmethods__["zcor"] = _core.ElcircHeader_zcor_get
    __swig_setmethods__["np"] = _core.ElcircHeader_np_set
    __swig_getmethods__["np"] = _core.ElcircHeader_np_get
    __swig_setmethods__["ne"] = _core.ElcircHeader_ne_set
    __swig_getmethods__["ne"] = _core.ElcircHeader_ne_get
    __swig_setmethods__["x"] = _core.ElcircHeader_x_set
    __swig_getmethods__["x"] = _core.ElcircHeader_x_get
    __swig_setmethods__["y"] = _core.ElcircHeader_y_set
    __swig_getmethods__["y"] = _core.ElcircHeader_y_get
    __swig_setmethods__["d"] = _core.ElcircHeader_d_set
    __swig_getmethods__["d"] = _core.ElcircHeader_d_get
    __swig_setmethods__["bi"] = _core.ElcircHeader_bi_set
    __swig_getmethods__["bi"] = _core.ElcircHeader_bi_get
    __swig_setmethods__["no"] = _core.ElcircHeader_no_set
    __swig_getmethods__["no"] = _core.ElcircHeader_no_get
    __swig_setmethods__["etype"] = _core.ElcircHeader_etype_set
    __swig_getmethods__["etype"] = _core.ElcircHeader_etype_get
    __swig_setmethods__["icon"] = _core.ElcircHeader_icon_set
    __swig_getmethods__["icon"] = _core.ElcircHeader_icon_get
    def __init__(self, *args): 
        this = apply(_core.new_ElcircHeader, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircHeader
    __del__ = lambda self : None;
ElcircHeader_swigregister = _core.ElcircHeader_swigregister
ElcircHeader_swigregister(ElcircHeader)

class ElcircTimeStep:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircTimeStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircTimeStep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _core.ElcircTimeStep_t_set
    __swig_getmethods__["t"] = _core.ElcircTimeStep_t_get
    __swig_setmethods__["it"] = _core.ElcircTimeStep_it_set
    __swig_getmethods__["it"] = _core.ElcircTimeStep_it_get
    __swig_setmethods__["surfind"] = _core.ElcircTimeStep_surfind_set
    __swig_getmethods__["surfind"] = _core.ElcircTimeStep_surfind_get
    __swig_setmethods__["e"] = _core.ElcircTimeStep_e_set
    __swig_getmethods__["e"] = _core.ElcircTimeStep_e_get
    __swig_setmethods__["d"] = _core.ElcircTimeStep_d_set
    __swig_getmethods__["d"] = _core.ElcircTimeStep_d_get
    def __init__(self, *args): 
        this = apply(_core.new_ElcircTimeStep, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircTimeStep
    __del__ = lambda self : None;
ElcircTimeStep_swigregister = _core.ElcircTimeStep_swigregister
ElcircTimeStep_swigregister(ElcircTimeStep)

class ElcircTimeStepAtNode:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircTimeStepAtNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircTimeStepAtNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _core.ElcircTimeStepAtNode_t_set
    __swig_getmethods__["t"] = _core.ElcircTimeStepAtNode_t_get
    __swig_setmethods__["it"] = _core.ElcircTimeStepAtNode_it_set
    __swig_getmethods__["it"] = _core.ElcircTimeStepAtNode_it_get
    __swig_setmethods__["istart"] = _core.ElcircTimeStepAtNode_istart_set
    __swig_getmethods__["istart"] = _core.ElcircTimeStepAtNode_istart_get
    __swig_setmethods__["istop"] = _core.ElcircTimeStepAtNode_istop_set
    __swig_getmethods__["istop"] = _core.ElcircTimeStepAtNode_istop_get
    __swig_setmethods__["npts"] = _core.ElcircTimeStepAtNode_npts_set
    __swig_getmethods__["npts"] = _core.ElcircTimeStepAtNode_npts_get
    __swig_setmethods__["d"] = _core.ElcircTimeStepAtNode_d_set
    __swig_getmethods__["d"] = _core.ElcircTimeStepAtNode_d_get
    def __init__(self, *args): 
        this = apply(_core.new_ElcircTimeStepAtNode, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircTimeStepAtNode
    __del__ = lambda self : None;
ElcircTimeStepAtNode_swigregister = _core.ElcircTimeStepAtNode_swigregister
ElcircTimeStepAtNode_swigregister(ElcircTimeStepAtNode)

class ElioGrid:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElioGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElioGrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ne"] = _core.ElioGrid_ne_set
    __swig_getmethods__["ne"] = _core.ElioGrid_ne_get
    __swig_setmethods__["np"] = _core.ElioGrid_np_set
    __swig_getmethods__["np"] = _core.ElioGrid_np_get
    __swig_setmethods__["x"] = _core.ElioGrid_x_set
    __swig_getmethods__["x"] = _core.ElioGrid_x_get
    __swig_setmethods__["y"] = _core.ElioGrid_y_set
    __swig_getmethods__["y"] = _core.ElioGrid_y_get
    __swig_setmethods__["d"] = _core.ElioGrid_d_set
    __swig_getmethods__["d"] = _core.ElioGrid_d_get
    __swig_setmethods__["etype"] = _core.ElioGrid_etype_set
    __swig_getmethods__["etype"] = _core.ElioGrid_etype_get
    __swig_setmethods__["icon"] = _core.ElioGrid_icon_set
    __swig_getmethods__["icon"] = _core.ElioGrid_icon_get
    def __init__(self, *args): 
        this = apply(_core.new_ElioGrid, args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElioGrid
    __del__ = lambda self : None;
ElioGrid_swigregister = _core.ElioGrid_swigregister
ElioGrid_swigregister(ElioGrid)

ElioReadGrid = _core.ElioReadGrid
ElioFindElementInGrid = _core.ElioFindElementInGrid
ElioGetCoefficientsGrid = _core.ElioGetCoefficientsGrid
ElioGridFindNearestNode = _core.ElioGridFindNearestNode
ElioFindNearestNode = _core.ElioFindNearestNode
ElioGetGridElementCenter = _core.ElioGetGridElementCenter
ElioGetGridElementArea = _core.ElioGetGridElementArea
ElioGetHeader = _core.ElioGetHeader
ElioAllocateHeader = _core.ElioAllocateHeader
ElioFreeHeader = _core.ElioFreeHeader
ElioPrintHeader = _core.ElioPrintHeader
ElioGetNStepsInFile = _core.ElioGetNStepsInFile
ElioGetTimeStep = _core.ElioGetTimeStep
ElioFreeTimeStep = _core.ElioFreeTimeStep
ElioAllocateTimeStep = _core.ElioAllocateTimeStep
ElioGetNode = _core.ElioGetNode
ElioGetNodeOld = _core.ElioGetNodeOld
ElioExtractNode = _core.ElioExtractNode
ElioGetXYData = _core.ElioGetXYData
ElioGetXYData2 = _core.ElioGetXYData2
ElioInterpTimeStep = _core.ElioInterpTimeStep
ElioGetPoint = _core.ElioGetPoint
ElioMakeScalarsOld = _core.ElioMakeScalarsOld
ElioMakeVectorsOld = _core.ElioMakeVectorsOld
ElioExtractGrid = _core.ElioExtractGrid
ElioExtractData = _core.ElioExtractData
ElioIntersectToLeft = _core.ElioIntersectToLeft
ElioInPolygon = _core.ElioInPolygon
ElioFindElementXY = _core.ElioFindElementXY
ElioInsideElement = _core.ElioInsideElement
ElioInsideElement4 = _core.ElioInsideElement4
ElioEvalFlowXY = _core.ElioEvalFlowXY
ElioEvalScalarXY = _core.ElioEvalScalarXY
ElioEval = _core.ElioEval
ElioGetCoefficients = _core.ElioGetCoefficients
ibilinear = _core.ibilinear
ElioGetZPos = _core.ElioGetZPos
ElioGetSurfaceHeader = _core.ElioGetSurfaceHeader
ElioGetSurfaceStep = _core.ElioGetSurfaceStep
ElioGetBottomHeader = _core.ElioGetBottomHeader
ElioGetBottomStep = _core.ElioGetBottomStep
ElioGetTransectHeader = _core.ElioGetTransectHeader
ElioGetTransectStep = _core.ElioGetTransectStep
ElioGetLevelHeader = _core.ElioGetLevelHeader
ElioGetLevelStep = _core.ElioGetLevelStep
ElioGetZLevelHeader = _core.ElioGetZLevelHeader
ElioGetZLevelStep = _core.ElioGetZLevelStep
ElioPutHeader = _core.ElioPutHeader
ElioPutTimeStep = _core.ElioPutTimeStep
ElioPutHeaderOld = _core.ElioPutHeaderOld
ElioPutTimeStepOld = _core.ElioPutTimeStepOld
ElioGetFileType = _core.ElioGetFileType
ElioGetElementArea = _core.ElioGetElementArea
ElioMinMax = _core.ElioMinMax
ElioIntMin = _core.ElioIntMin
ElioIntMax = _core.ElioIntMax
ElioFindIndex = _core.ElioFindIndex
ElioInterpolateArray = _core.ElioInterpolateArray
ElioInterpolate = _core.ElioInterpolate
ElioInterpolateAtIndex = _core.ElioInterpolateAtIndex
ElioGetDay = _core.ElioGetDay
ElioGetYearDay = _core.ElioGetYearDay
ElioSetCorieTime = _core.ElioSetCorieTime


