# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_core', [dirname(__file__)])
        except ImportError:
            import _core
            return _core
        if fp is not None:
            try:
                _mod = imp.load_module('_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _core = swig_import_helper()
    del swig_import_helper
else:
    import _core
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _core.SwigPyIterator_value(self)
    def incr(self, n = 1): return _core.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _core.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _core.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _core.SwigPyIterator_equal(self, *args)
    def copy(self): return _core.SwigPyIterator_copy(self)
    def next(self): return _core.SwigPyIterator_next(self)
    def __next__(self): return _core.SwigPyIterator___next__(self)
    def previous(self): return _core.SwigPyIterator_previous(self)
    def advance(self, *args): return _core.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _core.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _core.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _core.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _core.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _core.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _core.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _core.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _core.vectori___nonzero__(self)
    def __bool__(self): return _core.vectori___bool__(self)
    def __len__(self): return _core.vectori___len__(self)
    def pop(self): return _core.vectori_pop(self)
    def __getslice__(self, *args): return _core.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _core.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _core.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _core.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _core.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _core.vectori___setitem__(self, *args)
    def append(self, *args): return _core.vectori_append(self, *args)
    def empty(self): return _core.vectori_empty(self)
    def size(self): return _core.vectori_size(self)
    def clear(self): return _core.vectori_clear(self)
    def swap(self, *args): return _core.vectori_swap(self, *args)
    def get_allocator(self): return _core.vectori_get_allocator(self)
    def begin(self): return _core.vectori_begin(self)
    def end(self): return _core.vectori_end(self)
    def rbegin(self): return _core.vectori_rbegin(self)
    def rend(self): return _core.vectori_rend(self)
    def pop_back(self): return _core.vectori_pop_back(self)
    def erase(self, *args): return _core.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _core.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _core.vectori_push_back(self, *args)
    def front(self): return _core.vectori_front(self)
    def back(self): return _core.vectori_back(self)
    def assign(self, *args): return _core.vectori_assign(self, *args)
    def resize(self, *args): return _core.vectori_resize(self, *args)
    def insert(self, *args): return _core.vectori_insert(self, *args)
    def reserve(self, *args): return _core.vectori_reserve(self, *args)
    def capacity(self): return _core.vectori_capacity(self)
    __swig_destroy__ = _core.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _core.vectori_swigregister
vectori_swigregister(vectori)

class vectord:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _core.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _core.vectord___nonzero__(self)
    def __bool__(self): return _core.vectord___bool__(self)
    def __len__(self): return _core.vectord___len__(self)
    def pop(self): return _core.vectord_pop(self)
    def __getslice__(self, *args): return _core.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _core.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _core.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _core.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _core.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _core.vectord___setitem__(self, *args)
    def append(self, *args): return _core.vectord_append(self, *args)
    def empty(self): return _core.vectord_empty(self)
    def size(self): return _core.vectord_size(self)
    def clear(self): return _core.vectord_clear(self)
    def swap(self, *args): return _core.vectord_swap(self, *args)
    def get_allocator(self): return _core.vectord_get_allocator(self)
    def begin(self): return _core.vectord_begin(self)
    def end(self): return _core.vectord_end(self)
    def rbegin(self): return _core.vectord_rbegin(self)
    def rend(self): return _core.vectord_rend(self)
    def pop_back(self): return _core.vectord_pop_back(self)
    def erase(self, *args): return _core.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _core.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _core.vectord_push_back(self, *args)
    def front(self): return _core.vectord_front(self)
    def back(self): return _core.vectord_back(self)
    def assign(self, *args): return _core.vectord_assign(self, *args)
    def resize(self, *args): return _core.vectord_resize(self, *args)
    def insert(self, *args): return _core.vectord_insert(self, *args)
    def reserve(self, *args): return _core.vectord_reserve(self, *args)
    def capacity(self): return _core.vectord_capacity(self)
    __swig_destroy__ = _core.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _core.vectord_swigregister
vectord_swigregister(vectord)

class vectorS:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorS, name)
    __repr__ = _swig_repr
    def iterator(self): return _core.vectorS_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _core.vectorS___nonzero__(self)
    def __bool__(self): return _core.vectorS___bool__(self)
    def __len__(self): return _core.vectorS___len__(self)
    def pop(self): return _core.vectorS_pop(self)
    def __getslice__(self, *args): return _core.vectorS___getslice__(self, *args)
    def __setslice__(self, *args): return _core.vectorS___setslice__(self, *args)
    def __delslice__(self, *args): return _core.vectorS___delslice__(self, *args)
    def __delitem__(self, *args): return _core.vectorS___delitem__(self, *args)
    def __getitem__(self, *args): return _core.vectorS___getitem__(self, *args)
    def __setitem__(self, *args): return _core.vectorS___setitem__(self, *args)
    def append(self, *args): return _core.vectorS_append(self, *args)
    def empty(self): return _core.vectorS_empty(self)
    def size(self): return _core.vectorS_size(self)
    def clear(self): return _core.vectorS_clear(self)
    def swap(self, *args): return _core.vectorS_swap(self, *args)
    def get_allocator(self): return _core.vectorS_get_allocator(self)
    def begin(self): return _core.vectorS_begin(self)
    def end(self): return _core.vectorS_end(self)
    def rbegin(self): return _core.vectorS_rbegin(self)
    def rend(self): return _core.vectorS_rend(self)
    def pop_back(self): return _core.vectorS_pop_back(self)
    def erase(self, *args): return _core.vectorS_erase(self, *args)
    def __init__(self, *args): 
        this = _core.new_vectorS(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _core.vectorS_push_back(self, *args)
    def front(self): return _core.vectorS_front(self)
    def back(self): return _core.vectorS_back(self)
    def assign(self, *args): return _core.vectorS_assign(self, *args)
    def resize(self, *args): return _core.vectorS_resize(self, *args)
    def insert(self, *args): return _core.vectorS_insert(self, *args)
    def reserve(self, *args): return _core.vectorS_reserve(self, *args)
    def capacity(self): return _core.vectorS_capacity(self)
    __swig_destroy__ = _core.delete_vectorS
    __del__ = lambda self : None;
vectorS_swigregister = _core.vectorS_swigregister
vectorS_swigregister(vectorS)


def derefFloat(*args):
  return _core.derefFloat(*args)
derefFloat = _core.derefFloat

def derefInt(*args):
  return _core.derefInt(*args)
derefInt = _core.derefInt

def derefPyObject(*args):
  return _core.derefPyObject(*args)
derefPyObject = _core.derefPyObject

def derefPyString(*args):
  return _core.derefPyString(*args)
derefPyString = _core.derefPyString

def derefString(*args):
  return _core.derefString(*args)
derefString = _core.derefString

def asPyObject(*args):
  return _core.asPyObject(*args)
asPyObject = _core.asPyObject

def asPyString(*args):
  return _core.asPyString(*args)
asPyString = _core.asPyString

def asUnTypedPtr(*args):
  return _core.asUnTypedPtr(*args)
asUnTypedPtr = _core.asUnTypedPtr

def print_array(*args):
  return _core.print_array(*args)
print_array = _core.print_array

def testsign(*args):
  return _core.testsign(*args)
testsign = _core.testsign
class Object:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_Object()
        try: self.this.append(this)
        except: self.this = this
    def ref(self): return _core.Object_ref(self)
    def norefs(self): return _core.Object_norefs(self)
    def unref(self): return _core.Object_unref(self)
    __swig_setmethods__["refcount"] = _core.Object_refcount_set
    __swig_getmethods__["refcount"] = _core.Object_refcount_get
    __swig_destroy__ = _core.delete_Object
    __del__ = lambda self : None;
Object_swigregister = _core.Object_swigregister
Object_swigregister(Object)

class GridFieldOperator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridFieldOperator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridFieldOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_GridFieldOperator
    __del__ = lambda self : None;
    def getResult(self): return _core.GridFieldOperator_getResult(self)
    def Execute(self): return _core.GridFieldOperator_Execute(self)
    def Update(self): return _core.GridFieldOperator_Update(self)
    def clearResult(self): return _core.GridFieldOperator_clearResult(self)
    def Updated(self, *args): return _core.GridFieldOperator_Updated(self, *args)
    def getModTime(self): return _core.GridFieldOperator_getModTime(self)
GridFieldOperator_swigregister = _core.GridFieldOperator_swigregister
GridFieldOperator_swigregister(GridFieldOperator)

class ZeroaryGridFieldOperator(GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroaryGridFieldOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroaryGridFieldOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Updated(self, *args): return _core.ZeroaryGridFieldOperator_Updated(self, *args)
    __swig_destroy__ = _core.delete_ZeroaryGridFieldOperator
    __del__ = lambda self : None;
ZeroaryGridFieldOperator_swigregister = _core.ZeroaryGridFieldOperator_swigregister
ZeroaryGridFieldOperator_swigregister(ZeroaryGridFieldOperator)

class UnaryGridFieldOperator(GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryGridFieldOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryGridFieldOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Updated(self, *args): return _core.UnaryGridFieldOperator_Updated(self, *args)
    def GetPrevious(self): return _core.UnaryGridFieldOperator_GetPrevious(self)
    def SetPrevious(self, *args): return _core.UnaryGridFieldOperator_SetPrevious(self, *args)
    __swig_destroy__ = _core.delete_UnaryGridFieldOperator
    __del__ = lambda self : None;
UnaryGridFieldOperator_swigregister = _core.UnaryGridFieldOperator_swigregister
UnaryGridFieldOperator_swigregister(UnaryGridFieldOperator)

class BinaryGridFieldOperator(GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryGridFieldOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryGridFieldOperator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Updated(self, *args): return _core.BinaryGridFieldOperator_Updated(self, *args)
    def GetLeft(self): return _core.BinaryGridFieldOperator_GetLeft(self)
    def SetLeft(self, *args): return _core.BinaryGridFieldOperator_SetLeft(self, *args)
    def GetRight(self): return _core.BinaryGridFieldOperator_GetRight(self)
    def SetRight(self, *args): return _core.BinaryGridFieldOperator_SetRight(self, *args)
    __swig_destroy__ = _core.delete_BinaryGridFieldOperator
    __del__ = lambda self : None;
BinaryGridFieldOperator_swigregister = _core.BinaryGridFieldOperator_swigregister
BinaryGridFieldOperator_swigregister(BinaryGridFieldOperator)

class RankedDataset(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RankedDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RankedDataset, name)
    __repr__ = _swig_repr
    def SetShape(self, *args): return _core.RankedDataset_SetShape(self, *args)
    def __init__(self, *args): 
        this = _core.new_RankedDataset(*args)
        try: self.this.append(this)
        except: self.this = this
    def Dim(self): return _core.RankedDataset_Dim(self)
    def GetVoidPointer(self, *args): return _core.RankedDataset_GetVoidPointer(self, *args)
    def BeginInt(self, *args): return _core.RankedDataset_BeginInt(self, *args)
    def EndInt(self, *args): return _core.RankedDataset_EndInt(self, *args)
    def BeginFloat(self, *args): return _core.RankedDataset_BeginFloat(self, *args)
    def EndFloat(self, *args): return _core.RankedDataset_EndFloat(self, *args)
    def Clear(self): return _core.RankedDataset_Clear(self)
    def CoerceScheme(self, *args): return _core.RankedDataset_CoerceScheme(self, *args)
    def AddAttribute(self, *args): return _core.RankedDataset_AddAttribute(self, *args)
    def Bind(self, *args): return _core.RankedDataset_Bind(self, *args)
    def unBind(self, *args): return _core.RankedDataset_unBind(self, *args)
    def unref(self): return _core.RankedDataset_unref(self)
    def GetScheme(self, *args): return _core.RankedDataset_GetScheme(self, *args)
    def IsAttribute(self, *args): return _core.RankedDataset_IsAttribute(self, *args)
    def GetAttribute(self, *args): return _core.RankedDataset_GetAttribute(self, *args)
    def RemoveAttribute(self, *args): return _core.RankedDataset_RemoveAttribute(self, *args)
    def GetAttributeValue(self, *args): return _core.RankedDataset_GetAttributeValue(self, *args)
    def GetFloatAttributeValue(self, *args): return _core.RankedDataset_GetFloatAttributeValue(self, *args)
    def GetIntAttributeValue(self, *args): return _core.RankedDataset_GetIntAttributeValue(self, *args)
    def Arity(self, *args): return _core.RankedDataset_Arity(self, *args)
    def Size(self, *args): return _core.RankedDataset_Size(self, *args)
    def MaxRank(self): return _core.RankedDataset_MaxRank(self)
    def Apply(self, *args): return _core.RankedDataset_Apply(self, *args)
    def GetDataset(self, *args): return _core.RankedDataset_GetDataset(self, *args)
    def Zip(self, *args): return _core.RankedDataset_Zip(self, *args)
    def PrintTo(self, *args): return _core.RankedDataset_PrintTo(self, *args)
    __swig_destroy__ = _core.delete_RankedDataset
    __del__ = lambda self : None;
RankedDataset_swigregister = _core.RankedDataset_swigregister
RankedDataset_swigregister(RankedDataset)

class Dataset:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Dataset(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Dataset
    __del__ = lambda self : None;
    def AddAttribute(self, *args): return _core.Dataset_AddAttribute(self, *args)
    def RemoveAttribute(self, *args): return _core.Dataset_RemoveAttribute(self, *args)
    def Zip(self, *args): return _core.Dataset_Zip(self, *args)
    def Clear(self): return _core.Dataset_Clear(self)
    def CoerceScheme(self, *args): return _core.Dataset_CoerceScheme(self, *args)
    def Apply(self, *args): return _core.Dataset_Apply(self, *args)
    def recordOrdinals(self, *args): return _core.Dataset_recordOrdinals(self, *args)
    def FilterBy(self, *args): return _core.Dataset_FilterBy(self, *args)
    def BeginInt(self, *args): return _core.Dataset_BeginInt(self, *args)
    def EndInt(self, *args): return _core.Dataset_EndInt(self, *args)
    def BeginFloat(self, *args): return _core.Dataset_BeginFloat(self, *args)
    def EndFloat(self, *args): return _core.Dataset_EndFloat(self, *args)
    def IsEmpty(self): return _core.Dataset_IsEmpty(self)
    def IsAttribute(self, *args): return _core.Dataset_IsAttribute(self, *args)
    def GetAttribute(self, *args): return _core.Dataset_GetAttribute(self, *args)
    def GetVoidPointer(self, *args): return _core.Dataset_GetVoidPointer(self, *args)
    def GetAttributeVal(self, *args): return _core.Dataset_GetAttributeVal(self, *args)
    def FastBindTuple(self, *args): return _core.Dataset_FastBindTuple(self, *args)
    def BindTuple(self, *args): return _core.Dataset_BindTuple(self, *args)
    def Size(self): return _core.Dataset_Size(self)
    def Arity(self): return _core.Dataset_Arity(self)
    def GetScheme(self): return _core.Dataset_GetScheme(self)
    def PrintTo(self, *args): return _core.Dataset_PrintTo(self, *args)
    def show(self, indent = 0): return _core.Dataset_show(self, indent)
    def nearest(self, *args): return _core.Dataset_nearest(self, *args)
    def lookupFloat(self, *args): return _core.Dataset_lookupFloat(self, *args)
    def lookupInt(self, *args): return _core.Dataset_lookupInt(self, *args)
Dataset_swigregister = _core.Dataset_swigregister
Dataset_swigregister(Dataset)

class GridField(RankedDataset,GridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [RankedDataset,GridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridField, name, value)
    __swig_getmethods__ = {}
    for _s in [RankedDataset,GridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridField, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_GridField(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_GridField
    __del__ = lambda self : None;
    def setGrid(self, *args): return _core.GridField_setGrid(self, *args)
    def nearest(self, *args): return _core.GridField_nearest(self, *args)
    def lookupInt(self, *args): return _core.GridField_lookupInt(self, *args)
    def lookupFloat(self, *args): return _core.GridField_lookupFloat(self, *args)
    def Clear(self): return _core.GridField_Clear(self)
    def getKCell(self, *args): return _core.GridField_getKCell(self, *args)
    def unref(self): return _core.GridField_unref(self)
    def notValid(self): return _core.GridField_notValid(self)
    def RestrictAll(self, *args): return _core.GridField_RestrictAll(self, *args)
    def RangeRestrict(self, *args): return _core.GridField_RangeRestrict(self, *args)
    def show(self, *args): return _core.GridField_show(self, *args)
    def PrintTo(self, *args): return _core.GridField_PrintTo(self, *args)
    def PrepareForExecution(self): return _core.GridField_PrepareForExecution(self)
    def Updated(self, *args): return _core.GridField_Updated(self, *args)
    def Execute(self): return _core.GridField_Execute(self)
    def Dim(self): return _core.GridField_Dim(self)
    def Card(self, *args): return _core.GridField_Card(self, *args)
    def GetGrid(self): return _core.GridField_GetGrid(self)
    def ref(self): return _core.GridField_ref(self)
GridField_swigregister = _core.GridField_swigregister
GridField_swigregister(GridField)

class UnitGridField(GridField):
    __swig_setmethods__ = {}
    for _s in [GridField]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitGridField, name, value)
    __swig_getmethods__ = {}
    for _s in [GridField]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitGridField, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_UnitGridField()
        try: self.this.append(this)
        except: self.this = this
    def Bind(self, *args): return _core.UnitGridField_Bind(self, *args)
    __swig_destroy__ = _core.delete_UnitGridField
    __del__ = lambda self : None;
UnitGridField_swigregister = _core.UnitGridField_swigregister
UnitGridField_swigregister(UnitGridField)

class Array(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def unref(self): return _core.Array_unref(self)
    def ref(self): return _core.Array_ref(self)
    __swig_destroy__ = _core.delete_Array
    __del__ = lambda self : None;
    def fill(self, *args): return _core.Array_fill(self, *args)
    def copyAndFilter(self, *args): return _core.Array_copyAndFilter(self, *args)
    def copy(self): return _core.Array_copy(self)
    def copyIntData(self, *args): return _core.Array_copyIntData(self, *args)
    def shareIntData(self, *args): return _core.Array_shareIntData(self, *args)
    def copyFloatData(self, *args): return _core.Array_copyFloatData(self, *args)
    def shareFloatData(self, *args): return _core.Array_shareFloatData(self, *args)
    def copyObjData(self, *args): return _core.Array_copyObjData(self, *args)
    def shareObjData(self, *args): return _core.Array_shareObjData(self, *args)
    def getData(self, *args): return _core.Array_getData(self, *args)
    def set(self, *args): return _core.Array_set(self, *args)
    def size(self): return _core.Array_size(self)
    def gettype(self): return _core.Array_gettype(self)
    def sname(self): return _core.Array_sname(self)
    def setVals(self, *args): return _core.Array_setVals(self, *args)
    def getVals(self): return _core.Array_getVals(self)
    def getValPtr(self, *args): return _core.Array_getValPtr(self, *args)
    def next(self, *args): return _core.Array_next(self, *args)
    def expand(self, *args): return _core.Array_expand(self, *args)
    def repeat(self, *args): return _core.Array_repeat(self, *args)
    def cast(self, *args): return _core.Array_cast(self, *args)
    def UnSafeCast(self, *args): return _core.Array_UnSafeCast(self, *args)
    def show(self): return _core.Array_show(self)
    def getName(self): return _core.Array_getName(self)
    def deleteName(self): return _core.Array_deleteName(self)
    def clear(self): return _core.Array_clear(self)
    __swig_setmethods__["type"] = _core.Array_type_set
    __swig_getmethods__["type"] = _core.Array_type_get
    def getScheme(self): return _core.Array_getScheme(self)
Array_swigregister = _core.Array_swigregister
Array_swigregister(Array)

class ConstArray(Array):
    __swig_setmethods__ = {}
    for _s in [Array]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstArray, name, value)
    __swig_getmethods__ = {}
    for _s in [Array]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ConstArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def copyAndFilter(self, *args): return _core.ConstArray_copyAndFilter(self, *args)
    def copy(self): return _core.ConstArray_copy(self)
    def copyData(self, *args): return _core.ConstArray_copyData(self, *args)
    def shareData(self, *args): return _core.ConstArray_shareData(self, *args)
    def getData(self, *args): return _core.ConstArray_getData(self, *args)
    def setVals(self, *args): return _core.ConstArray_setVals(self, *args)
    def getVals(self): return _core.ConstArray_getVals(self)
    def getValPtr(self, *args): return _core.ConstArray_getValPtr(self, *args)
    def next(self, *args): return _core.ConstArray_next(self, *args)
    def getConst(self): return _core.ConstArray_getConst(self)
    def setConst(self, *args): return _core.ConstArray_setConst(self, *args)
    def expand(self, *args): return _core.ConstArray_expand(self, *args)
    def repeat(self, *args): return _core.ConstArray_repeat(self, *args)
    def resize(self, *args): return _core.ConstArray_resize(self, *args)
    def cast(self, *args): return _core.ConstArray_cast(self, *args)
    def show(self): return _core.ConstArray_show(self)
    def clear(self): return _core.ConstArray_clear(self)
    def SetConst(self, *args): return _core.ConstArray_SetConst(self, *args)
    __swig_destroy__ = _core.delete_ConstArray
    __del__ = lambda self : None;
ConstArray_swigregister = _core.ConstArray_swigregister
ConstArray_swigregister(ConstArray)

class Cell:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Cell
    __del__ = lambda self : None;
    def Cross(self, *args): return _core.Cell_Cross(self, *args)
    def Cross2(self, *args): return _core.Cell_Cross2(self, *args)
    def mapNodes(self, *args): return _core.Cell_mapNodes(self, *args)
    def setNode(self, *args): return _core.Cell_setNode(self, *args)
    def eq(self, *args): return _core.Cell_eq(self, *args)
    def __eq__(self, *args): return _core.Cell___eq__(self, *args)
    def __lt__(self, *args): return _core.Cell___lt__(self, *args)
    def show(self, *args): return _core.Cell_show(self, *args)
    def hasNode(self, *args): return _core.Cell_hasNode(self, *args)
    def IncidentTo(self, *args): return _core.Cell_IncidentTo(self, *args)
    def setsize(self, *args): return _core.Cell_setsize(self, *args)
    def setnodes(self, *args): return _core.Cell_setnodes(self, *args)
    def getsize(self): return _core.Cell_getsize(self)
    def getnodes(self): return _core.Cell_getnodes(self)
    def getnode(self, *args): return _core.Cell_getnode(self, *args)
Cell_swigregister = _core.Cell_swigregister
Cell_swigregister(Cell)

class eqCell:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eqCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eqCell, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.eqCell___call__(self, *args)
    def __init__(self): 
        this = _core.new_eqCell()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_eqCell
    __del__ = lambda self : None;
eqCell_swigregister = _core.eqCell_swigregister
eqCell_swigregister(eqCell)

class ltCell:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ltCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ltCell, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.ltCell___call__(self, *args)
    def __init__(self): 
        this = _core.new_ltCell()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ltCell
    __del__ = lambda self : None;
ltCell_swigregister = _core.ltCell_swigregister
ltCell_swigregister(ltCell)

class SimpleCellHash:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleCellHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleCellHash, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.SimpleCellHash___call__(self, *args)
    def __init__(self): 
        this = _core.new_SimpleCellHash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_SimpleCellHash
    __del__ = lambda self : None;
SimpleCellHash_swigregister = _core.SimpleCellHash_swigregister
SimpleCellHash_swigregister(SimpleCellHash)

class CellHash:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellHash, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.CellHash___call__(self, *args)
    def __init__(self): 
        this = _core.new_CellHash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_CellHash
    __del__ = lambda self : None;
CellHash_swigregister = _core.CellHash_swigregister
CellHash_swigregister(CellHash)

class CellArray:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellArray, name)
    __repr__ = _swig_repr
    def whoami(self): return _core.CellArray_whoami(self)
    def __init__(self, *args): 
        this = _core.new_CellArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_CellArray
    __del__ = lambda self : None;
    def getsize(self): return _core.CellArray_getsize(self)
    def addCell(self, *args): return _core.CellArray_addCell(self, *args)
    def addCellNodes(self, *args): return _core.CellArray_addCellNodes(self, *args)
    def getCell(self, *args): return _core.CellArray_getCell(self, *args)
    def getCellCopy(self, *args): return _core.CellArray_getCellCopy(self, *args)
    def getCellNodes(self, *args): return _core.CellArray_getCellNodes(self, *args)
    def contains(self, *args): return _core.CellArray_contains(self, *args)
    def getOrd(self, *args): return _core.CellArray_getOrd(self, *args)
    def bytes(self): return _core.CellArray_bytes(self)
    def ref(self): return _core.CellArray_ref(self)
    def unref(self): return _core.CellArray_unref(self)
    def setNodeArray(self, *args): return _core.CellArray_setNodeArray(self, *args)
    def getIncidentCells(self, *args): return _core.CellArray_getIncidentCells(self, *args)
    def getAdjacentCells(self, *args): return _core.CellArray_getAdjacentCells(self, *args)
    def getNodeCount(self): return _core.CellArray_getNodeCount(self)
    def show(self, *args): return _core.CellArray_show(self, *args)
    def toNodeSet(self, *args): return _core.CellArray_toNodeSet(self, *args)
    def Intersection(self, *args): return _core.CellArray_Intersection(self, *args)
    def Cross(self, *args): return _core.CellArray_Cross(self, *args)
    def Append(self, *args): return _core.CellArray_Append(self, *args)
    def mapNodes(self, *args): return _core.CellArray_mapNodes(self, *args)
    def makeCrossNodeMap(self, *args): return _core.CellArray_makeCrossNodeMap(self, *args)
    def buildInvertedIndex(self): return _core.CellArray_buildInvertedIndex(self)
    def buildIncidenceIndex(self): return _core.CellArray_buildIncidenceIndex(self)
    def buildAdjacencyIndex(self): return _core.CellArray_buildAdjacencyIndex(self)
    def getCellVector(self): return _core.CellArray_getCellVector(self)
    __swig_setmethods__["cleanup_node_array"] = _core.CellArray_cleanup_node_array_set
    __swig_getmethods__["cleanup_node_array"] = _core.CellArray_cleanup_node_array_get
CellArray_swigregister = _core.CellArray_swigregister
CellArray_swigregister(CellArray)


def testString(*args):
  return _core.testString(*args)
testString = _core.testString
class Grid(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Grid, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Grid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _core.Grid_name_set
    __swig_getmethods__["name"] = _core.Grid_name_get
    def __init__(self, *args): 
        this = _core.new_Grid(*args)
        try: self.this.append(this)
        except: self.this = this
    def ref(self): return _core.Grid_ref(self)
    def unref(self): return _core.Grid_unref(self)
    __swig_destroy__ = _core.delete_Grid
    __del__ = lambda self : None;
    def getName(self): return _core.Grid_getName(self)
    def init(self, *args): return _core.Grid_init(self, *args)
    def getdim(self): return _core.Grid_getdim(self)
    def Size(self, *args): return _core.Grid_Size(self, *args)
    def setKCells(self, *args): return _core.Grid_setKCells(self, *args)
    def getKCells(self, *args): return _core.Grid_getKCells(self, *args)
    def setImplicit0Cells(self, *args): return _core.Grid_setImplicit0Cells(self, *args)
    def countKCells(self, *args): return _core.Grid_countKCells(self, *args)
    def empty(self): return _core.Grid_empty(self)
    def shareCells(self, *args): return _core.Grid_shareCells(self, *args)
    def copyCells(self, *args): return _core.Grid_copyCells(self, *args)
    def nodeFilter(self, *args): return _core.Grid_nodeFilter(self, *args)
    def checkWellFormed(self): return _core.Grid_checkWellFormed(self)
    def cellCount(self, *args): return _core.Grid_cellCount(self, *args)
    def IncidentTo(self, *args): return _core.Grid_IncidentTo(self, *args)
    def normalize(self): return _core.Grid_normalize(self)
    def mapNodes(self, *args): return _core.Grid_mapNodes(self, *args)
    def setReferent(self, *args): return _core.Grid_setReferent(self, *args)
    def Intersection(self, *args): return _core.Grid_Intersection(self, *args)
    def Cross(self, *args): return _core.Grid_Cross(self, *args)
    def show(self, *args): return _core.Grid_show(self, *args)
    __swig_setmethods__["ordmap"] = _core.Grid_ordmap_set
    __swig_getmethods__["ordmap"] = _core.Grid_ordmap_get
Grid_swigregister = _core.Grid_swigregister
Grid_swigregister(Grid)

class UnitGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_UnitGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_UnitGrid
    __del__ = lambda self : None;
UnitGrid_swigregister = _core.UnitGrid_swigregister
UnitGrid_swigregister(UnitGrid)

BLOCKSIZ = _core.BLOCKSIZ
DIGITS = _core.DIGITS
class Implicit0Cells:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Implicit0Cells, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Implicit0Cells, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Implicit0Cells(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Implicit0Cells
    __del__ = lambda self : None;
    def getsize(self): return _core.Implicit0Cells_getsize(self)
    def getCell(self, *args): return _core.Implicit0Cells_getCell(self, *args)
    def getCellCopy(self, *args): return _core.Implicit0Cells_getCellCopy(self, *args)
    def getCellNodes(self, *args): return _core.Implicit0Cells_getCellNodes(self, *args)
    def whoami(self): return _core.Implicit0Cells_whoami(self)
    def contains(self, *args): return _core.Implicit0Cells_contains(self, *args)
    def getOrd(self, *args): return _core.Implicit0Cells_getOrd(self, *args)
    def getIncidentCells(self, *args): return _core.Implicit0Cells_getIncidentCells(self, *args)
    def getAdjacentCells(self, *args): return _core.Implicit0Cells_getAdjacentCells(self, *args)
    def getNodeCount(self): return _core.Implicit0Cells_getNodeCount(self)
    def mapNodes(self, *args): return _core.Implicit0Cells_mapNodes(self, *args)
    def buildInvertedIndex(self): return _core.Implicit0Cells_buildInvertedIndex(self)
    def buildAdjacentIndex(self): return _core.Implicit0Cells_buildAdjacentIndex(self)
    def show(self, *args): return _core.Implicit0Cells_show(self, *args)
    def implicit(self): return _core.Implicit0Cells_implicit(self)
    def bytes(self): return _core.Implicit0Cells_bytes(self)
    def unref(self): return _core.Implicit0Cells_unref(self)
    def ref(self): return _core.Implicit0Cells_ref(self)
    def asCellArray(self): return _core.Implicit0Cells_asCellArray(self)
    def getCellVector(self): return _core.Implicit0Cells_getCellVector(self)
    def toNodeSet(self, *args): return _core.Implicit0Cells_toNodeSet(self, *args)
    def Intersection(self, *args): return _core.Implicit0Cells_Intersection(self, *args)
    def Cross(self, *args): return _core.Implicit0Cells_Cross(self, *args)
    def makeCrossNodeMap(self, *args): return _core.Implicit0Cells_makeCrossNodeMap(self, *args)
Implicit0Cells_swigregister = _core.Implicit0Cells_swigregister
Implicit0Cells_swigregister(Implicit0Cells)

class ArrayReader:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayReader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ArrayReader
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _core.new_ArrayReader(*args)
        try: self.this.append(this)
        except: self.this = this
    def ReadTuples(self, *args): return _core.ArrayReader_ReadTuples(self, *args)
    def ReadPrimitives(self, *args): return _core.ArrayReader_ReadPrimitives(self, *args)
    def Read(self, *args): return _core.ArrayReader_Read(self, *args)
    def getOffset(self): return _core.ArrayReader_getOffset(self)
    def setOffset(self, *args): return _core.ArrayReader_setOffset(self, *args)
    def setPatternAttribute(self, *args): return _core.ArrayReader_setPatternAttribute(self, *args)
    def setStream(self, *args): return _core.ArrayReader_setStream(self, *args)
ArrayReader_swigregister = _core.ArrayReader_swigregister
ArrayReader_swigregister(ArrayReader)

class FileArrayReader(ArrayReader):
    __swig_setmethods__ = {}
    for _s in [ArrayReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileArrayReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_FileArrayReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_FileArrayReader
    __del__ = lambda self : None;
FileArrayReader_swigregister = _core.FileArrayReader_swigregister
FileArrayReader_swigregister(FileArrayReader)

class ProjectArrayReader(FileArrayReader):
    __swig_setmethods__ = {}
    for _s in [FileArrayReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [FileArrayReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectArrayReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ProjectArrayReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ProjectArrayReader
    __del__ = lambda self : None;
    def GetScheme(self): return _core.ProjectArrayReader_GetScheme(self)
    def SetScheme(self, *args): return _core.ProjectArrayReader_SetScheme(self, *args)
    def ReadPrimitives(self, *args): return _core.ProjectArrayReader_ReadPrimitives(self, *args)
    def ReadTuples(self, *args): return _core.ProjectArrayReader_ReadTuples(self, *args)
ProjectArrayReader_swigregister = _core.ProjectArrayReader_swigregister
ProjectArrayReader_swigregister(ProjectArrayReader)

class TextFileArrayReader(FileArrayReader):
    __swig_setmethods__ = {}
    for _s in [FileArrayReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextFileArrayReader, name, value)
    __swig_getmethods__ = {}
    for _s in [FileArrayReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextFileArrayReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_TextFileArrayReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_TextFileArrayReader
    __del__ = lambda self : None;
TextFileArrayReader_swigregister = _core.TextFileArrayReader_swigregister
TextFileArrayReader_swigregister(TextFileArrayReader)

class ArrayWriter:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayWriter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ArrayWriter(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(self, *args): return _core.ArrayWriter_Write(self, *args)
    __swig_destroy__ = _core.delete_ArrayWriter
    __del__ = lambda self : None;
ArrayWriter_swigregister = _core.ArrayWriter_swigregister
ArrayWriter_swigregister(ArrayWriter)

class ElcircFile:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ElcircFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircFile
    __del__ = lambda self : None;
    def getVarScheme(self): return _core.ElcircFile_getVarScheme(self)
    def getSurfReader(self, *args): return _core.ElcircFile_getSurfReader(self, *args)
    def getVariableReader(self, *args): return _core.ElcircFile_getVariableReader(self, *args)
    def getSurfOffset(self, *args): return _core.ElcircFile_getSurfOffset(self, *args)
    def getVariableOffset(self, *args): return _core.ElcircFile_getVariableOffset(self, *args)
    def getTimestepSize(self): return _core.ElcircFile_getTimestepSize(self)
    def getHeaderSize(self): return _core.ElcircFile_getHeaderSize(self)
    def readHGrid(self): return _core.ElcircFile_readHGrid(self)
    def readDGrid(self): return _core.ElcircFile_readDGrid(self)
    def readVGrid(self): return _core.ElcircFile_readVGrid(self)
    def readTGrid(self): return _core.ElcircFile_readTGrid(self)
    def Valid(self): return _core.ElcircFile_Valid(self)
    def makeHeader(self, *args): return _core.ElcircFile_makeHeader(self, *args)
    __swig_setmethods__["h"] = _core.ElcircFile_h_set
    __swig_getmethods__["h"] = _core.ElcircFile_h_get
    def i23d(self): return _core.ElcircFile_i23d(self)
ElcircFile_swigregister = _core.ElcircFile_swigregister
ElcircFile_swigregister(ElcircFile)

class CrossOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_CrossOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.CrossOp_Execute(self)
    __swig_getmethods__["Cross"] = lambda x: _core.CrossOp_Cross
    __swig_destroy__ = _core.delete_CrossOp
    __del__ = lambda self : None;
CrossOp_swigregister = _core.CrossOp_swigregister
CrossOp_swigregister(CrossOp)

def CrossOp_Cross(*args):
  return _core.CrossOp_Cross(*args)
CrossOp_Cross = _core.CrossOp_Cross

class RestrictOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RestrictOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RestrictOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_RestrictOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.RestrictOp_Execute(self)
    __swig_getmethods__["Restrict"] = lambda x: _core.RestrictOp_Restrict
    __swig_destroy__ = _core.delete_RestrictOp
    __del__ = lambda self : None;
RestrictOp_swigregister = _core.RestrictOp_swigregister
RestrictOp_swigregister(RestrictOp)

def RestrictOp_Restrict(*args):
  return _core.RestrictOp_Restrict(*args)
RestrictOp_Restrict = _core.RestrictOp_Restrict

class ApplyOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplyOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplyOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ApplyOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.ApplyOp_Execute(self)
    __swig_getmethods__["Apply"] = lambda x: _core.ApplyOp_Apply
    def SetExpression(self, *args): return _core.ApplyOp_SetExpression(self, *args)
    def SetRank(self, *args): return _core.ApplyOp_SetRank(self, *args)
    __swig_destroy__ = _core.delete_ApplyOp
    __del__ = lambda self : None;
ApplyOp_swigregister = _core.ApplyOp_swigregister
ApplyOp_swigregister(ApplyOp)

def ApplyOp_Apply(*args):
  return _core.ApplyOp_Apply(*args)
ApplyOp_Apply = _core.ApplyOp_Apply

class BindOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BindOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BindOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_BindOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def setArrayReader(self, *args): return _core.BindOp_setArrayReader(self, *args)
    def setOffset(self, *args): return _core.BindOp_setOffset(self, *args)
    def setOffsetInt(self, *args): return _core.BindOp_setOffsetInt(self, *args)
    def Execute(self): return _core.BindOp_Execute(self)
    __swig_getmethods__["Bind"] = lambda x: _core.BindOp_Bind
    __swig_destroy__ = _core.delete_BindOp
    __del__ = lambda self : None;
BindOp_swigregister = _core.BindOp_swigregister
BindOp_swigregister(BindOp)

def BindOp_Bind(*args):
  return _core.BindOp_Bind(*args)
BindOp_Bind = _core.BindOp_Bind

class BindConstantOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BindConstantOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BindConstantOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_BindConstantOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.BindConstantOp_Execute(self)
    def setAttributeVal(self, *args): return _core.BindConstantOp_setAttributeVal(self, *args)
    __swig_getmethods__["BindConstant"] = lambda x: _core.BindConstantOp_BindConstant
    __swig_destroy__ = _core.delete_BindConstantOp
    __del__ = lambda self : None;
BindConstantOp_swigregister = _core.BindConstantOp_swigregister
BindConstantOp_swigregister(BindConstantOp)

def BindConstantOp_BindConstant(*args):
  return _core.BindConstantOp_BindConstant(*args)
BindConstantOp_BindConstant = _core.BindConstantOp_BindConstant

class DataDumpOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataDumpOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataDumpOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_DataDumpOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.DataDumpOp_Execute(self)
    __swig_getmethods__["DataDump"] = lambda x: _core.DataDumpOp_DataDump
    __swig_destroy__ = _core.delete_DataDumpOp
    __del__ = lambda self : None;
DataDumpOp_swigregister = _core.DataDumpOp_swigregister
DataDumpOp_swigregister(DataDumpOp)

def DataDumpOp_DataDump(*args):
  return _core.DataDumpOp_DataDump(*args)
DataDumpOp_DataDump = _core.DataDumpOp_DataDump

class OutputOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_OutputOp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["offset"] = _core.OutputOp_offset_set
    __swig_getmethods__["offset"] = _core.OutputOp_offset_get
    __swig_setmethods__["filename"] = _core.OutputOp_filename_set
    __swig_getmethods__["filename"] = _core.OutputOp_filename_get
    def Execute(self): return _core.OutputOp_Execute(self)
    def setFileName(self, *args): return _core.OutputOp_setFileName(self, *args)
    def Output(self, *args): return _core.OutputOp_Output(self, *args)
    __swig_destroy__ = _core.delete_OutputOp
    __del__ = lambda self : None;
OutputOp_swigregister = _core.OutputOp_swigregister
OutputOp_swigregister(OutputOp)

class OutputNetCDFOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNetCDFOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNetCDFOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_OutputNetCDFOp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["filename"] = _core.OutputNetCDFOp_filename_set
    __swig_getmethods__["filename"] = _core.OutputNetCDFOp_filename_get
    def Execute(self): return _core.OutputNetCDFOp_Execute(self)
    def setFileName(self, *args): return _core.OutputNetCDFOp_setFileName(self, *args)
    def WriteNetCDF(self, *args): return _core.OutputNetCDFOp_WriteNetCDF(self, *args)
    def WriteTimeVars(self, *args): return _core.OutputNetCDFOp_WriteTimeVars(self, *args)
    def SetDate(self, *args): return _core.OutputNetCDFOp_SetDate(self, *args)
    __swig_destroy__ = _core.delete_OutputNetCDFOp
    __del__ = lambda self : None;
OutputNetCDFOp_swigregister = _core.OutputNetCDFOp_swigregister
OutputNetCDFOp_swigregister(OutputNetCDFOp)

class OutputNetCDFDim(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNetCDFDim, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNetCDFDim, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_OutputNetCDFDim(*args)
        try: self.this.append(this)
        except: self.this = this
    def WriteCells(self, *args): return _core.OutputNetCDFDim_WriteCells(self, *args)
    def Execute(self): return _core.OutputNetCDFDim_Execute(self)
    def SetDate(self, *args): return _core.OutputNetCDFDim_SetDate(self, *args)
    __swig_destroy__ = _core.delete_OutputNetCDFDim
    __del__ = lambda self : None;
OutputNetCDFDim_swigregister = _core.OutputNetCDFDim_swigregister
OutputNetCDFDim_swigregister(OutputNetCDFDim)

class OutputNetCDFVars(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutputNetCDFVars, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutputNetCDFVars, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_OutputNetCDFVars(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.OutputNetCDFVars_Execute(self)
    def SetDate(self, *args): return _core.OutputNetCDFVars_SetDate(self, *args)
    __swig_destroy__ = _core.delete_OutputNetCDFVars
    __del__ = lambda self : None;
OutputNetCDFVars_swigregister = _core.OutputNetCDFVars_swigregister
OutputNetCDFVars_swigregister(OutputNetCDFVars)


def mapType(*args):
  return _core.mapType(*args)
mapType = _core.mapType

def HasDim(*args):
  return _core.HasDim(*args)
HasDim = _core.HasDim

def HasVar(*args):
  return _core.HasVar(*args)
HasVar = _core.HasVar

def HasAttr(*args):
  return _core.HasAttr(*args)
HasAttr = _core.HasAttr
class NetCDFAdaptor:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetCDFAdaptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetCDFAdaptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_NetCDFAdaptor(*args)
        try: self.this.append(this)
        except: self.this = this
    def Open(self, mode = "r"): return _core.NetCDFAdaptor_Open(self, mode)
    def Close(self): return _core.NetCDFAdaptor_Close(self)
    def setFileName(self, *args): return _core.NetCDFAdaptor_setFileName(self, *args)
    def NodesFromDim(self, *args): return _core.NetCDFAdaptor_NodesFromDim(self, *args)
    def WellSupportedPolygonsFromVars(self, *args): return _core.NetCDFAdaptor_WellSupportedPolygonsFromVars(self, *args)
    def HomogeneousCellsFromVar(self, *args): return _core.NetCDFAdaptor_HomogeneousCellsFromVar(self, *args)
    def AttributeFromVar(self, *args): return _core.NetCDFAdaptor_AttributeFromVar(self, *args)
    def CreateDim(self, *args): return _core.NetCDFAdaptor_CreateDim(self, *args)
    def DimFromDim(self, *args): return _core.NetCDFAdaptor_DimFromDim(self, *args)
    def VarFromAttribute(self, *args): return _core.NetCDFAdaptor_VarFromAttribute(self, *args)
    def VarFromIncidence(self, *args): return _core.NetCDFAdaptor_VarFromIncidence(self, *args)
    __swig_getmethods__["mapType"] = lambda x: _core.NetCDFAdaptor_mapType
    __swig_getmethods__["HasDim"] = lambda x: _core.NetCDFAdaptor_HasDim
    __swig_getmethods__["HasVar"] = lambda x: _core.NetCDFAdaptor_HasVar
    __swig_getmethods__["HasAttr"] = lambda x: _core.NetCDFAdaptor_HasAttr
    __swig_destroy__ = _core.delete_NetCDFAdaptor
    __del__ = lambda self : None;
NetCDFAdaptor_swigregister = _core.NetCDFAdaptor_swigregister
NetCDFAdaptor_swigregister(NetCDFAdaptor)

def NetCDFAdaptor_mapType(*args):
  return _core.NetCDFAdaptor_mapType(*args)
NetCDFAdaptor_mapType = _core.NetCDFAdaptor_mapType

def NetCDFAdaptor_HasDim(*args):
  return _core.NetCDFAdaptor_HasDim(*args)
NetCDFAdaptor_HasDim = _core.NetCDFAdaptor_HasDim

def NetCDFAdaptor_HasVar(*args):
  return _core.NetCDFAdaptor_HasVar(*args)
NetCDFAdaptor_HasVar = _core.NetCDFAdaptor_HasVar

def NetCDFAdaptor_HasAttr(*args):
  return _core.NetCDFAdaptor_HasAttr(*args)
NetCDFAdaptor_HasAttr = _core.NetCDFAdaptor_HasAttr

class ScanOp(ZeroaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [ZeroaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScanOp, name, value)
    __swig_getmethods__ = {}
    for _s in [ZeroaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScanOp, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _core.ScanOp_filename_set
    __swig_getmethods__["filename"] = _core.ScanOp_filename_get
    __swig_setmethods__["offset"] = _core.ScanOp_offset_set
    __swig_getmethods__["offset"] = _core.ScanOp_offset_get
    __swig_destroy__ = _core.delete_ScanOp
    __del__ = lambda self : None;
ScanOp_swigregister = _core.ScanOp_swigregister
ScanOp_swigregister(ScanOp)

class ScanInternal(ScanOp):
    __swig_setmethods__ = {}
    for _s in [ScanOp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScanInternal, name, value)
    __swig_getmethods__ = {}
    for _s in [ScanOp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScanInternal, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ScanInternal(*args)
        try: self.this.append(this)
        except: self.this = this
    def setFileName(self, *args): return _core.ScanInternal_setFileName(self, *args)
    def setRawBytes(self, *args): return _core.ScanInternal_setRawBytes(self, *args)
    def Execute(self): return _core.ScanInternal_Execute(self)
    __swig_getmethods__["Scan"] = lambda x: _core.ScanInternal_Scan
    __swig_destroy__ = _core.delete_ScanInternal
    __del__ = lambda self : None;
ScanInternal_swigregister = _core.ScanInternal_swigregister
ScanInternal_swigregister(ScanInternal)

def ScanInternal_Scan(*args):
  return _core.ScanInternal_Scan(*args)
ScanInternal_Scan = _core.ScanInternal_Scan

class AccumulateOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccumulateOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccumulateOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_AccumulateOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.AccumulateOp_Execute(self)
    __swig_getmethods__["Accumulate"] = lambda x: _core.AccumulateOp_Accumulate
    def SetOffset(self, *args): return _core.AccumulateOp_SetOffset(self, *args)
    __swig_setmethods__["position_offset"] = _core.AccumulateOp_position_offset_set
    __swig_getmethods__["position_offset"] = _core.AccumulateOp_position_offset_get
    __swig_destroy__ = _core.delete_AccumulateOp
    __del__ = lambda self : None;
AccumulateOp_swigregister = _core.AccumulateOp_swigregister
AccumulateOp_swigregister(AccumulateOp)

def AccumulateOp_Accumulate(*args):
  return _core.AccumulateOp_Accumulate(*args)
AccumulateOp_Accumulate = _core.AccumulateOp_Accumulate


def debug_set(*args):
  return _core.debug_set(*args)
debug_set = _core.debug_set
class AssignmentFunction:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AssignmentFunction
    __del__ = lambda self : None;
    __swig_setmethods__["T"] = _core.AssignmentFunction_T_set
    __swig_getmethods__["T"] = _core.AssignmentFunction_T_get
    __swig_setmethods__["S"] = _core.AssignmentFunction_S_set
    __swig_getmethods__["S"] = _core.AssignmentFunction_S_get
    __swig_setmethods__["_i"] = _core.AssignmentFunction__i_set
    __swig_getmethods__["_i"] = _core.AssignmentFunction__i_get
    __swig_setmethods__["_j"] = _core.AssignmentFunction__j_set
    __swig_getmethods__["_j"] = _core.AssignmentFunction__j_get
    __swig_setmethods__["dstarget"] = _core.AssignmentFunction_dstarget_set
    __swig_getmethods__["dstarget"] = _core.AssignmentFunction_dstarget_get
    __swig_setmethods__["dssource"] = _core.AssignmentFunction_dssource_set
    __swig_getmethods__["dssource"] = _core.AssignmentFunction_dssource_get
    __swig_setmethods__["schtarget"] = _core.AssignmentFunction_schtarget_set
    __swig_getmethods__["schtarget"] = _core.AssignmentFunction_schtarget_get
    __swig_setmethods__["schsource"] = _core.AssignmentFunction_schsource_set
    __swig_getmethods__["schsource"] = _core.AssignmentFunction_schsource_get
    def setEnvironment(self, *args): return _core.AssignmentFunction_setEnvironment(self, *args)
    def __call__(self, *args): return _core.AssignmentFunction___call__(self, *args)
AssignmentFunction_swigregister = _core.AssignmentFunction_swigregister
AssignmentFunction_swigregister(AssignmentFunction)

class AggregationFunction:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregationFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AggregationFunction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AggregationFunction
    __del__ = lambda self : None;
    def setScheme(self, *args): return _core.AggregationFunction_setScheme(self, *args)
    def getOutScheme(self, *args): return _core.AggregationFunction_getOutScheme(self, *args)
    def __call__(self, *args): return _core.AggregationFunction___call__(self, *args)
AggregationFunction_swigregister = _core.AggregationFunction_swigregister
AggregationFunction_swigregister(AggregationFunction)

class AggregateOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregateOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AggregateOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_AggregateOp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["Aggregate"] = lambda x: _core.AggregateOp_Aggregate
    __swig_destroy__ = _core.delete_AggregateOp
    __del__ = lambda self : None;
AggregateOp_swigregister = _core.AggregateOp_swigregister
AggregateOp_swigregister(AggregateOp)

def AggregateOp_Aggregate(*args):
  return _core.AggregateOp_Aggregate(*args)
AggregateOp_Aggregate = _core.AggregateOp_Aggregate

TOLERANCE = _core.TOLERANCE
NULL_VALUE = _core.NULL_VALUE

def euclid(*args):
  return _core.euclid(*args)
euclid = _core.euclid

def euclid3D(*args):
  return _core.euclid3D(*args)
euclid3D = _core.euclid3D
class dotwo(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, dotwo, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, dotwo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_dotwo(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.dotwo___call__(self, *args)
    def mergeTuples(self, *args): return _core.dotwo_mergeTuples(self, *args)
    def mergeSchemes(self, *args): return _core.dotwo_mergeSchemes(self, *args)
    def getOutScheme(self, *args): return _core.dotwo_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_dotwo
    __del__ = lambda self : None;
dotwo_swigregister = _core.dotwo_swigregister
dotwo_swigregister(dotwo)

class Any(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Any, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Any, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Any(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.Any___call__(self, *args)
    def getOutScheme(self, *args): return _core.Any_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_Any
    __del__ = lambda self : None;
Any_swigregister = _core.Any_swigregister
Any_swigregister(Any)

class Count(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Count, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Count, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.Count___call__(self, *args)
    def getOutScheme(self, *args): return _core.Count_getOutScheme(self, *args)
    def __init__(self): 
        this = _core.new_Count()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_Count
    __del__ = lambda self : None;
Count_swigregister = _core.Count_swigregister
Count_swigregister(Count)

class area(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, area, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, area, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_area(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.area___call__(self, *args)
    def getOutScheme(self, *args): return _core.area_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_area
    __del__ = lambda self : None;
area_swigregister = _core.area_swigregister
area_swigregister(area)

class mkvector(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, mkvector, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, mkvector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.mkvector_attr_set
    __swig_getmethods__["attr"] = _core.mkvector_attr_get
    def __init__(self, *args): 
        this = _core.new_mkvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.mkvector___call__(self, *args)
    def getOutScheme(self, *args): return _core.mkvector_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_mkvector
    __del__ = lambda self : None;
mkvector_swigregister = _core.mkvector_swigregister
mkvector_swigregister(mkvector)

class triweights(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, triweights, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, triweights, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.triweights___call__(self, *args)
    def getOutScheme(self, *args): return _core.triweights_getOutScheme(self, *args)
    def __init__(self): 
        this = _core.new_triweights()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_triweights
    __del__ = lambda self : None;
triweights_swigregister = _core.triweights_swigregister
triweights_swigregister(triweights)

class interpolate3D(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate3D, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate3D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attrs"] = _core.interpolate3D_attrs_set
    __swig_getmethods__["attrs"] = _core.interpolate3D_attrs_get
    def __init__(self, *args): 
        this = _core.new_interpolate3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.interpolate3D___call__(self, *args)
    def getOutScheme(self, *args): return _core.interpolate3D_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_interpolate3D
    __del__ = lambda self : None;
interpolate3D_swigregister = _core.interpolate3D_swigregister
interpolate3D_swigregister(interpolate3D)

class interpolate2D(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate2D, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate2D, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.interpolate2D_attr_set
    __swig_getmethods__["attr"] = _core.interpolate2D_attr_get
    def __init__(self, *args): 
        this = _core.new_interpolate2D(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.interpolate2D___call__(self, *args)
    def getOutScheme(self, *args): return _core.interpolate2D_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_interpolate2D
    __del__ = lambda self : None;
interpolate2D_swigregister = _core.interpolate2D_swigregister
interpolate2D_swigregister(interpolate2D)

class first(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, first, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, first, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_first(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.first___call__(self, *args)
    def getOutScheme(self, *args): return _core.first_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_first
    __del__ = lambda self : None;
first_swigregister = _core.first_swigregister
first_swigregister(first)

class statistics(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, statistics, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, statistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_statistics(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.statistics___call__(self, *args)
    def getOutScheme(self, *args): return _core.statistics_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_statistics
    __del__ = lambda self : None;
statistics_swigregister = _core.statistics_swigregister
statistics_swigregister(statistics)

class project(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, project, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, project, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attrs"] = _core.project_attrs_set
    __swig_getmethods__["attrs"] = _core.project_attrs_get
    def __init__(self, *args): 
        this = _core.new_project(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.project___call__(self, *args)
    def getOutScheme(self, *args): return _core.project_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_project
    __del__ = lambda self : None;
project_swigregister = _core.project_swigregister
project_swigregister(project)


def equal(*args):
  return _core.equal(*args)
equal = _core.equal

def TestCallback(*args):
  return _core.TestCallback(*args)
TestCallback = _core.TestCallback

def pnpoly(*args):
  return _core.pnpoly(*args)
pnpoly = _core.pnpoly
class Both(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Both, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Both, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _core.Both_left_set
    __swig_getmethods__["left"] = _core.Both_left_get
    __swig_setmethods__["right"] = _core.Both_right_set
    __swig_getmethods__["right"] = _core.Both_right_get
    def __init__(self, *args): 
        this = _core.new_Both(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.Both___call__(self, *args)
    def setEnvironment(self, *args): return _core.Both_setEnvironment(self, *args)
    __swig_destroy__ = _core.delete_Both
    __del__ = lambda self : None;
Both_swigregister = _core.Both_swigregister
Both_swigregister(Both)

class Either(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Either, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Either, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _core.Either_left_set
    __swig_getmethods__["left"] = _core.Either_left_get
    __swig_setmethods__["right"] = _core.Either_right_set
    __swig_getmethods__["right"] = _core.Either_right_get
    def __init__(self, *args): 
        this = _core.new_Either(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.Either___call__(self, *args)
    def setEnvironment(self, *args): return _core.Either_setEnvironment(self, *args)
    __swig_destroy__ = _core.delete_Either
    __del__ = lambda self : None;
Either_swigregister = _core.Either_swigregister
Either_swigregister(Either)

class IncidentTo(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncidentTo, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncidentTo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_IncidentTo()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.IncidentTo___call__(self, *args)
    __swig_destroy__ = _core.delete_IncidentTo
    __del__ = lambda self : None;
IncidentTo_swigregister = _core.IncidentTo_swigregister
IncidentTo_swigregister(IncidentTo)

class Nodes(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nodes, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nodes, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_Nodes()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.Nodes___call__(self, *args)
    __swig_destroy__ = _core.delete_Nodes
    __del__ = lambda self : None;
Nodes_swigregister = _core.Nodes_swigregister
Nodes_swigregister(Nodes)

class adjacentNodes(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, adjacentNodes, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, adjacentNodes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_adjacentNodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def setEnvironment(self, *args): return _core.adjacentNodes_setEnvironment(self, *args)
    def __call__(self, *args): return _core.adjacentNodes___call__(self, *args)
    __swig_destroy__ = _core.delete_adjacentNodes
    __del__ = lambda self : None;
adjacentNodes_swigregister = _core.adjacentNodes_swigregister
adjacentNodes_swigregister(adjacentNodes)

class adjacent(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, adjacent, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, adjacent, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_adjacent()
        try: self.this.append(this)
        except: self.this = this
    def setEnvironment(self, *args): return _core.adjacent_setEnvironment(self, *args)
    def __call__(self, *args): return _core.adjacent___call__(self, *args)
    __swig_destroy__ = _core.delete_adjacent
    __del__ = lambda self : None;
adjacent_swigregister = _core.adjacent_swigregister
adjacent_swigregister(adjacent)

class neighbors(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, neighbors, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, neighbors, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.neighbors___call__(self, *args)
    def __init__(self): 
        this = _core.new_neighbors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_neighbors
    __del__ = lambda self : None;
neighbors_swigregister = _core.neighbors_swigregister
neighbors_swigregister(neighbors)

class intervalContains(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, intervalContains, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, intervalContains, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rangeattr"] = _core.intervalContains_rangeattr_set
    __swig_getmethods__["rangeattr"] = _core.intervalContains_rangeattr_get
    __swig_setmethods__["valueattr"] = _core.intervalContains_valueattr_set
    __swig_getmethods__["valueattr"] = _core.intervalContains_valueattr_get
    __swig_setmethods__["pointattr"] = _core.intervalContains_pointattr_set
    __swig_getmethods__["pointattr"] = _core.intervalContains_pointattr_get
    def __init__(self, *args): 
        this = _core.new_intervalContains(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.intervalContains___call__(self, *args)
    __swig_destroy__ = _core.delete_intervalContains
    __del__ = lambda self : None;
intervalContains_swigregister = _core.intervalContains_swigregister
intervalContains_swigregister(intervalContains)

class byPointerSet(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, byPointerSet, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, byPointerSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_byPointerSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.byPointerSet___call__(self, *args)
    __swig_destroy__ = _core.delete_byPointerSet
    __del__ = lambda self : None;
byPointerSet_swigregister = _core.byPointerSet_swigregister
byPointerSet_swigregister(byPointerSet)

class nearest(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nearest, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, nearest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _core.nearest_a_set
    __swig_getmethods__["a"] = _core.nearest_a_get
    __swig_setmethods__["b"] = _core.nearest_b_set
    __swig_getmethods__["b"] = _core.nearest_b_get
    def __init__(self, *args): 
        this = _core.new_nearest(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.nearest___call__(self, *args)
    __swig_destroy__ = _core.delete_nearest
    __del__ = lambda self : None;
nearest_swigregister = _core.nearest_swigregister
nearest_swigregister(nearest)

class sortedmatch(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sortedmatch, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sortedmatch, name)
    __repr__ = _swig_repr
    def setEnvironment(self, *args): return _core.sortedmatch_setEnvironment(self, *args)
    def __init__(self, *args): 
        this = _core.new_sortedmatch(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.sortedmatch___call__(self, *args)
    __swig_destroy__ = _core.delete_sortedmatch
    __del__ = lambda self : None;
sortedmatch_swigregister = _core.sortedmatch_swigregister
sortedmatch_swigregister(sortedmatch)

class match(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, match, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tattr"] = _core.match_Tattr_set
    __swig_getmethods__["Tattr"] = _core.match_Tattr_get
    __swig_setmethods__["Sattr"] = _core.match_Sattr_set
    __swig_getmethods__["Sattr"] = _core.match_Sattr_get
    def __init__(self, *args): 
        this = _core.new_match(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.match___call__(self, *args)
    __swig_destroy__ = _core.delete_match
    __del__ = lambda self : None;
match_swigregister = _core.match_swigregister
match_swigregister(match)

class pointpoly2(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointpoly2, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, pointpoly2, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.pointpoly2___call__(self, *args)
    def __init__(self): 
        this = _core.new_pointpoly2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_pointpoly2
    __del__ = lambda self : None;
pointpoly2_swigregister = _core.pointpoly2_swigregister
pointpoly2_swigregister(pointpoly2)

class containedby(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, containedby, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, containedby, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.containedby___call__(self, *args)
    def PointInCell(self, *args): return _core.containedby_PointInCell(self, *args)
    def __init__(self): 
        this = _core.new_containedby()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_containedby
    __del__ = lambda self : None;
containedby_swigregister = _core.containedby_swigregister
containedby_swigregister(containedby)

class fastcontainedby(containedby):
    __swig_setmethods__ = {}
    for _s in [containedby]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastcontainedby, name, value)
    __swig_getmethods__ = {}
    for _s in [containedby]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fastcontainedby, name)
    __repr__ = _swig_repr
    def setEnvironment(self, *args): return _core.fastcontainedby_setEnvironment(self, *args)
    def __call__(self, *args): return _core.fastcontainedby___call__(self, *args)
    def __init__(self): 
        this = _core.new_fastcontainedby()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_fastcontainedby
    __del__ = lambda self : None;
fastcontainedby_swigregister = _core.fastcontainedby_swigregister
fastcontainedby_swigregister(fastcontainedby)

class contains(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, contains, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, contains, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.contains___call__(self, *args)
    def __init__(self): 
        this = _core.new_contains()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_contains
    __del__ = lambda self : None;
contains_swigregister = _core.contains_swigregister
contains_swigregister(contains)

class pointpoly(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pointpoly, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, pointpoly, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xs"] = _core.pointpoly_xs_set
    __swig_getmethods__["xs"] = _core.pointpoly_xs_get
    __swig_setmethods__["ys"] = _core.pointpoly_ys_set
    __swig_getmethods__["ys"] = _core.pointpoly_ys_get
    def __call__(self, *args): return _core.pointpoly___call__(self, *args)
    def __init__(self): 
        this = _core.new_pointpoly()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_pointpoly
    __del__ = lambda self : None;
pointpoly_swigregister = _core.pointpoly_swigregister
pointpoly_swigregister(pointpoly)

class inverse_pointer(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, inverse_pointer, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, inverse_pointer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.inverse_pointer_attr_set
    __swig_getmethods__["attr"] = _core.inverse_pointer_attr_get
    def __init__(self, *args): 
        this = _core.new_inverse_pointer(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.inverse_pointer___call__(self, *args)
    __swig_destroy__ = _core.delete_inverse_pointer
    __del__ = lambda self : None;
inverse_pointer_swigregister = _core.inverse_pointer_swigregister
inverse_pointer_swigregister(inverse_pointer)

class bypointer(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bypointer, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, bypointer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attr"] = _core.bypointer_attr_set
    __swig_getmethods__["attr"] = _core.bypointer_attr_get
    def __init__(self, *args): 
        this = _core.new_bypointer(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.bypointer___call__(self, *args)
    __swig_destroy__ = _core.delete_bypointer
    __del__ = lambda self : None;
bypointer_swigregister = _core.bypointer_swigregister
bypointer_swigregister(bypointer)

class unify(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unify, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unify, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.unify___call__(self, *args)
    def __init__(self): 
        this = _core.new_unify()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_unify
    __del__ = lambda self : None;
unify_swigregister = _core.unify_swigregister
unify_swigregister(unify)

class ident(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ident, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ident, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _core.ident___call__(self, *args)
    def __init__(self): 
        this = _core.new_ident()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ident
    __del__ = lambda self : None;
ident_swigregister = _core.ident_swigregister
ident_swigregister(ident)

class interpolate1Dint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate1Dint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate1Dint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_interpolate1Dint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.interpolate1Dint___call__(self, *args)
    def interp(self, *args): return _core.interpolate1Dint_interp(self, *args)
    def getOutScheme(self, *args): return _core.interpolate1Dint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_interpolate1Dint
    __del__ = lambda self : None;
interpolate1Dint_swigregister = _core.interpolate1Dint_swigregister
interpolate1Dint_swigregister(interpolate1Dint)

class interpolate1Dfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, interpolate1Dfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, interpolate1Dfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_interpolate1Dfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.interpolate1Dfloat___call__(self, *args)
    def interp(self, *args): return _core.interpolate1Dfloat_interp(self, *args)
    def getOutScheme(self, *args): return _core.interpolate1Dfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_interpolate1Dfloat
    __del__ = lambda self : None;
interpolate1Dfloat_swigregister = _core.interpolate1Dfloat_swigregister
interpolate1Dfloat_swigregister(interpolate1Dfloat)

class avgint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, avgint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, avgint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_avgint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.avgint___call__(self, *args)
    def average(self, *args): return _core.avgint_average(self, *args)
    def getOutScheme(self, *args): return _core.avgint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_avgint
    __del__ = lambda self : None;
avgint_swigregister = _core.avgint_swigregister
avgint_swigregister(avgint)

class avgfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, avgfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, avgfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_avgfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.avgfloat___call__(self, *args)
    def average(self, *args): return _core.avgfloat_average(self, *args)
    def getOutScheme(self, *args): return _core.avgfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_avgfloat
    __del__ = lambda self : None;
avgfloat_swigregister = _core.avgfloat_swigregister
avgfloat_swigregister(avgfloat)

class sumint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sumint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sumint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_sumint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.sumint___call__(self, *args)
    def sum(self, *args): return _core.sumint_sum(self, *args)
    def getOutScheme(self, *args): return _core.sumint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_sumint
    __del__ = lambda self : None;
sumint_swigregister = _core.sumint_swigregister
sumint_swigregister(sumint)

class sumfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sumfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, sumfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_sumfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.sumfloat___call__(self, *args)
    def sum(self, *args): return _core.sumfloat_sum(self, *args)
    def getOutScheme(self, *args): return _core.sumfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_sumfloat
    __del__ = lambda self : None;
sumfloat_swigregister = _core.sumfloat_swigregister
sumfloat_swigregister(sumfloat)

class trigradint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigradint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, trigradint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_trigradint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.trigradint___call__(self, *args)
    def trigrad(self, *args): return _core.trigradint_trigrad(self, *args)
    def getOutScheme(self, *args): return _core.trigradint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_trigradint
    __del__ = lambda self : None;
trigradint_swigregister = _core.trigradint_swigregister
trigradint_swigregister(trigradint)

class trigradfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, trigradfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, trigradfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_trigradfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.trigradfloat___call__(self, *args)
    def trigrad(self, *args): return _core.trigradfloat_trigrad(self, *args)
    def getOutScheme(self, *args): return _core.trigradfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_trigradfloat
    __del__ = lambda self : None;
trigradfloat_swigregister = _core.trigradfloat_swigregister
trigradfloat_swigregister(trigradfloat)

class grad3Dint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, grad3Dint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, grad3Dint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_grad3Dint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.grad3Dint___call__(self, *args)
    def gradLeastSquares(self, *args): return _core.grad3Dint_gradLeastSquares(self, *args)
    def getOutScheme(self, *args): return _core.grad3Dint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_grad3Dint
    __del__ = lambda self : None;
grad3Dint_swigregister = _core.grad3Dint_swigregister
grad3Dint_swigregister(grad3Dint)

class grad3Dfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, grad3Dfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, grad3Dfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_grad3Dfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.grad3Dfloat___call__(self, *args)
    def gradLeastSquares(self, *args): return _core.grad3Dfloat_gradLeastSquares(self, *args)
    def getOutScheme(self, *args): return _core.grad3Dfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_grad3Dfloat
    __del__ = lambda self : None;
grad3Dfloat_swigregister = _core.grad3Dfloat_swigregister
grad3Dfloat_swigregister(grad3Dfloat)

class gradint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gradint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gradint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_gradint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.gradint___call__(self, *args)
    def gradLeastSquares(self, *args): return _core.gradint_gradLeastSquares(self, *args)
    def gradnorm(self, *args): return _core.gradint_gradnorm(self, *args)
    def getOutScheme(self, *args): return _core.gradint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_gradint
    __del__ = lambda self : None;
gradint_swigregister = _core.gradint_swigregister
gradint_swigregister(gradint)

class gradfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gradfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gradfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_gradfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.gradfloat___call__(self, *args)
    def gradLeastSquares(self, *args): return _core.gradfloat_gradLeastSquares(self, *args)
    def gradnorm(self, *args): return _core.gradfloat_gradnorm(self, *args)
    def getOutScheme(self, *args): return _core.gradfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_gradfloat
    __del__ = lambda self : None;
gradfloat_swigregister = _core.gradfloat_swigregister
gradfloat_swigregister(gradfloat)

class minint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, minint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, minint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_minint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.minint___call__(self, *args)
    def min(self, *args): return _core.minint_min(self, *args)
    def getOutScheme(self, *args): return _core.minint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_minint
    __del__ = lambda self : None;
minint_swigregister = _core.minint_swigregister
minint_swigregister(minint)

class minfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, minfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, minfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_minfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.minfloat___call__(self, *args)
    def min(self, *args): return _core.minfloat_min(self, *args)
    def getOutScheme(self, *args): return _core.minfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_minfloat
    __del__ = lambda self : None;
minfloat_swigregister = _core.minfloat_swigregister
minfloat_swigregister(minfloat)

class maxint(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, maxint, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, maxint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_maxint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.maxint___call__(self, *args)
    def max(self, *args): return _core.maxint_max(self, *args)
    def getOutScheme(self, *args): return _core.maxint_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_maxint
    __del__ = lambda self : None;
maxint_swigregister = _core.maxint_swigregister
maxint_swigregister(maxint)

class maxfloat(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, maxfloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, maxfloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_maxfloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.maxfloat___call__(self, *args)
    def max(self, *args): return _core.maxfloat_max(self, *args)
    def getOutScheme(self, *args): return _core.maxfloat_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_maxfloat
    __del__ = lambda self : None;
maxfloat_swigregister = _core.maxfloat_swigregister
maxfloat_swigregister(maxfloat)

class intunion(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, intunion, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, intunion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vecattr"] = _core.intunion_vecattr_set
    __swig_getmethods__["vecattr"] = _core.intunion_vecattr_get
    __swig_setmethods__["valattr"] = _core.intunion_valattr_set
    __swig_getmethods__["valattr"] = _core.intunion_valattr_get
    __swig_setmethods__["type"] = _core.intunion_type_set
    __swig_getmethods__["type"] = _core.intunion_type_get
    def __init__(self, *args): 
        this = _core.new_intunion(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.intunion___call__(self, *args)
    def getOutScheme(self, *args): return _core.intunion_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_intunion
    __del__ = lambda self : None;
intunion_swigregister = _core.intunion_swigregister
intunion_swigregister(intunion)

class floatunion(AggregationFunction):
    __swig_setmethods__ = {}
    for _s in [AggregationFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatunion, name, value)
    __swig_getmethods__ = {}
    for _s in [AggregationFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, floatunion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vecattr"] = _core.floatunion_vecattr_set
    __swig_getmethods__["vecattr"] = _core.floatunion_vecattr_get
    __swig_setmethods__["valattr"] = _core.floatunion_valattr_set
    __swig_getmethods__["valattr"] = _core.floatunion_valattr_get
    __swig_setmethods__["type"] = _core.floatunion_type_set
    __swig_getmethods__["type"] = _core.floatunion_type_get
    def __init__(self, *args): 
        this = _core.new_floatunion(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.floatunion___call__(self, *args)
    def getOutScheme(self, *args): return _core.floatunion_getOutScheme(self, *args)
    __swig_destroy__ = _core.delete_floatunion
    __del__ = lambda self : None;
floatunion_swigregister = _core.floatunion_swigregister
floatunion_swigregister(floatunion)

class intmember(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, intmember, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, intmember, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item_attr"] = _core.intmember_item_attr_set
    __swig_getmethods__["item_attr"] = _core.intmember_item_attr_get
    __swig_setmethods__["set_attr"] = _core.intmember_set_attr_set
    __swig_getmethods__["set_attr"] = _core.intmember_set_attr_get
    __swig_setmethods__["set_value_attr"] = _core.intmember_set_value_attr_set
    __swig_getmethods__["set_value_attr"] = _core.intmember_set_value_attr_get
    def __init__(self, *args): 
        this = _core.new_intmember(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.intmember___call__(self, *args)
    __swig_destroy__ = _core.delete_intmember
    __del__ = lambda self : None;
intmember_swigregister = _core.intmember_swigregister
intmember_swigregister(intmember)

class floatmember(AssignmentFunction):
    __swig_setmethods__ = {}
    for _s in [AssignmentFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, floatmember, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, floatmember, name)
    __repr__ = _swig_repr
    __swig_setmethods__["item_attr"] = _core.floatmember_item_attr_set
    __swig_getmethods__["item_attr"] = _core.floatmember_item_attr_get
    __swig_setmethods__["set_attr"] = _core.floatmember_set_attr_set
    __swig_getmethods__["set_attr"] = _core.floatmember_set_attr_get
    __swig_setmethods__["set_value_attr"] = _core.floatmember_set_value_attr_set
    __swig_getmethods__["set_value_attr"] = _core.floatmember_set_value_attr_get
    def __init__(self, *args): 
        this = _core.new_floatmember(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _core.floatmember___call__(self, *args)
    __swig_destroy__ = _core.delete_floatmember
    __del__ = lambda self : None;
floatmember_swigregister = _core.floatmember_swigregister
floatmember_swigregister(floatmember)

class MergeOp(BinaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeOp, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MergeOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_MergeOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.MergeOp_Execute(self)
    __swig_getmethods__["Merge"] = lambda x: _core.MergeOp_Merge
    __swig_destroy__ = _core.delete_MergeOp
    __del__ = lambda self : None;
MergeOp_swigregister = _core.MergeOp_swigregister
MergeOp_swigregister(MergeOp)

def MergeOp_Merge(*args):
  return _core.MergeOp_Merge(*args)
MergeOp_Merge = _core.MergeOp_Merge

class SiftOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SiftOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SiftOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_SiftOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.SiftOp_Execute(self)
    __swig_getmethods__["Sift"] = lambda x: _core.SiftOp_Sift
    __swig_destroy__ = _core.delete_SiftOp
    __del__ = lambda self : None;
SiftOp_swigregister = _core.SiftOp_swigregister
SiftOp_swigregister(SiftOp)

def SiftOp_Sift(*args):
  return _core.SiftOp_Sift(*args)
SiftOp_Sift = _core.SiftOp_Sift

VAR = _core.VAR
VAL = _core.VAL
INT = _core.INT
FLOAT = _core.FLOAT
OBJ = _core.OBJ
TUPLE = _core.TUPLE
GRIDFIELD = _core.GRIDFIELD

def typeformat(*args):
  return _core.typeformat(*args)
typeformat = _core.typeformat

def typeval(*args):
  return _core.typeval(*args)
typeval = _core.typeval

def typesize(*args):
  return _core.typesize(*args)
typesize = _core.typesize

def plusplus(*args):
  return _core.plusplus(*args)
plusplus = _core.plusplus
class Scheme:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scheme, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Scheme(*args)
        try: self.this.append(this)
        except: self.this = this
    def addAttribute(self, *args): return _core.Scheme_addAttribute(self, *args)
    def removeAttribute(self, *args): return _core.Scheme_removeAttribute(self, *args)
    def clear(self): return _core.Scheme_clear(self)
    def Subsumes(self, *args): return _core.Scheme_Subsumes(self, *args)
    def begin(self): return _core.Scheme_begin(self)
    def end(self): return _core.Scheme_end(self)
    def size(self): return _core.Scheme_size(self)
    def bytesize(self): return _core.Scheme_bytesize(self)
    def byteposition(self, *args): return _core.Scheme_byteposition(self, *args)
    def getType(self, *args): return _core.Scheme_getType(self, *args)
    def getPosition(self, *args): return _core.Scheme_getPosition(self, *args)
    def getAttribute(self, *args): return _core.Scheme_getAttribute(self, *args)
    def isAttribute(self, *args): return _core.Scheme_isAttribute(self, *args)
    def __eq__(self, *args): return _core.Scheme___eq__(self, *args)
    def __ge__(self, *args): return _core.Scheme___ge__(self, *args)
    def __le__(self, *args): return _core.Scheme___le__(self, *args)
    def formatOf(self, *args): return _core.Scheme_formatOf(self, *args)
    def asString(self): return _core.Scheme_asString(self)
    def PrintTo(self, *args): return _core.Scheme_PrintTo(self, *args)
    def show(self, *args): return _core.Scheme_show(self, *args)
    __swig_destroy__ = _core.delete_Scheme
    __del__ = lambda self : None;
Scheme_swigregister = _core.Scheme_swigregister
Scheme_swigregister(Scheme)

class Tuple:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tuple, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_Tuple(*args)
        try: self.this.append(this)
        except: self.this = this
    def getScheme(self): return _core.Tuple_getScheme(self)
    def get(self, *args): return _core.Tuple_get(self, *args)
    def set(self, *args): return _core.Tuple_set(self, *args)
    def getAttribute(self, *args): return _core.Tuple_getAttribute(self, *args)
    def size(self): return _core.Tuple_size(self)
    def asString(self, delim = ", "): return _core.Tuple_asString(self, delim)
    def show(self, *args): return _core.Tuple_show(self, *args)
    def PrintTo(self, *args): return _core.Tuple_PrintTo(self, *args)
    def bytesize(self): return _core.Tuple_bytesize(self)
    def Next(self): return _core.Tuple_Next(self)
    def Allocate(self): return _core.Tuple_Allocate(self)
    def assign(self, *args): return _core.Tuple_assign(self, *args)
    def copy(self, *args): return _core.Tuple_copy(self, *args)
    def isNull(self): return _core.Tuple_isNull(self)
    def Read(self, *args): return _core.Tuple_Read(self, *args)
    def Parse(self, *args): return _core.Tuple_Parse(self, *args)
    def Covers(self, *args): return _core.Tuple_Covers(self, *args)
    def CoveredBy(self, *args): return _core.Tuple_CoveredBy(self, *args)
    __swig_destroy__ = _core.delete_Tuple
    __del__ = lambda self : None;
Tuple_swigregister = _core.Tuple_swigregister
Tuple_swigregister(Tuple)

class ProjectOp(UnaryGridFieldOperator):
    __swig_setmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProjectOp, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryGridFieldOperator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProjectOp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ProjectOp(*args)
        try: self.this.append(this)
        except: self.this = this
    def Execute(self): return _core.ProjectOp_Execute(self)
    __swig_getmethods__["Project"] = lambda x: _core.ProjectOp_Project
    __swig_destroy__ = _core.delete_ProjectOp
    __del__ = lambda self : None;
ProjectOp_swigregister = _core.ProjectOp_swigregister
ProjectOp_swigregister(ProjectOp)

def ProjectOp_Project(*args):
  return _core.ProjectOp_Project(*args)
ProjectOp_Project = _core.ProjectOp_Project

class OneGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_OneGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_OneGrid
    __del__ = lambda self : None;
OneGrid_swigregister = _core.OneGrid_swigregister
OneGrid_swigregister(OneGrid)

class ZeroGrid(Grid):
    __swig_setmethods__ = {}
    for _s in [Grid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Grid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroGrid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _core.new_ZeroGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ZeroGrid
    __del__ = lambda self : None;
ZeroGrid_swigregister = _core.ZeroGrid_swigregister
ZeroGrid_swigregister(ZeroGrid)

class TupleFunction:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TupleFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TupleFunction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_TupleFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_TupleFunction
    __del__ = lambda self : None;
    def Parse(self, *args): return _core.TupleFunction_Parse(self, *args)
    def ReturnType(self): return _core.TupleFunction_ReturnType(self)
    def InputType(self): return _core.TupleFunction_InputType(self)
    def Eval(self, *args): return _core.TupleFunction_Eval(self, *args)
TupleFunction_swigregister = _core.TupleFunction_swigregister
TupleFunction_swigregister(TupleFunction)

class SpecializedTupleFunction(TupleFunction):
    __swig_setmethods__ = {}
    for _s in [TupleFunction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpecializedTupleFunction, name, value)
    __swig_getmethods__ = {}
    for _s in [TupleFunction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpecializedTupleFunction, name)
    __repr__ = _swig_repr
    def SpecializeFor(self, *args): return _core.SpecializedTupleFunction_SpecializeFor(self, *args)
    def Eval(self, *args): return _core.SpecializedTupleFunction_Eval(self, *args)
    def __init__(self): 
        this = _core.new_SpecializedTupleFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_SpecializedTupleFunction
    __del__ = lambda self : None;
SpecializedTupleFunction_swigregister = _core.SpecializedTupleFunction_swigregister
SpecializedTupleFunction_swigregister(SpecializedTupleFunction)

class nullstream:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nullstream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nullstream, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _core.new_nullstream()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_nullstream
    __del__ = lambda self : None;
nullstream_swigregister = _core.nullstream_swigregister
nullstream_swigregister(nullstream)


def split(*args):
  return _core.split(*args)
split = _core.split

def remove_whitespace(*args):
  return _core.remove_whitespace(*args)
remove_whitespace = _core.remove_whitespace

def same(*args):
  return _core.same(*args)
same = _core.same

def Fatal(*args):
  return _core.Fatal(*args)
Fatal = _core.Fatal

def Warning(*args):
  return _core.Warning(*args)
Warning = _core.Warning

def tab(*args):
  return _core.tab(*args)
tab = _core.tab
ELIO_OK = _core.ELIO_OK
ELIO_ERR = _core.ELIO_ERR
ELIO_FOPEN_ERR = _core.ELIO_FOPEN_ERR
ELIO_FSEEK_ERR = _core.ELIO_FSEEK_ERR
ELIO_FREAD_ERR = _core.ELIO_FREAD_ERR
ELIO_FWRITE_ERR = _core.ELIO_FWRITE_ERR
ELIO_FCLOSE_ERR = _core.ELIO_FCLOSE_ERR
ELIO_FTELL_ERR = _core.ELIO_FTELL_ERR
COMPRESS_NONE = _core.COMPRESS_NONE
COMPRESS_C16 = _core.COMPRESS_C16
ZLEVEL = _core.ZLEVEL
SIGMA_S0 = _core.SIGMA_S0
SIGMA_S1 = _core.SIGMA_S1
SIGMA_S2 = _core.SIGMA_S2
SIGMA_S3 = _core.SIGMA_S3
SIGMA_S4 = _core.SIGMA_S4
MISSING_DATA = _core.MISSING_DATA
class ElcircHeader:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _core.ElcircHeader_magic_set
    __swig_getmethods__["magic"] = _core.ElcircHeader_magic_get
    __swig_setmethods__["version"] = _core.ElcircHeader_version_set
    __swig_getmethods__["version"] = _core.ElcircHeader_version_get
    __swig_setmethods__["start_time"] = _core.ElcircHeader_start_time_set
    __swig_getmethods__["start_time"] = _core.ElcircHeader_start_time_get
    __swig_setmethods__["variable_nm"] = _core.ElcircHeader_variable_nm_set
    __swig_getmethods__["variable_nm"] = _core.ElcircHeader_variable_nm_get
    __swig_setmethods__["variable_dim"] = _core.ElcircHeader_variable_dim_set
    __swig_getmethods__["variable_dim"] = _core.ElcircHeader_variable_dim_get
    __swig_setmethods__["v"] = _core.ElcircHeader_v_set
    __swig_getmethods__["v"] = _core.ElcircHeader_v_get
    __swig_setmethods__["compress"] = _core.ElcircHeader_compress_set
    __swig_getmethods__["compress"] = _core.ElcircHeader_compress_get
    __swig_setmethods__["a"] = _core.ElcircHeader_a_set
    __swig_getmethods__["a"] = _core.ElcircHeader_a_get
    __swig_setmethods__["b"] = _core.ElcircHeader_b_set
    __swig_getmethods__["b"] = _core.ElcircHeader_b_get
    __swig_setmethods__["nsteps"] = _core.ElcircHeader_nsteps_set
    __swig_getmethods__["nsteps"] = _core.ElcircHeader_nsteps_get
    __swig_setmethods__["timestep"] = _core.ElcircHeader_timestep_set
    __swig_getmethods__["timestep"] = _core.ElcircHeader_timestep_get
    __swig_setmethods__["skip"] = _core.ElcircHeader_skip_set
    __swig_getmethods__["skip"] = _core.ElcircHeader_skip_get
    __swig_setmethods__["ivs"] = _core.ElcircHeader_ivs_set
    __swig_getmethods__["ivs"] = _core.ElcircHeader_ivs_get
    __swig_setmethods__["i23d"] = _core.ElcircHeader_i23d_set
    __swig_getmethods__["i23d"] = _core.ElcircHeader_i23d_get
    __swig_setmethods__["vpos"] = _core.ElcircHeader_vpos_set
    __swig_getmethods__["vpos"] = _core.ElcircHeader_vpos_get
    __swig_setmethods__["zmsl"] = _core.ElcircHeader_zmsl_set
    __swig_getmethods__["zmsl"] = _core.ElcircHeader_zmsl_get
    __swig_setmethods__["ivcor"] = _core.ElcircHeader_ivcor_set
    __swig_getmethods__["ivcor"] = _core.ElcircHeader_ivcor_get
    __swig_setmethods__["h0"] = _core.ElcircHeader_h0_set
    __swig_getmethods__["h0"] = _core.ElcircHeader_h0_get
    __swig_setmethods__["hs"] = _core.ElcircHeader_hs_set
    __swig_getmethods__["hs"] = _core.ElcircHeader_hs_get
    __swig_setmethods__["hc"] = _core.ElcircHeader_hc_set
    __swig_getmethods__["hc"] = _core.ElcircHeader_hc_get
    __swig_setmethods__["thetab"] = _core.ElcircHeader_thetab_set
    __swig_getmethods__["thetab"] = _core.ElcircHeader_thetab_get
    __swig_setmethods__["thetaf"] = _core.ElcircHeader_thetaf_set
    __swig_getmethods__["thetaf"] = _core.ElcircHeader_thetaf_get
    __swig_setmethods__["nvrt"] = _core.ElcircHeader_nvrt_set
    __swig_getmethods__["nvrt"] = _core.ElcircHeader_nvrt_get
    __swig_setmethods__["kz"] = _core.ElcircHeader_kz_set
    __swig_getmethods__["kz"] = _core.ElcircHeader_kz_get
    __swig_setmethods__["ks"] = _core.ElcircHeader_ks_set
    __swig_getmethods__["ks"] = _core.ElcircHeader_ks_get
    __swig_setmethods__["nitems"] = _core.ElcircHeader_nitems_set
    __swig_getmethods__["nitems"] = _core.ElcircHeader_nitems_get
    __swig_setmethods__["hsize"] = _core.ElcircHeader_hsize_set
    __swig_getmethods__["hsize"] = _core.ElcircHeader_hsize_get
    __swig_setmethods__["ssize"] = _core.ElcircHeader_ssize_set
    __swig_getmethods__["ssize"] = _core.ElcircHeader_ssize_get
    __swig_setmethods__["sigma"] = _core.ElcircHeader_sigma_set
    __swig_getmethods__["sigma"] = _core.ElcircHeader_sigma_get
    __swig_setmethods__["zcor"] = _core.ElcircHeader_zcor_set
    __swig_getmethods__["zcor"] = _core.ElcircHeader_zcor_get
    __swig_setmethods__["np"] = _core.ElcircHeader_np_set
    __swig_getmethods__["np"] = _core.ElcircHeader_np_get
    __swig_setmethods__["ne"] = _core.ElcircHeader_ne_set
    __swig_getmethods__["ne"] = _core.ElcircHeader_ne_get
    __swig_setmethods__["x"] = _core.ElcircHeader_x_set
    __swig_getmethods__["x"] = _core.ElcircHeader_x_get
    __swig_setmethods__["y"] = _core.ElcircHeader_y_set
    __swig_getmethods__["y"] = _core.ElcircHeader_y_get
    __swig_setmethods__["d"] = _core.ElcircHeader_d_set
    __swig_getmethods__["d"] = _core.ElcircHeader_d_get
    __swig_setmethods__["bi"] = _core.ElcircHeader_bi_set
    __swig_getmethods__["bi"] = _core.ElcircHeader_bi_get
    __swig_setmethods__["no"] = _core.ElcircHeader_no_set
    __swig_getmethods__["no"] = _core.ElcircHeader_no_get
    __swig_setmethods__["etype"] = _core.ElcircHeader_etype_set
    __swig_getmethods__["etype"] = _core.ElcircHeader_etype_get
    __swig_setmethods__["icon"] = _core.ElcircHeader_icon_set
    __swig_getmethods__["icon"] = _core.ElcircHeader_icon_get
    def __init__(self): 
        this = _core.new_ElcircHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircHeader
    __del__ = lambda self : None;
ElcircHeader_swigregister = _core.ElcircHeader_swigregister
ElcircHeader_swigregister(ElcircHeader)

class ElcircTimeStep:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircTimeStep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircTimeStep, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _core.ElcircTimeStep_t_set
    __swig_getmethods__["t"] = _core.ElcircTimeStep_t_get
    __swig_setmethods__["it"] = _core.ElcircTimeStep_it_set
    __swig_getmethods__["it"] = _core.ElcircTimeStep_it_get
    __swig_setmethods__["surfind"] = _core.ElcircTimeStep_surfind_set
    __swig_getmethods__["surfind"] = _core.ElcircTimeStep_surfind_get
    __swig_setmethods__["e"] = _core.ElcircTimeStep_e_set
    __swig_getmethods__["e"] = _core.ElcircTimeStep_e_get
    __swig_setmethods__["d"] = _core.ElcircTimeStep_d_set
    __swig_getmethods__["d"] = _core.ElcircTimeStep_d_get
    def __init__(self): 
        this = _core.new_ElcircTimeStep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircTimeStep
    __del__ = lambda self : None;
ElcircTimeStep_swigregister = _core.ElcircTimeStep_swigregister
ElcircTimeStep_swigregister(ElcircTimeStep)

class ElcircTimeStepAtNode:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElcircTimeStepAtNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElcircTimeStepAtNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _core.ElcircTimeStepAtNode_t_set
    __swig_getmethods__["t"] = _core.ElcircTimeStepAtNode_t_get
    __swig_setmethods__["it"] = _core.ElcircTimeStepAtNode_it_set
    __swig_getmethods__["it"] = _core.ElcircTimeStepAtNode_it_get
    __swig_setmethods__["istart"] = _core.ElcircTimeStepAtNode_istart_set
    __swig_getmethods__["istart"] = _core.ElcircTimeStepAtNode_istart_get
    __swig_setmethods__["istop"] = _core.ElcircTimeStepAtNode_istop_set
    __swig_getmethods__["istop"] = _core.ElcircTimeStepAtNode_istop_get
    __swig_setmethods__["npts"] = _core.ElcircTimeStepAtNode_npts_set
    __swig_getmethods__["npts"] = _core.ElcircTimeStepAtNode_npts_get
    __swig_setmethods__["d"] = _core.ElcircTimeStepAtNode_d_set
    __swig_getmethods__["d"] = _core.ElcircTimeStepAtNode_d_get
    def __init__(self): 
        this = _core.new_ElcircTimeStepAtNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElcircTimeStepAtNode
    __del__ = lambda self : None;
ElcircTimeStepAtNode_swigregister = _core.ElcircTimeStepAtNode_swigregister
ElcircTimeStepAtNode_swigregister(ElcircTimeStepAtNode)

class ElioGrid:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElioGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElioGrid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ne"] = _core.ElioGrid_ne_set
    __swig_getmethods__["ne"] = _core.ElioGrid_ne_get
    __swig_setmethods__["np"] = _core.ElioGrid_np_set
    __swig_getmethods__["np"] = _core.ElioGrid_np_get
    __swig_setmethods__["x"] = _core.ElioGrid_x_set
    __swig_getmethods__["x"] = _core.ElioGrid_x_get
    __swig_setmethods__["y"] = _core.ElioGrid_y_set
    __swig_getmethods__["y"] = _core.ElioGrid_y_get
    __swig_setmethods__["d"] = _core.ElioGrid_d_set
    __swig_getmethods__["d"] = _core.ElioGrid_d_get
    __swig_setmethods__["etype"] = _core.ElioGrid_etype_set
    __swig_getmethods__["etype"] = _core.ElioGrid_etype_get
    __swig_setmethods__["icon"] = _core.ElioGrid_icon_set
    __swig_getmethods__["icon"] = _core.ElioGrid_icon_get
    def __init__(self): 
        this = _core.new_ElioGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _core.delete_ElioGrid
    __del__ = lambda self : None;
ElioGrid_swigregister = _core.ElioGrid_swigregister
ElioGrid_swigregister(ElioGrid)


def ElioReadGrid(*args):
  return _core.ElioReadGrid(*args)
ElioReadGrid = _core.ElioReadGrid

def ElioFindElementInGrid(*args):
  return _core.ElioFindElementInGrid(*args)
ElioFindElementInGrid = _core.ElioFindElementInGrid

def ElioGetCoefficientsGrid(*args):
  return _core.ElioGetCoefficientsGrid(*args)
ElioGetCoefficientsGrid = _core.ElioGetCoefficientsGrid

def ElioGridFindNearestNode(*args):
  return _core.ElioGridFindNearestNode(*args)
ElioGridFindNearestNode = _core.ElioGridFindNearestNode

def ElioFindNearestNode(*args):
  return _core.ElioFindNearestNode(*args)
ElioFindNearestNode = _core.ElioFindNearestNode

def ElioGetGridElementCenter(*args):
  return _core.ElioGetGridElementCenter(*args)
ElioGetGridElementCenter = _core.ElioGetGridElementCenter

def ElioGetGridElementArea(*args):
  return _core.ElioGetGridElementArea(*args)
ElioGetGridElementArea = _core.ElioGetGridElementArea

def ElioGetHeader(*args):
  return _core.ElioGetHeader(*args)
ElioGetHeader = _core.ElioGetHeader

def ElioAllocateHeader(*args):
  return _core.ElioAllocateHeader(*args)
ElioAllocateHeader = _core.ElioAllocateHeader

def ElioFreeHeader(*args):
  return _core.ElioFreeHeader(*args)
ElioFreeHeader = _core.ElioFreeHeader

def ElioPrintHeader(*args):
  return _core.ElioPrintHeader(*args)
ElioPrintHeader = _core.ElioPrintHeader

def ElioGetNStepsInFile(*args):
  return _core.ElioGetNStepsInFile(*args)
ElioGetNStepsInFile = _core.ElioGetNStepsInFile

def ElioGetTimeStep(*args):
  return _core.ElioGetTimeStep(*args)
ElioGetTimeStep = _core.ElioGetTimeStep

def ElioFreeTimeStep(*args):
  return _core.ElioFreeTimeStep(*args)
ElioFreeTimeStep = _core.ElioFreeTimeStep

def ElioAllocateTimeStep(*args):
  return _core.ElioAllocateTimeStep(*args)
ElioAllocateTimeStep = _core.ElioAllocateTimeStep

def ElioGetNode(*args):
  return _core.ElioGetNode(*args)
ElioGetNode = _core.ElioGetNode

def ElioGetNodeOld(*args):
  return _core.ElioGetNodeOld(*args)
ElioGetNodeOld = _core.ElioGetNodeOld

def ElioExtractNode(*args):
  return _core.ElioExtractNode(*args)
ElioExtractNode = _core.ElioExtractNode

def ElioGetXYData(*args):
  return _core.ElioGetXYData(*args)
ElioGetXYData = _core.ElioGetXYData

def ElioGetXYData2(*args):
  return _core.ElioGetXYData2(*args)
ElioGetXYData2 = _core.ElioGetXYData2

def ElioInterpTimeStep(*args):
  return _core.ElioInterpTimeStep(*args)
ElioInterpTimeStep = _core.ElioInterpTimeStep

def ElioGetPoint(*args):
  return _core.ElioGetPoint(*args)
ElioGetPoint = _core.ElioGetPoint

def ElioMakeScalarsOld(*args):
  return _core.ElioMakeScalarsOld(*args)
ElioMakeScalarsOld = _core.ElioMakeScalarsOld

def ElioMakeVectorsOld(*args):
  return _core.ElioMakeVectorsOld(*args)
ElioMakeVectorsOld = _core.ElioMakeVectorsOld

def ElioExtractGrid(*args):
  return _core.ElioExtractGrid(*args)
ElioExtractGrid = _core.ElioExtractGrid

def ElioExtractData(*args):
  return _core.ElioExtractData(*args)
ElioExtractData = _core.ElioExtractData

def ElioIntersectToLeft(*args):
  return _core.ElioIntersectToLeft(*args)
ElioIntersectToLeft = _core.ElioIntersectToLeft

def ElioInPolygon(*args):
  return _core.ElioInPolygon(*args)
ElioInPolygon = _core.ElioInPolygon

def ElioFindElementXY(*args):
  return _core.ElioFindElementXY(*args)
ElioFindElementXY = _core.ElioFindElementXY

def ElioInsideElement(*args):
  return _core.ElioInsideElement(*args)
ElioInsideElement = _core.ElioInsideElement

def ElioInsideElement4(*args):
  return _core.ElioInsideElement4(*args)
ElioInsideElement4 = _core.ElioInsideElement4

def ElioEvalFlowXY(*args):
  return _core.ElioEvalFlowXY(*args)
ElioEvalFlowXY = _core.ElioEvalFlowXY

def ElioEvalScalarXY(*args):
  return _core.ElioEvalScalarXY(*args)
ElioEvalScalarXY = _core.ElioEvalScalarXY

def ElioEval(*args):
  return _core.ElioEval(*args)
ElioEval = _core.ElioEval

def ElioGetCoefficients(*args):
  return _core.ElioGetCoefficients(*args)
ElioGetCoefficients = _core.ElioGetCoefficients

def ibilinear(*args):
  return _core.ibilinear(*args)
ibilinear = _core.ibilinear

def ElioGetZPos(*args):
  return _core.ElioGetZPos(*args)
ElioGetZPos = _core.ElioGetZPos

def ElioGetSurfaceHeader(*args):
  return _core.ElioGetSurfaceHeader(*args)
ElioGetSurfaceHeader = _core.ElioGetSurfaceHeader

def ElioGetSurfaceStep(*args):
  return _core.ElioGetSurfaceStep(*args)
ElioGetSurfaceStep = _core.ElioGetSurfaceStep

def ElioGetBottomHeader(*args):
  return _core.ElioGetBottomHeader(*args)
ElioGetBottomHeader = _core.ElioGetBottomHeader

def ElioGetBottomStep(*args):
  return _core.ElioGetBottomStep(*args)
ElioGetBottomStep = _core.ElioGetBottomStep

def ElioGetTransectHeader(*args):
  return _core.ElioGetTransectHeader(*args)
ElioGetTransectHeader = _core.ElioGetTransectHeader

def ElioGetTransectStep(*args):
  return _core.ElioGetTransectStep(*args)
ElioGetTransectStep = _core.ElioGetTransectStep

def ElioGetLevelHeader(*args):
  return _core.ElioGetLevelHeader(*args)
ElioGetLevelHeader = _core.ElioGetLevelHeader

def ElioGetLevelStep(*args):
  return _core.ElioGetLevelStep(*args)
ElioGetLevelStep = _core.ElioGetLevelStep

def ElioGetZLevelHeader(*args):
  return _core.ElioGetZLevelHeader(*args)
ElioGetZLevelHeader = _core.ElioGetZLevelHeader

def ElioGetZLevelStep(*args):
  return _core.ElioGetZLevelStep(*args)
ElioGetZLevelStep = _core.ElioGetZLevelStep

def ElioPutHeader(*args):
  return _core.ElioPutHeader(*args)
ElioPutHeader = _core.ElioPutHeader

def ElioPutTimeStep(*args):
  return _core.ElioPutTimeStep(*args)
ElioPutTimeStep = _core.ElioPutTimeStep

def ElioPutHeaderOld(*args):
  return _core.ElioPutHeaderOld(*args)
ElioPutHeaderOld = _core.ElioPutHeaderOld

def ElioPutTimeStepOld(*args):
  return _core.ElioPutTimeStepOld(*args)
ElioPutTimeStepOld = _core.ElioPutTimeStepOld

def ElioGetFileType(*args):
  return _core.ElioGetFileType(*args)
ElioGetFileType = _core.ElioGetFileType

def ElioGetElementArea(*args):
  return _core.ElioGetElementArea(*args)
ElioGetElementArea = _core.ElioGetElementArea

def ElioMinMax(*args):
  return _core.ElioMinMax(*args)
ElioMinMax = _core.ElioMinMax

def ElioIntMin(*args):
  return _core.ElioIntMin(*args)
ElioIntMin = _core.ElioIntMin

def ElioIntMax(*args):
  return _core.ElioIntMax(*args)
ElioIntMax = _core.ElioIntMax

def ElioFindIndex(*args):
  return _core.ElioFindIndex(*args)
ElioFindIndex = _core.ElioFindIndex

def ElioInterpolateArray(*args):
  return _core.ElioInterpolateArray(*args)
ElioInterpolateArray = _core.ElioInterpolateArray

def ElioInterpolate(*args):
  return _core.ElioInterpolate(*args)
ElioInterpolate = _core.ElioInterpolate

def ElioInterpolateAtIndex(*args):
  return _core.ElioInterpolateAtIndex(*args)
ElioInterpolateAtIndex = _core.ElioInterpolateAtIndex

def ElioGetDay(*args):
  return _core.ElioGetDay(*args)
ElioGetDay = _core.ElioGetDay

def ElioGetYearDay(*args):
  return _core.ElioGetYearDay(*args)
ElioGetYearDay = _core.ElioGetYearDay

def ElioSetCorieTime(*args):
  return _core.ElioSetCorieTime(*args)
ElioSetCorieTime = _core.ElioSetCorieTime


